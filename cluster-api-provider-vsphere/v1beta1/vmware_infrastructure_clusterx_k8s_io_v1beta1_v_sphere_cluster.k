"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VSphereCluster:
    """
    VSphereCluster is the Schema for the VSphereClusters API

    Attributes
    ----------
    apiVersion : str, default is "vmware.infrastructure.cluster.x-k8s.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VSphereCluster", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterSpec, default is Undefined, optional
        spec
    status : VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatus, default is Undefined, optional
        status
    """


    apiVersion: "vmware.infrastructure.cluster.x-k8s.io/v1beta1" = "vmware.infrastructure.cluster.x-k8s.io/v1beta1"

    kind: "VSphereCluster" = "VSphereCluster"

    metadata?: v1.ObjectMeta

    spec?: VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterSpec

    status?: VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatus


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterSpec:
    """
    VSphereClusterSpec defines the desired state of VSphereCluster

    Attributes
    ----------
    controlPlaneEndpoint : VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterSpecControlPlaneEndpoint, default is Undefined, required
        control plane endpoint
    """


    controlPlaneEndpoint: VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterSpecControlPlaneEndpoint


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterSpecControlPlaneEndpoint:
    """
    APIEndpoint represents a reachable Kubernetes API endpoint.

    Attributes
    ----------
    host : str, default is Undefined, required
        The hostname on which the API server is serving.
    port : int, default is Undefined, required
        The port on which the API server is serving.
    """


    host: str

    port: int


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatus:
    """
    VSphereClusterStatus defines the observed state of VSphereClusterSpec

    Attributes
    ----------
    conditions : [VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatusConditionsItems0], default is Undefined, optional
        Conditions defines current service state of the VSphereCluster.
    failureDomains : {str:VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatusFailureDomainsAnon}, default is Undefined, optional
        FailureDomains is a list of failure domain objects synced from the infrastructure provider.
    ready : bool, default is Undefined, optional
        Ready indicates the infrastructure required to deploy this cluster is ready.
    resourcePolicyName : str, default is Undefined, optional
        ResourcePolicyName is the name of the VirtualMachineSetResourcePolicy for the cluster, if one exists
    """


    conditions?: [VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatusConditionsItems0]

    failureDomains?: {str:VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatusFailureDomainsAnon}

    ready?: bool

    resourcePolicyName?: str


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatusConditionsItems0:
    """
    Condition defines an observation of a Cluster API resource operational state.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition. This field may be empty.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
    severity : str, default is Undefined, optional
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
    """


    lastTransitionTime: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereClusterStatusFailureDomainsAnon:
    """
    FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Attributes is a free form map of attributes an infrastructure provider might use or require.
    controlPlane : bool, default is Undefined, optional
        ControlPlane determines if this failure domain is suitable for use by control plane machines.
    """


    attributes?: {str:str}

    controlPlane?: bool


