"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VSphereMachine:
    """
    VSphereMachine is the Schema for the vspheremachines API

    Attributes
    ----------
    apiVersion : str, default is "vmware.infrastructure.cluster.x-k8s.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VSphereMachine", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineSpec, default is Undefined, optional
        spec
    status : VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatus, default is Undefined, optional
        status
    """


    apiVersion: "vmware.infrastructure.cluster.x-k8s.io/v1beta1" = "vmware.infrastructure.cluster.x-k8s.io/v1beta1"

    kind: "VSphereMachine" = "VSphereMachine"

    metadata?: v1.ObjectMeta

    spec?: VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineSpec

    status?: VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatus


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineSpec:
    """
    VSphereMachineSpec defines the desired state of VSphereMachine

    Attributes
    ----------
    className : str, default is Undefined, required
        ClassName is the name of the class used when specifying the underlying virtual machine
    failureDomain : str, default is Undefined, optional
        FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
    imageName : str, default is Undefined, required
        ImageName is the name of the base image used when specifying the underlying virtual machine
    powerOffMode : str, default is "hard", optional
        PowerOffMode describes the desired behavior when powering off a VM. 
         There are three, supported power off modes: hard, soft, and trySoft. The first mode, hard, is the equivalent of a physical system's power cord being ripped from the wall. The soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully shut down the VM. Its variant, trySoft, first attempts a graceful shutdown, and if that fails or the VM is not in a powered off state after reaching 5 minutes timeout, the VM is halted. 
         If omitted, the mode defaults to hard.
    providerID : str, default is Undefined, optional
        ProviderID is the virtual machine's BIOS UUID formated as vsphere://12345678-1234-1234-1234-123456789abc. This is required at runtime by CAPI. Do not remove this field.
    storageClass : str, default is Undefined, optional
        StorageClass is the name of the storage class used when specifying the underlying virtual machine.
    volumes : [VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineSpecVolumesItems0], default is Undefined, optional
        Volumes is the set of PVCs to be created and attached to the VSphereMachine
    """


    className: str

    failureDomain?: str

    imageName: str

    powerOffMode?: "hard" | "soft" | "trySoft" = "hard"

    providerID?: str

    storageClass?: str

    volumes?: [VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineSpecVolumesItems0]


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineSpecVolumesItems0:
    """
    VSphereMachineVolume defines a PVC attachment

    Attributes
    ----------
    capacity : {str:int | str}, default is Undefined, required
        Capacity is the PVC capacity
    name : str, default is Undefined, required
        Name is suffix used to name this PVC as: VSphereMachine.Name + "-" + Name
    storageClass : str, default is Undefined, optional
        StorageClass defaults to VSphereMachineSpec.StorageClass
    """


    capacity: {str:int | str}

    name: str

    storageClass?: str


    check:


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatus:
    """
    VSphereMachineStatus defines the observed state of VSphereMachine

    Attributes
    ----------
    addresses : [VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatusAddressesItems0], default is Undefined, optional
        Addresses contains the instance associated addresses.
    conditions : [VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatusConditionsItems0], default is Undefined, optional
        Conditions defines current service state of the VSphereMachine.
    failureMessage : str, default is Undefined, optional
        FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
         This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
         Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
    failureReason : str, default is Undefined, optional
        FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
         This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
         Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
    ready : bool, default is Undefined, optional
        Ready is true when the provider resource is ready. This is required at runtime by CAPI. Do not remove this field.
    vmID : str, default is Undefined, optional
        ID is used to identify the virtual machine.
    vmIp : str, default is Undefined, optional
        IPAddr is the IP address used to access the virtual machine.
    vmstatus : str, default is Undefined, optional
        VMStatus is used to identify the virtual machine status.
    """


    addresses?: [VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatusAddressesItems0]

    conditions?: [VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatusConditionsItems0]

    failureMessage?: str

    failureReason?: str

    ready?: bool

    vmID?: str

    vmIp?: str

    vmstatus?: str


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatusAddressesItems0:
    """
    NodeAddress contains information for the node's address.

    Attributes
    ----------
    address : str, default is Undefined, required
        The node address.
    $type : str, default is Undefined, required
        Node address type, one of Hostname, ExternalIP or InternalIP.
    """


    address: str

    $type: str


schema VmwareInfrastructureClusterxK8sIoV1beta1VSphereMachineStatusConditionsItems0:
    """
    Condition defines an observation of a Cluster API resource operational state.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition. This field may be empty.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
    severity : str, default is Undefined, optional
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
    """


    lastTransitionTime: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


