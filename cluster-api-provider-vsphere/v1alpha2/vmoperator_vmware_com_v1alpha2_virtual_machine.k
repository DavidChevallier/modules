"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema VirtualMachine:
    """
    VirtualMachine is the schema for the virtualmachines API and represents the desired state and observed status of a virtualmachines resource.

    Attributes
    ----------
    apiVersion : str, default is "vmoperator.vmware.com/v1alpha2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VirtualMachine", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : VmoperatorVmwareComV1alpha2VirtualMachineSpec, default is Undefined, optional
        spec
    status : VmoperatorVmwareComV1alpha2VirtualMachineStatus, default is Undefined, optional
        status
    """


    apiVersion: "vmoperator.vmware.com/v1alpha2" = "vmoperator.vmware.com/v1alpha2"

    kind: "VirtualMachine" = "VirtualMachine"

    metadata?: v1.ObjectMeta

    spec?: VmoperatorVmwareComV1alpha2VirtualMachineSpec

    status?: VmoperatorVmwareComV1alpha2VirtualMachineStatus


schema VmoperatorVmwareComV1alpha2VirtualMachineSpec:
    """
    VirtualMachineSpec defines the desired state of a VirtualMachine.

    Attributes
    ----------
    advanced : VmoperatorVmwareComV1alpha2VirtualMachineSpecAdvanced, default is Undefined, optional
        advanced
    bootstrap : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrap, default is Undefined, optional
        bootstrap
    className : str, default is Undefined, optional
        Class describes the name of the VirtualMachineClass resource used to deploy this VM. 
         This field is optional in the cases where there exists a sensible default value, such as when there is a single VirtualMachineClass resource available in the same Namespace as the VM being deployed.
    imageName : str, default is Undefined, optional
        ImageName describes the name of the image resource used to deploy this VM. 
         This field may be used to specify the name of a VirtualMachineImage or ClusterVirtualMachineImage resource. The resolver first checks to see if there is a ClusterVirtualMachineImage with the specified name. If no such resource exists, the resolver then checks to see if there is a VirtualMachineImage resource with the specified name in the same Namespace as the VM being deployed. 
         This field is optional in the cases where there exists a sensible default value, such as when there is a single VirtualMachineImage resource available in the same Namespace as the VM being deployed.
    network : VmoperatorVmwareComV1alpha2VirtualMachineSpecNetwork, default is Undefined, optional
        network
    nextRestartTime : str, default is Undefined, optional
        NextRestartTime may be used to restart the VM, in accordance with RestartMode, by setting the value of this field to "now" (case-insensitive). 
         A mutating webhook changes this value to the current time (UTC), which the VM controller then uses to determine the VM should be restarted by comparing the value to the timestamp of the last time the VM was restarted. 
         Please note it is not possible to schedule future restarts using this field. The only value that users may set is the string "now" (case-insensitive).
    powerOffMode : str, default is "TrySoft", optional
        PowerOffMode describes the desired behavior when powering off a VM. 
         There are three, supported power off modes: Hard, Soft, and TrySoft. The first mode, Hard, is the equivalent of a physical system's power cord being ripped from the wall. The Soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully shutdown the VM. Its variant, TrySoft, first attempts a graceful shutdown, and if that fails or the VM is not in a powered off state after five minutes, the VM is halted. 
         If omitted, the mode defaults to TrySoft.
    powerState : str, default is Undefined, optional
        PowerState describes the desired power state of a VirtualMachine. 
         Please note this field may be omitted when creating a new VM and will default to "PoweredOn." However, once the field is set to a non-empty value, it may no longer be set to an empty value. 
         Additionally, setting this value to "Suspended" is not supported when creating a new VM. The valid values when creating a new VM are "PoweredOn" and "PoweredOff." An empty value is also allowed on create since this value defaults to "PoweredOn" for new VMs.
    readinessGates : [VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessGatesItems0], default is Undefined, optional
        ReadinessGates, if specified, will be evaluated to determine the VM's readiness. 
         A VM is ready when its readiness probe, if specified, is true AND all of the conditions specified by the readiness gates have a status equal to "True".
    readinessProbe : VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbe, default is Undefined, optional
        readiness probe
    reserved : VmoperatorVmwareComV1alpha2VirtualMachineSpecReserved, default is Undefined, optional
        reserved
    restartMode : str, default is "TrySoft", optional
        RestartMode describes the desired behavior for restarting a VM when spec.nextRestartTime is set to "now" (case-insensitive). 
         There are three, supported suspend modes: Hard, Soft, and TrySoft. The first mode, Hard, is where vSphere resets the VM without any interaction inside of the guest. The Soft mode requires the VM's guest to have VM Tools installed and asks the guest to restart the VM. Its variant, TrySoft, first attempts a soft restart, and if that fails or does not complete within five minutes, the VM is hard reset. 
         If omitted, the mode defaults to TrySoft.
    storageClass : str, default is Undefined, optional
        StorageClass describes the name of a Kubernetes StorageClass resource used to configure this VM's storage-related attributes. 
         Please see https://kubernetes.io/docs/concepts/storage/storage-classes/ for more information on Kubernetes storage classes. 
         This field is optional in the cases where there exists a sensible default value, such as when there is a single StorageClass resource available in the same Namespace as the VM being deployed.
    suspendMode : str, default is "TrySoft", optional
        SuspendMode describes the desired behavior when suspending a VM. 
         There are three, supported suspend modes: Hard, Soft, and TrySoft. The first mode, Hard, is where vSphere suspends the VM to disk without any interaction inside of the guest. The Soft mode requires the VM's guest to have VM Tools installed and attempts to gracefully suspend the VM. Its variant, TrySoft, first attempts a graceful suspend, and if that fails or the VM is not in a put into standby by the guest after five minutes, the VM is suspended. 
         If omitted, the mode defaults to TrySoft.
    volumes : [VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0], default is Undefined, optional
        Volumes describes a list of volumes that can be mounted to the VM.
    """


    advanced?: VmoperatorVmwareComV1alpha2VirtualMachineSpecAdvanced

    bootstrap?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrap

    className?: str

    imageName?: str

    network?: VmoperatorVmwareComV1alpha2VirtualMachineSpecNetwork

    nextRestartTime?: str

    powerOffMode?: "Hard" | "Soft" | "TrySoft" = "TrySoft"

    powerState?: "PoweredOff" | "PoweredOn" | "Suspended"

    readinessGates?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessGatesItems0]

    readinessProbe?: VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbe

    reserved?: VmoperatorVmwareComV1alpha2VirtualMachineSpecReserved

    restartMode?: "Hard" | "Soft" | "TrySoft" = "TrySoft"

    storageClass?: str

    suspendMode?: "Hard" | "Soft" | "TrySoft" = "TrySoft"

    volumes?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0]


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecAdvanced:
    """
    Advanced describes a set of optional, advanced VM configuration options.

    Attributes
    ----------
    bootDiskCapacity : int | str, default is Undefined, optional
        BootDiskCapacity is the capacity of the VM's boot disk -- the first disk from the VirtualMachineImage from which the VM was deployed. 
         Please note it is not advised to change this value while the VM is running. Also, resizing the VM's boot disk may require actions inside of the guest to take advantage of the additional capacity. Finally, changing the size of the VM's boot disk, even increasing it, could adversely affect the VM.
    changeBlockTracking : bool, default is Undefined, optional
        ChangeBlockTracking is a flag that enables incremental backup support for this VM, a feature utilized by external backup systems such as VMware Data Recovery.
    defaultVolumeProvisioningMode : str, default is Undefined, optional
        DefaultVolumeProvisioningMode specifies the default provisioning mode for persistent volumes managed by this VM.
    """


    bootDiskCapacity?: int | str

    changeBlockTracking?: bool

    defaultVolumeProvisioningMode?: "Thin" | "Thick" | "ThickEagerZero"


    check:
        regex.match(str(bootDiskCapacity), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if bootDiskCapacity


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrap:
    """
    Bootstrap describes the desired state of the guest's bootstrap configuration. 
     If omitted, then the bootstrap method is determined based on the guest identifier from the VirtualMachineImage. If the image's guest OS type is Windows, then the Sysprep bootstrap method is used; if Linux, the LinuxPrep method is used. 
     Please note that defaulting to Sysprep for Windows images only works if the image uses a volume license key, otherwise the image's product ID is required.

    Attributes
    ----------
    cloudInit : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInit, default is Undefined, optional
        cloud init
    linuxPrep : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapLinuxPrep, default is Undefined, optional
        linux prep
    sysprep : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprep, default is Undefined, optional
        sysprep
    vAppConfig : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfig, default is Undefined, optional
        v app config
    """


    cloudInit?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInit

    linuxPrep?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapLinuxPrep

    sysprep?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprep

    vAppConfig?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfig


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInit:
    """
    CloudInit may be used to bootstrap Linux guests with Cloud-Init or Windows guests that support Cloudbase-Init. 
     The guest's networking stack is configured by Cloud-Init on Linux guests and Cloudbase-Init on Windows guests. 
     Please note this bootstrap provider may not be used in conjunction with the other bootstrap providers.

    Attributes
    ----------
    cloudConfig : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfig, default is Undefined, optional
        cloud config
    rawCloudConfig : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitRawCloudConfig, default is Undefined, optional
        raw cloud config
    sshAuthorizedKeys : [str], default is Undefined, optional
        SSHAuthorizedKeys is a list of public keys that CloudInit will apply to the guest's default user.
    """


    cloudConfig?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfig

    rawCloudConfig?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitRawCloudConfig

    sshAuthorizedKeys?: [str]


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfig:
    """
    CloudConfig describes a subset of a Cloud-Init CloudConfig, used to bootstrap the VM. 
     Please note this field and RawCloudConfig are mutually exclusive.

    Attributes
    ----------
    timezone : str, default is Undefined, optional
        Timezone describes the timezone represented in /usr/share/zoneinfo.
    user : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUser, default is Undefined, optional
        user
    users : [VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0], default is Undefined, optional
        Users allows adding/configuring one or more users on the guest. 
         Please note if the first element in this list has a Name field set to "default", then that element will be serialized as "- default" when marshaling this list as part of generating a YAML CloudConfig.
    write_files : [VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0], default is Undefined, optional
        WriteFiles
    """


    timezone?: str

    user?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUser

    users?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0]

    write_files?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0]


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUser:
    """
    User enables overriding the "default_user" configuration from "/etc/cloud/cloud.cfg".

    Attributes
    ----------
    create_groups : bool, default is Undefined, optional
        CreateGroups is a flag that may be set to false to disable creation of specified user groups. 
         Defaults to true when Name is not "default".
    expiredate : str, default is Undefined, optional
        ExpireData is the date on which the user's account will be disabled.
    gecos : str, default is Undefined, optional
        Gecos is an optional comment about the user, usually a comma-separated string of the user's real name and contact information.
    groups : [str], default is Undefined, optional
        Groups is an optional list of groups to add to the user.
    hashed_passwd : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUserHashedPasswd, default is Undefined, optional
        hashed passwd
    homedir : str, default is Undefined, optional
        Homedir is the optional home directory for the user. 
         Defaults to "/home/<username>" when Name is not "default".
    inactive : int, default is Undefined, optional
        Inactive optionally represents the number of days until the user is disabled.
    lock_passwd : bool, default is Undefined, optional
        LockPasswd disables password login. 
         Defaults to true when Name is not "default".
    name : str, default is Undefined, required
        Name is the user's login name. 
         Please note this field may be set to the special value of "default" when this User is the first element in the Users list from the CloudConfig. When set to "default", all other fields from this User must be nil.
    no_create_home : bool, default is Undefined, optional
        NoCreateHome prevents the creation of the home directory. 
         Defaults to false when Name is not "default".
    no_log_init : bool, default is Undefined, optional
        NoLogInit prevents the initialization of lastlog and faillog for the user. 
         Defaults to false when Name is not "default".
    no_user_group : bool, default is Undefined, optional
        NoUserGroup prevents the creation of the group named after the user. 
         Defaults to false when Name is not "default".
    passwd : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUserPasswd, default is Undefined, optional
        passwd
    primary_group : str, default is Undefined, optional
        PrimaryGroup is the primary group for the user. 
         Defaults to the value of the Name field when it is not "default".
    selinux_user : str, default is Undefined, optional
        SELinuxUser is the SELinux user for the user's login.
    shell : str, default is Undefined, optional
        Shell is the path to the user's login shell. 
         Please note the default is to set no shell, which results in a system-specific default being used.
    snapuser : str, default is Undefined, optional
        SnapUser specifies an e-mail address to create the user as a Snappy user through "snap create-user". 
         If an Ubuntu SSO account is associated with the address, the username and SSH keys will be requested from there.
    ssh_authorized_keys : [str], default is Undefined, optional
        SSHAuthorizedKeys is a list of SSH keys to add to the user's authorized keys file. 
         Please note this field may not be combined with SSHRedirectUser.
    ssh_import_id : [str], default is Undefined, optional
        SSHImportID is a list of SSH IDs to import for the user. 
         Please note this field may not be combined with SSHRedirectUser.
    ssh_redirect_user : bool, default is Undefined, optional
        SSHRedirectUser may be set to true to disable SSH logins for this user. 
         Please note that when specified, all SSH keys from cloud meta-data will be configured in a disabled state for this user. Any SSH login as this user will timeout with a message to login instead as the default user. 
         This field may not be combined with SSHAuthorizedKeys or SSHImportID. 
         Defaults to false when Name is not "default".
    sudo : str, default is Undefined, optional
        Sudo is a sudo rule to apply to the user. 
         When omitted, no sudo rules will be applied to the user.
    system : bool, default is Undefined, optional
        System is an optional flag that indicates the user should be created as a system user with no home directory. 
         Defaults to false when Name is not "default".
    uid : int, default is Undefined, optional
        UID is the user's ID. 
         When omitted the guest will default to the next available number.
    """


    create_groups?: bool

    expiredate?: str

    gecos?: str

    groups?: [str]

    hashed_passwd?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUserHashedPasswd

    homedir?: str

    inactive?: int

    lock_passwd?: bool

    name: str

    no_create_home?: bool

    no_log_init?: bool

    no_user_group?: bool

    passwd?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUserPasswd

    primary_group?: str

    selinux_user?: str

    shell?: str

    snapuser?: str

    ssh_authorized_keys?: [str]

    ssh_import_id?: [str]

    ssh_redirect_user?: bool

    sudo?: str

    system?: bool

    uid?: int


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUserHashedPasswd:
    """
    HashedPasswd is a hash of the user's password that will be applied even if the specified user already exists.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUserPasswd:
    """
    Passwd is a hash of the user's password that will be applied only to a newly created user. To apply a new, hashed password to an existing user please use HashedPasswd instead.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0:
    """
    User is a CloudConfig user data structure.

    Attributes
    ----------
    create_groups : bool, default is Undefined, optional
        CreateGroups is a flag that may be set to false to disable creation of specified user groups. 
         Defaults to true when Name is not "default".
    expiredate : str, default is Undefined, optional
        ExpireData is the date on which the user's account will be disabled.
    gecos : str, default is Undefined, optional
        Gecos is an optional comment about the user, usually a comma-separated string of the user's real name and contact information.
    groups : [str], default is Undefined, optional
        Groups is an optional list of groups to add to the user.
    hashed_passwd : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0HashedPasswd, default is Undefined, optional
        hashed passwd
    homedir : str, default is Undefined, optional
        Homedir is the optional home directory for the user. 
         Defaults to "/home/<username>" when Name is not "default".
    inactive : int, default is Undefined, optional
        Inactive optionally represents the number of days until the user is disabled.
    lock_passwd : bool, default is Undefined, optional
        LockPasswd disables password login. 
         Defaults to true when Name is not "default".
    name : str, default is Undefined, required
        Name is the user's login name. 
         Please note this field may be set to the special value of "default" when this User is the first element in the Users list from the CloudConfig. When set to "default", all other fields from this User must be nil.
    no_create_home : bool, default is Undefined, optional
        NoCreateHome prevents the creation of the home directory. 
         Defaults to false when Name is not "default".
    no_log_init : bool, default is Undefined, optional
        NoLogInit prevents the initialization of lastlog and faillog for the user. 
         Defaults to false when Name is not "default".
    no_user_group : bool, default is Undefined, optional
        NoUserGroup prevents the creation of the group named after the user. 
         Defaults to false when Name is not "default".
    passwd : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0Passwd, default is Undefined, optional
        passwd
    primary_group : str, default is Undefined, optional
        PrimaryGroup is the primary group for the user. 
         Defaults to the value of the Name field when it is not "default".
    selinux_user : str, default is Undefined, optional
        SELinuxUser is the SELinux user for the user's login.
    shell : str, default is Undefined, optional
        Shell is the path to the user's login shell. 
         Please note the default is to set no shell, which results in a system-specific default being used.
    snapuser : str, default is Undefined, optional
        SnapUser specifies an e-mail address to create the user as a Snappy user through "snap create-user". 
         If an Ubuntu SSO account is associated with the address, the username and SSH keys will be requested from there.
    ssh_authorized_keys : [str], default is Undefined, optional
        SSHAuthorizedKeys is a list of SSH keys to add to the user's authorized keys file. 
         Please note this field may not be combined with SSHRedirectUser.
    ssh_import_id : [str], default is Undefined, optional
        SSHImportID is a list of SSH IDs to import for the user. 
         Please note this field may not be combined with SSHRedirectUser.
    ssh_redirect_user : bool, default is Undefined, optional
        SSHRedirectUser may be set to true to disable SSH logins for this user. 
         Please note that when specified, all SSH keys from cloud meta-data will be configured in a disabled state for this user. Any SSH login as this user will timeout with a message to login instead as the default user. 
         This field may not be combined with SSHAuthorizedKeys or SSHImportID. 
         Defaults to false when Name is not "default".
    sudo : str, default is Undefined, optional
        Sudo is a sudo rule to apply to the user. 
         When omitted, no sudo rules will be applied to the user.
    system : bool, default is Undefined, optional
        System is an optional flag that indicates the user should be created as a system user with no home directory. 
         Defaults to false when Name is not "default".
    uid : int, default is Undefined, optional
        UID is the user's ID. 
         When omitted the guest will default to the next available number.
    """


    create_groups?: bool

    expiredate?: str

    gecos?: str

    groups?: [str]

    hashed_passwd?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0HashedPasswd

    homedir?: str

    inactive?: int

    lock_passwd?: bool

    name: str

    no_create_home?: bool

    no_log_init?: bool

    no_user_group?: bool

    passwd?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0Passwd

    primary_group?: str

    selinux_user?: str

    shell?: str

    snapuser?: str

    ssh_authorized_keys?: [str]

    ssh_import_id?: [str]

    ssh_redirect_user?: bool

    sudo?: str

    system?: bool

    uid?: int


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0HashedPasswd:
    """
    HashedPasswd is a hash of the user's password that will be applied even if the specified user already exists.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigUsersItems0Passwd:
    """
    Passwd is a hash of the user's password that will be applied only to a newly created user. To apply a new, hashed password to an existing user please use HashedPasswd instead.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0:
    """
    WriteFile is a CloudConfig write_file data structure.

    Attributes
    ----------
    append : bool, default is Undefined, optional
        Append specifies whether or not to append the content to an existing file if the file specified by Path already exists.
    content : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0Content, default is Undefined, optional
        content
    defer : bool, default is Undefined, optional
        Defer indicates to defer writing the file until Cloud-Init's "final" stage, after users are created and packages are installed.
    encoding : str, default is "text/plain", optional
        Encoding is an optional encoding type of the content.
    owner : str, default is "root:root", optional
        Owner is an optional "owner:group" to chown the file.
    path : str, default is Undefined, required
        Path is the path of the file to which the content is decoded and written.
    permissions : str, default is "0644", optional
        Permissions an optional set of file permissions to set. 
         Please note the permissions should be specified as an octal string, ex. "0###". 
         When omitted the guest will default this value to "0644".
    """


    append?: bool

    content?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0Content

    defer?: bool

    encoding?: "b64" | "base64" | "gz" | "gzip" | "gz+b64" | "gz+base64" | "gzip+b64" | "gzip+base64" | "text/plain" = "text/plain"

    owner?: str = "root:root"

    path: str

    permissions?: str = "0644"


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0Content:
    """
    Content is the optional content to write to the provided Path. 
     When omitted an empty file will be created or existing file will be modified.

    Attributes
    ----------
    from : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0ContentFrom, default is Undefined, optional
        from
    value : str, default is Undefined, optional
        Value is used to directly specify a value. 
         Please note this field is mutually exclusive with the From field.
    """


    from?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0ContentFrom

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitCloudConfigWriteFilesItems0ContentFrom:
    """
    From is specified to reference a value from a Secret resource. 
     Please note this field is mutually exclusive with the Value field.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapCloudInitRawCloudConfig:
    """
    RawCloudConfig describes a key in a Secret resource that contains the CloudConfig data used to bootstrap the VM. 
     The CloudConfig data specified by the key may be plain-text, base64-encoded, or gzipped and base64-encoded. 
     Please note this field and CloudConfig are mutually exclusive.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapLinuxPrep:
    """
    LinuxPrep may be used to bootstrap Linux guests. 
     The guest's networking stack is configured by Guest OS Customization (GOSC). 
     Please note this bootstrap provider may be used in conjunction with the VAppConfig bootstrap provider when wanting to configure the guest's network with GOSC but also send vApp/OVF properties into the guest. 
     This bootstrap provider may not be used in conjunction with the CloudInit or Sysprep bootstrap providers.

    Attributes
    ----------
    hardwareClockIsUTC : bool, default is Undefined, optional
        HardwareClockIsUTC specifies whether the hardware clock is in UTC or local time.
    timeZone : str, default is Undefined, optional
        TimeZone is a case-sensitive timezone, such as Europe/Sofia. 
         Valid values are based on the tz (timezone) database used by Linux and other Unix systems. The values are strings in the form of "Area/Location," in which Area is a continent or ocean name, and Location is the city, island, or other regional designation. 
         Please see https://kb.vmware.com/s/article/2145518 for a list of valid time zones for Linux systems.
    """


    hardwareClockIsUTC?: bool

    timeZone?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprep:
    """
    Sysprep may be used to bootstrap Windows guests. 
     The guest's networking stack is configured by Guest OS Customization (GOSC). 
     Please note this bootstrap provider may be used in conjunction with the VAppConfig bootstrap provider when wanting to configure the guest's network with GOSC but also send vApp/OVF properties into the guest. 
     This bootstrap provider may not be used in conjunction with the CloudInit or LinuxPrep bootstrap providers.

    Attributes
    ----------
    rawSysprep : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepRawSysprep, default is Undefined, optional
        raw sysprep
    sysprep : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprep, default is Undefined, optional
        sysprep
    """


    rawSysprep?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepRawSysprep

    sysprep?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprep


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepRawSysprep:
    """
    RawSysprep describes a key in a Secret resource that contains an XML string of the Sysprep text used to bootstrap the VM. 
     The data specified by the Secret key may be plain-text, base64-encoded, or gzipped and base64-encoded. 
     Please note this field and Sysprep are mutually exclusive.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprep:
    """
    Sysprep is an object representation of a Windows sysprep.xml answer file. 
     This field encloses all the individual keys listed in a sysprep.xml file. 
     For more detailed information please see https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx. 
     Please note this field and RawSysprep are mutually exclusive.

    Attributes
    ----------
    guiRunOnce : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiRunOnce, default is Undefined, optional
        gui run once
    guiUnattended : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiUnattended, default is Undefined, required
        gui unattended
    identification : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepIdentification, default is Undefined, required
        identification
    licenseFilePrintData : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepLicenseFilePrintData, default is Undefined, optional
        license file print data
    userData : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepUserData, default is Undefined, required
        user data
    """


    guiRunOnce?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiRunOnce

    guiUnattended: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiUnattended

    identification: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepIdentification

    licenseFilePrintData?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepLicenseFilePrintData

    userData: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepUserData


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiRunOnce:
    """
    GUIRunOnce is a representation of the Sysprep GuiRunOnce key.

    Attributes
    ----------
    commmands : [str], default is Undefined, optional
        Commands is a list of commands to run at first user logon, after guest customization.
    """


    commmands?: [str]


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiUnattended:
    """
    GUIUnattended is a representation of the Sysprep GUIUnattended key.

    Attributes
    ----------
    autoLogon : bool, default is Undefined, optional
        AutoLogon determine whether or not the machine automatically logs on as Administrator. 
         Please note if AutoLogin is true, then Password must be set or guest customization will fail.
    autoLogonCount : int, default is Undefined, optional
        AutoLogonCount specifies the number of times the machine should automatically log on as Administrator. 
         Generally it should be 1, but if your setup requires a number of reboots, you may want to increase it. This number may be determined by the list of commands executed by the GuiRunOnce command. 
         Please note this field only matters if AutoLogin is true.
    password : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiUnattendedPassword, default is Undefined, optional
        password
    timeZone : int, default is Undefined, optional
        TimeZone is the time zone index for the virtual machine. 
         Please note that numbers correspond to time zones listed at https://bit.ly/3Rzv8oL.
    """


    autoLogon?: bool

    autoLogonCount?: int

    password?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiUnattendedPassword

    timeZone?: int


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepGuiUnattendedPassword:
    """
    Password is the new administrator password for the machine. 
     To specify that the password should be set to blank (that is, no password), set the password value to NULL. Because of encryption, "" is NOT a valid value. 
     Please note if the password is set to blank and AutoLogon is true, the guest customization will fail. 
     If the XML file is generated by the VirtualCenter Customization Wizard, then the password is encrypted. Otherwise, the client should set the plainText attribute to true, so that the customization process does not attempt to decrypt the string.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepIdentification:
    """
    Identification is a representation of the Sysprep Identification key.

    Attributes
    ----------
    domainAdmin : str, default is Undefined, optional
        DomainAdmin is the domain user account used for authentication if the virtual machine is joining a domain. The user does not need to be a domain administrator, but the account must have the privileges required to add computers to the domain.
    domainAdminPassword : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepIdentificationDomainAdminPassword, default is Undefined, optional
        domain admin password
    joinDomain : str, default is Undefined, optional
        JoinDomain is the domain that the virtual machine should join. If this value is supplied, then DomainAdmin and DomainAdminPassword must also be supplied, and the JoinWorkgroup name must be empty.
    joinWorkgroup : str, default is Undefined, optional
        JoinWorkgroup is the workgroup that the virtual machine should join. If this value is supplied, then the JoinDomain and the authentication fields (DomainAdmin and DomainAdminPassword) must be empty.
    """


    domainAdmin?: str

    domainAdminPassword?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepIdentificationDomainAdminPassword

    joinDomain?: str

    joinWorkgroup?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepIdentificationDomainAdminPassword:
    """
    DomainAdminPassword is the password for the domain user account used for authentication if the virtual machine is joining a domain.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepLicenseFilePrintData:
    """
    LicenseFilePrintData is a representation of the Sysprep LicenseFilePrintData key. 
     Please note this is required only for Windows 2000 Server and Windows Server 2003.

    Attributes
    ----------
    autoMode : str, default is Undefined, required
        AutoMode specifies the server licensing mode.
    autoUsers : int, default is Undefined, optional
        AutoUsers indicates the number of client licenses purchased for the VirtualCenter server being installed. 
         Please note this value is ignored unless AutoMode is PerServer.
    """


    autoMode: "perSeat" | "perServer"

    autoUsers?: int


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepUserData:
    """
    UserData is a representation of the Sysprep UserData key.

    Attributes
    ----------
    fullName : str, default is Undefined, optional
        FullName is the user's full name.
    orgName : str, default is Undefined, optional
        OrgName is the name of the user's organization.
    productID : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepUserDataProductID, default is Undefined, optional
        product ID
    """


    fullName?: str

    orgName?: str

    productID?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepUserDataProductID


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapSysprepSysprepUserDataProductID:
    """
    ProductID is a valid serial number. 
     Please note unless the VirtualMachineImage was installed with a volume license key, ProductID must be set or guest customization will fail.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfig:
    """
    VAppConfig may be used to bootstrap guests that rely on vApp properties (how VMware surfaces OVF properties on guests) to transport data into the guest. 
     The guest's networking stack may be configured using either vApp properties or GOSC. 
     Many OVFs define one or more properties that are used by the guest to bootstrap its networking stack. If the VirtualMachineImage defines one or more properties like this, then they can be configured to use the network data provided for this VM at runtime by setting these properties to Go template strings. 
     It is also possible to use GOSC to bootstrap this VM's network stack by configuring either the LinuxPrep or Sysprep bootstrap providers. 
     Please note the VAppConfig bootstrap provider in conjunction with the LinuxPrep bootstrap provider is the equivalent of setting the v1alpha1 VM metadata transport to "OvfEnv". 
     This bootstrap provider may not be used in conjunction with the CloudInit bootstrap provider.

    Attributes
    ----------
    properties : [VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0], default is Undefined, optional
        Properties is a list of vApp/OVF property key/value pairs. 
         Please note this field and RawProperties are mutually exclusive.
    rawProperties : str, default is Undefined, optional
        RawProperties is the name of a Secret resource in the same Namespace as this VM where each key/value pair from the Secret is used as a vApp key/value pair. 
         Please note this field and Properties are mutually exclusive.
    """


    properties?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0]

    rawProperties?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0:
    """
    KeyValueOrSecretKeySelectorPair is useful when wanting to realize a map as a list of key/value pairs where each value could also referenced data stored in a Secret resource.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key part of the key/value pair.
    value : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0Value, default is Undefined, optional
        value
    """


    key: str

    value?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0Value


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0Value:
    """
    Value is the optional value part of the key/value pair.

    Attributes
    ----------
    from : VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0ValueFrom, default is Undefined, optional
        from
    value : str, default is Undefined, optional
        Value is used to directly specify a value. 
         Please note this field is mutually exclusive with the From field.
    """


    from?: VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0ValueFrom

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecBootstrapVAppConfigPropertiesItems0ValueFrom:
    """
    From is specified to reference a value from a Secret resource. 
     Please note this field is mutually exclusive with the Value field.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecNetwork:
    """
    Network describes the desired network configuration for the VM. 
     Please note this value may be omitted entirely and the VM will be assigned a single, virtual network interface that is connected to the Namespace's default network.

    Attributes
    ----------
    addresses : [str], default is Undefined, optional
        Addresses is an optional list of IP4 or IP6 addresses to assign to the VM. 
         Please note this field is only supported if the connected network supports manual IP allocation. 
         Please note IP4 and IP6 addresses must include the network prefix length, ex. 192.168.0.10/24 or 2001:db8:101::a/64. 
         Please note this field may not contain IP4 addresses if DHCP4 is set to true or IP6 addresses if DHCP6 is set to true. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    deviceName : str, default is Undefined, optional
        DeviceName describes the unique name of this network interface, used to distinguish it from other network interfaces attached to this VM. 
         This value is also used to rename the device inside the guest when the bootstrap provider is CloudInit. Please note it is up to the user to ensure the provided device name does not conflict with any other devices inside the guest, ex. dvd, cdrom, sda, etc. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list. 
         If the Interfaces field is empty and this field is not specified, then the default interface's name will be eth0.
    dhcp4 : bool, default is Undefined, optional
        DHCP4 indicates whether or not to use DHCP for IP4 networking. 
         Please note this field is only supported if the network connection supports DHCP. 
         Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway4 field. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    dhcp6 : bool, default is Undefined, optional
        DHCP6 indicates whether or not to use DHCP for IP6 networking. 
         Please note this field is only supported if the network connection supports DHCP. 
         Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway6 field. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    disabled : bool, default is Undefined, optional
        Disabled is a flag that indicates whether or not to disable networking for this VM. 
         When set to true, the VM is not configured with a default interface nor any specified from the Interfaces field.
    gateway4 : str, default is Undefined, optional
        Gateway4 is the default, IP4 gateway for this VM. 
         Please note this field is only supported if the network connection supports manual IP allocation. 
         If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. 
         Please note the IP address must include the network prefix length, ex. 192.168.0.1/24. 
         Please note this field is mutually exclusive with DHCP4. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    gateway6 : str, default is Undefined, optional
        Gateway6 is the primary IP6 gateway for this VM. 
         Please note this field is only supported if the network connection supports manual IP allocation. 
         If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. 
         Please note the IP address must include the network prefix length, ex. 2001:db8:101::1/64. 
         Please note this field is mutually exclusive with DHCP6. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    hostName : str, default is Undefined, optional
        HostName is the value the guest uses as its host name. If omitted then the name of the VM will be used. 
         Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep).
    interfaces : [VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0], default is Undefined, optional
        Interfaces is the list of network interfaces used by this VM. 
         Please note this field is mutually exclusive with the following fields: DeviceName, Network, Addresses, DHCP4, DHCP6, Gateway4, Gateway6, MTU, Nameservers, Routes, and SearchDomains.
    mtu : int, default is Undefined, optional
        MTU is the Maximum Transmission Unit size in bytes. 
         Please note this feature is available only with the following bootstrap providers: CloudInit. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    nameservers : [str], default is Undefined, optional
        Nameservers is a list of IP4 and/or IP6 addresses used as DNS nameservers. 
         Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). 
         Please note that Linux allows only three nameservers (https://linux.die.net/man/5/resolv.conf). 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    network : VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkNetwork, default is Undefined, optional
        network
    routes : [VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkRoutesItems0], default is Undefined, optional
        Routes is a list of optional, static routes. 
         Please note this feature is available only with the following bootstrap providers: CloudInit. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    searchDomains : [str], default is Undefined, optional
        SearchDomains is a list of search domains used when resolving IP addresses with DNS. 
         Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    """


    addresses?: [str]

    deviceName?: str

    dhcp4?: bool

    dhcp6?: bool

    disabled?: bool

    gateway4?: str

    gateway6?: str

    hostName?: str

    interfaces?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0]

    mtu?: int

    nameservers?: [str]

    network?: VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkNetwork

    routes?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkRoutesItems0]

    searchDomains?: [str]


    check:
        regex.match(str(deviceName), r"^\w\w+$") if deviceName


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0:
    """
    VirtualMachineNetworkInterfaceSpec describes the desired state of a VM's network interface.

    Attributes
    ----------
    addresses : [str], default is Undefined, optional
        Addresses is an optional list of IP4 or IP6 addresses to assign to this interface. 
         Please note this field is only supported if the connected network supports manual IP allocation. 
         Please note IP4 and IP6 addresses must include the network prefix length, ex. 192.168.0.10/24 or 2001:db8:101::a/64. 
         Please note this field may not contain IP4 addresses if DHCP4 is set to true or IP6 addresses if DHCP6 is set to true. 
         Please note if the Interfaces field is non-empty then this field is ignored and should be specified on the elements in the Interfaces list.
    dhcp4 : bool, default is Undefined, optional
        DHCP4 indicates whether or not this interface uses DHCP for IP4 networking. 
         Please note this field is only supported if the network connection supports DHCP. 
         Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway4 field.
    dhcp6 : bool, default is Undefined, optional
        DHCP6 indicates whether or not this interface uses DHCP for IP6 networking. 
         Please note this field is only supported if the network connection supports DHCP. 
         Please note this field is mutually exclusive with IP4 addresses in the Addresses field and the Gateway6 field.
    gateway4 : str, default is Undefined, optional
        Gateway4 is the default, IP4 gateway for this interface. 
         Please note this field is only supported if the network connection supports manual IP allocation. 
         If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. 
         Please note the IP address must include the network prefix length, ex. 192.168.0.1/24. 
         Please note this field is mutually exclusive with DHCP4.
    gateway6 : str, default is Undefined, optional
        Gateway6 is the primary IP6 gateway for this interface. 
         Please note this field is only supported if the network connection supports manual IP allocation. 
         If the network connection supports manual IP allocation and the Addresses field includes at least one IP4 address, then this field is required. 
         Please note the IP address must include the network prefix length, ex. 2001:db8:101::1/64. 
         Please note this field is mutually exclusive with DHCP6.
    mtu : int, default is Undefined, optional
        MTU is the Maximum Transmission Unit size in bytes. 
         Please note this feature is available only with the following bootstrap providers: CloudInit.
    name : str, default is Undefined, required
        Name describes the unique name of this network interface, used to distinguish it from other network interfaces attached to this VM. 
         This value is also used to rename the device inside the guest when the bootstrap provider is CloudInit. Please note it is up to the user to ensure the provided device name does not conflict with any other devices inside the guest, ex. dvd, cdrom, sda, etc.
    nameservers : [str], default is Undefined, optional
        Nameservers is a list of IP4 and/or IP6 addresses used as DNS nameservers. 
         Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep). 
         Please note that Linux allows only three nameservers (https://linux.die.net/man/5/resolv.conf).
    network : VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0Network, default is Undefined, optional
        network
    routes : [VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0RoutesItems0], default is Undefined, optional
        Routes is a list of optional, static routes. 
         Please note this feature is available only with the following bootstrap providers: CloudInit.
    searchDomains : [str], default is Undefined, optional
        SearchDomains is a list of search domains used when resolving IP addresses with DNS. 
         Please note this feature is available only with the following bootstrap providers: CloudInit, LinuxPrep, and Sysprep (except for RawSysprep).
    """


    addresses?: [str]

    dhcp4?: bool

    dhcp6?: bool

    gateway4?: str

    gateway6?: str

    mtu?: int

    name: str

    nameservers?: [str]

    network?: VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0Network

    routes?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0RoutesItems0]

    searchDomains?: [str]


    check:
        regex.match(str(name), r"^\w\w+$")


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0Network:
    """
    Network is the name of the network resource to which this interface is connected. 
     If no network is provided, then this interface will be connected to the Namespace's default network.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, optional
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, required
        Name refers to a unique resource in the current namespace. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion?: str

    kind?: str

    name: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkInterfacesItems0RoutesItems0:
    """
    VirtualMachineNetworkRouteSpec defines a static route for a guest.

    Attributes
    ----------
    metric : int, default is Undefined, required
        Metric is the weight/priority of the route.
    to : str, default is Undefined, required
        To is an IP4 address.
    via : str, default is Undefined, required
        Via is an IP4 address.
    """


    metric: int

    to: str

    via: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkNetwork:
    """
    Network is the optional name of the network resource to which this VM is connected. 
     Please note if the Interfaces field is non-empty then this field is ignored. 
     If networking is not disabled, no interfaces are defined, and this value is omitted, then the VM will be provided a single virtual network interface and connected to the Namespace's default network.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, optional
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, required
        Name refers to a unique resource in the current namespace. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion?: str

    kind?: str

    name: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecNetworkRoutesItems0:
    """
    VirtualMachineNetworkRouteSpec defines a static route for a guest.

    Attributes
    ----------
    metric : int, default is Undefined, required
        Metric is the weight/priority of the route.
    to : str, default is Undefined, required
        To is an IP4 address.
    via : str, default is Undefined, required
        Via is an IP4 address.
    """


    metric: int

    to: str

    via: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessGatesItems0:
    """
    VirtualMachineReadinessGate contains the reference to a VM condition.

    Attributes
    ----------
    conditionType : str, default is Undefined, required
        ConditionType refers to a condition in the VM's condition list with matching type.
    """


    conditionType: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbe:
    """
    ReadinessProbe describes a probe used to determine the VM's ready state.

    Attributes
    ----------
    guestHeartbeat : VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeGuestHeartbeat, default is Undefined, optional
        guest heartbeat
    guestInfo : [VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeGuestInfoItems0], default is Undefined, optional
        GuestInfo specifies an action involving key/value pairs from GuestInfo. 
         The elements are evaluated with the logical AND operator, meaning all expressions must evaluate as true for the probe to succeed. 
         For example, a VM resource's probe definition could be specified as the following: 
         guestInfo: - key:   ready value: true 
         With the above configuration in place, the VM would not be considered ready until the GuestInfo key "ready" was set to the value "true". 
         From within the guest operating system it is possible to set GuestInfo key/value pairs using the program "vmware-rpctool," which is included with VM Tools. For example, the following command will set the key "guestinfo.ready" to the value "true": 
         vmware-rpctool "info-set guestinfo.ready true" 
         Once executed, the VM's readiness probe will be signaled and the VM resource will be marked as ready.
    periodSeconds : int, default is Undefined, optional
        PeriodSeconds specifics how often (in seconds) to perform the probe. Defaults to 10 seconds. Minimum value is 1.
    tcpSocket : VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeTCPSocket, default is Undefined, optional
        tcp socket
    timeoutSeconds : int, default is Undefined, optional
        TimeoutSeconds specifies a number of seconds after which the probe times out. Defaults to 10 seconds. Minimum value is 1.
    """


    guestHeartbeat?: VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeGuestHeartbeat

    guestInfo?: [VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeGuestInfoItems0]

    periodSeconds?: int

    tcpSocket?: VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeTCPSocket

    timeoutSeconds?: int


    check:
        periodSeconds >= 1
        timeoutSeconds <= 60
        timeoutSeconds >= 1


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeGuestHeartbeat:
    """
    GuestHeartbeat specifies an action involving the guest heartbeat status.

    Attributes
    ----------
    thresholdStatus : str, default is "green", optional
        ThresholdStatus is the value that the guest heartbeat status must be at or above to be considered successful.
    """


    thresholdStatus?: "yellow" | "green" = "green"


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeGuestInfoItems0:
    """
    GuestInfoAction describes a key from GuestInfo that must match the associated value expression.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the name of the GuestInfo key. 
         Values are automatically prefixed with "guestinfo." before being evaluated. Thus if the key "guestinfo.mykey" is provided, it will be evaluated as "guestinfo.guestinfo.mykey".
    value : str, default is Undefined, optional
        Value is a regular expression that is matched against the value of the specified key. 
         An empty value is the equivalent of "match any" or ".*". 
         All values must adhere to the RE2 regular expression syntax as documented at https://golang.org/s/re2syntax. Invalid values may be rejected or ignored depending on the implementation of this API. Either way, invalid values will not be considered when evaluating the ready state of a VM.
    """


    key: str

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecReadinessProbeTCPSocket:
    """
    TCPSocket specifies an action involving a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host is an optional host name to connect to. Host defaults to the VM IP.
    port : int | str, default is Undefined, required
        Port specifies a number or name of the port to access on the VM. If the format of port is a number, it must be in the range 1 to 65535. If the format of name is a string, it must be an IANA_SVC_NAME.
    """


    host?: str

    port: int | str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecReserved:
    """
    Reserved describes a set of VM configuration options reserved for system use. 
     Please note attempts to modify the value of this field by a DevOps user will result in a validation error.

    Attributes
    ----------
    resourcePolicyName : str, default is Undefined, optional
        ResourcePolicyName describes the name of a VirtualMachineSetResourcePolicy resource used to configure the VM's resource policy.
    """


    resourcePolicyName?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0:
    """
    VirtualMachineVolume represents a named volume in a VM.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name represents the volume's name. Must be a DNS_LABEL and unique within the VM.
    persistentVolumeClaim : VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0PersistentVolumeClaim, default is Undefined, optional
        persistent volume claim
    """


    name: str

    persistentVolumeClaim?: VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0PersistentVolumeClaim


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0PersistentVolumeClaim:
    """
    PersistentVolumeClaim represents a reference to a PersistentVolumeClaim in the same namespace. 
     More information is available at https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims.

    Attributes
    ----------
    claimName : str, default is Undefined, required
        claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    instanceVolumeClaim : VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0PersistentVolumeClaimInstanceVolumeClaim, default is Undefined, optional
        instance volume claim
    readOnly : bool, default is Undefined, optional
        readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    """


    claimName: str

    instanceVolumeClaim?: VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0PersistentVolumeClaimInstanceVolumeClaim

    readOnly?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineSpecVolumesItems0PersistentVolumeClaimInstanceVolumeClaim:
    """
    InstanceVolumeClaim is set if the PVC is backed by instance storage.

    Attributes
    ----------
    size : int | str, default is Undefined, required
        Size is the size of the requested instance storage volume.
    storageClass : str, default is Undefined, required
        StorageClass is the name of the Kubernetes StorageClass that provides the backing storage for this instance storage volume.
    """


    size: int | str

    storageClass: str


    check:
        regex.match(str(size), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$")


schema VmoperatorVmwareComV1alpha2VirtualMachineStatus:
    """
    VirtualMachineStatus defines the observed state of a VirtualMachine instance.

    Attributes
    ----------
    biosUUID : str, default is Undefined, optional
        BiosUUID describes a unique identifier provided by the underlying infrastructure provider that is exposed to the Guest OS BIOS as a unique hardware identifier.
    changeBlockTracking : bool, default is Undefined, optional
        ChangeBlockTracking describes the CBT enablement status on the VM.
    class : VmoperatorVmwareComV1alpha2VirtualMachineStatusClass, default is Undefined, optional
        class
    conditions : [VmoperatorVmwareComV1alpha2VirtualMachineStatusConditionsItems0], default is Undefined, optional
        Conditions describes the observed conditions of the VirtualMachine.
    host : str, default is Undefined, optional
        Host describes the hostname or IP address of the infrastructure host where the VM is executed.
    image : VmoperatorVmwareComV1alpha2VirtualMachineStatusImage, default is Undefined, optional
        image
    instanceUUID : str, default is Undefined, optional
        InstanceUUID describes the unique instance UUID provided by the underlying infrastructure provider, such as vSphere.
    lastRestartTime : str, default is Undefined, optional
        LastRestartTime describes the last time the VM was restarted.
    network : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetwork, default is Undefined, optional
        network
    powerState : str, default is Undefined, optional
        PowerState describes the observed power state of the VirtualMachine.
    uniqueID : str, default is Undefined, optional
        UniqueID describes a unique identifier that is provided by the underlying infrastructure provider, such as vSphere.
    volumes : [VmoperatorVmwareComV1alpha2VirtualMachineStatusVolumesItems0], default is Undefined, optional
        Volumes describes a list of current status information for each Volume that is desired to be attached to the VM.
    zone : str, default is Undefined, optional
        Zone describes the availability zone where the VirtualMachine has been scheduled. 
         Please note this field may be empty when the cluster is not zone-aware.
    """


    biosUUID?: str

    changeBlockTracking?: bool

    class?: VmoperatorVmwareComV1alpha2VirtualMachineStatusClass

    conditions?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusConditionsItems0]

    host?: str

    image?: VmoperatorVmwareComV1alpha2VirtualMachineStatusImage

    instanceUUID?: str

    lastRestartTime?: str

    network?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetwork

    powerState?: "PoweredOff" | "PoweredOn" | "Suspended"

    uniqueID?: str

    volumes?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusVolumesItems0]

    zone?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusClass:
    """
    Class is a reference to the VirtualMachineClass resource used to deploy this VM.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion defines the versioned schema of this representation of an object. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, required
        Name refers to a unique resource in the current namespace. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion: str

    kind: str

    name: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusImage:
    """
    Image is a reference to the VirtualMachineImage resource used to deploy this VM.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion defines the versioned schema of this representation of an object. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, required
        Name refers to a unique resource in the current namespace. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion: str

    kind: str

    name: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetwork:
    """
    Network describes the observed state of the VM's network configuration. Please note much of the network status information is only available if the guest has VM Tools installed.

    Attributes
    ----------
    dhcp : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcp, default is Undefined, optional
        dhcp
    dns : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDNS, default is Undefined, optional
        dns
    interfaces : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0], default is Undefined, optional
        Interfaces describes the status of the VM's network interfaces.
    ipRoutes : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkIPRoutesItems0], default is Undefined, optional
        IPRoutes contain the VM's routing tables for all address families.
    kernelConfig : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkKernelConfigItems0], default is Undefined, optional
        KernelConfig describes the observed state of the VM's kernel IP configuration settings. 
         The key part contains a unique number while the value part contains the 'key=value' as provided by the underlying provider. For example, on Linux and/or BSD, the systcl -a output would be reported as: key='5', value='net.ipv4.tcp_keepalive_time = 7200'.
    primaryIP4 : str, default is Undefined, optional
        PrimaryIP4 describes the VM's primary IP4 address. 
         If the bootstrap provider is CloudInit then this value is set to the value of the VM's "guestinfo.local-ipv4" property. Please see https://bit.ly/3NJB534 for more information on how this value is calculated. 
         If the bootstrap provider is anything else then this field is set to the value of the infrastructure VM's "guest.ipAddress" field. Please see https://bit.ly/3Au0jM4 for more information.
    primaryIP6 : str, default is Undefined, optional
        PrimaryIP6 describes the VM's primary IP6 address. 
         If the bootstrap provider is CloudInit then this value is set to the value of the VM's "guestinfo.local-ipv6" property. Please see https://bit.ly/3NJB534 for more information on how this value is calculated. 
         If the bootstrap provider is anything else then this field is set to the value of the infrastructure VM's "guest.ipAddress" field. Please see https://bit.ly/3Au0jM4 for more information.
    """


    dhcp?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcp

    dns?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDNS

    interfaces?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0]

    ipRoutes?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkIPRoutesItems0]

    kernelConfig?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkKernelConfigItems0]

    primaryIP4?: str

    primaryIP6?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDNS:
    """
    DNS describes the VM's observed, client-side DNS configuration.

    Attributes
    ----------
    dhcp : bool, default is Undefined, optional
        DHCP indicates whether or not dynamic host control protocol (DHCP) was used to configure DNS configuration.
    domainName : str, default is Undefined, optional
        DomainName is the domain name portion of the DNS name. For example, the "domain.local" part of "my-vm.domain.local".
    hostName : str, default is Undefined, optional
        HostName is the host name portion of the DNS name. For example, the "my-vm" part of "my-vm.domain.local".
    nameservers : [str], default is Undefined, optional
        Nameservers is a list of the IP addresses for the DNS servers to use. 
         IP4 addresses are specified using dotted decimal notation. For example, "192.0.2.1". 
         IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.
    searchDomains : [str], default is Undefined, optional
        SearchDomains is a list of domains in which to search for hosts, in the order of preference.
    """


    dhcp?: bool

    domainName?: str

    hostName?: str

    nameservers?: [str]

    searchDomains?: [str]


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcp:
    """
    DHCP describes the VM's observed, client-side, system-wide DHCP options.

    Attributes
    ----------
    ip4 : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp4, default is Undefined, optional
        ip4
    ip6 : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp6, default is Undefined, optional
        ip6
    """


    ip4?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp4

    ip6?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp6


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp4:
    """
    IP4 describes the observed state of the IP4 DHCP client settings.

    Attributes
    ----------
    config : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp4ConfigItems0], default is Undefined, optional
        Config describes platform-dependent settings for the DHCP client. 
         The key part is a unique number while the value part is the platform specific configuration command. For example on Linux and BSD systems using the file dhclient.conf output would be reported at system scope: key='1', value='timeout 60;' key='2', value='reboot 10;'. The output reported per interface would be: key='1', value='prepend domain-name-servers 192.0.2.1;' key='2', value='require subnet-mask, domain-name-servers;'.
    enabled : bool, default is Undefined, optional
        Enabled reports the status of the DHCP client services.
    """


    config?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp4ConfigItems0]

    enabled?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp4ConfigItems0:
    """
    KeyValuePair is useful when wanting to realize a map as a list of key/value pairs.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key part of the key/value pair.
    value : str, default is Undefined, optional
        Value is the optional value part of the key/value pair.
    """


    key: str

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp6:
    """
    IP6 describes the observed state of the IP6 DHCP client settings.

    Attributes
    ----------
    config : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp6ConfigItems0], default is Undefined, optional
        Config describes platform-dependent settings for the DHCP client. 
         The key part is a unique number while the value part is the platform specific configuration command. For example on Linux and BSD systems using the file dhclient.conf output would be reported at system scope: key='1', value='timeout 60;' key='2', value='reboot 10;'. The output reported per interface would be: key='1', value='prepend domain-name-servers 192.0.2.1;' key='2', value='require subnet-mask, domain-name-servers;'.
    enabled : bool, default is Undefined, optional
        Enabled reports the status of the DHCP client services.
    """


    config?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp6ConfigItems0]

    enabled?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkDhcpIp6ConfigItems0:
    """
    KeyValuePair is useful when wanting to realize a map as a list of key/value pairs.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key part of the key/value pair.
    value : str, default is Undefined, optional
        Value is the optional value part of the key/value pair.
    """


    key: str

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkIPRoutesItems0:
    """
    VirtualMachineNetworkIPRouteStatus describes the observed state of a guest network's IP routes.

    Attributes
    ----------
    gateway : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkIPRoutesItems0Gateway, default is Undefined, required
        gateway
    networkAddress : str, default is Undefined, required
        NetworkAddress is the IP4 or IP6 address of the destination network. 
         Addresses include the network's prefix length, ex. 192.168.0.0/24 or 2001:DB8:101::230:6eff:fe04:d9ff::/64. 
         IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.
    """


    gateway: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkIPRoutesItems0Gateway

    networkAddress: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkIPRoutesItems0Gateway:
    """
    Gateway describes where to send the packets to next.

    Attributes
    ----------
    address : str, default is Undefined, optional
        Address is the IP4 or IP6 address of the gateway.
    device : str, default is Undefined, optional
        Device is the name of the device in the guest for which this gateway applies.
    """


    address?: str

    device?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0:
    """
    VirtualMachineNetworkInterfaceStatus describes the observed state of a VM's network interface.

    Attributes
    ----------
    dns : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0DNS, default is Undefined, optional
        dns
    ip : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IP, default is Undefined, optional
        ip
    name : str, default is Undefined, required
        Name describes the unique name of this network interface, used to distinguish it from other network interfaces attached to this VM. 
         Please note this name is not related to the name of the device as it is surfaced inside of the guest.
    """


    dns?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0DNS

    ip?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IP

    name: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0DNS:
    """
    DNS describes the observed state of the interface's DNS configuration.

    Attributes
    ----------
    dhcp : bool, default is Undefined, optional
        DHCP indicates whether or not dynamic host control protocol (DHCP) was used to configure DNS configuration.
    domainName : str, default is Undefined, optional
        DomainName is the domain name portion of the DNS name. For example, the "domain.local" part of "my-vm.domain.local".
    hostName : str, default is Undefined, optional
        HostName is the host name portion of the DNS name. For example, the "my-vm" part of "my-vm.domain.local".
    nameservers : [str], default is Undefined, optional
        Nameservers is a list of the IP addresses for the DNS servers to use. 
         IP4 addresses are specified using dotted decimal notation. For example, "192.0.2.1". 
         IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.
    searchDomains : [str], default is Undefined, optional
        SearchDomains is a list of domains in which to search for hosts, in the order of preference.
    """


    dhcp?: bool

    domainName?: str

    hostName?: str

    nameservers?: [str]

    searchDomains?: [str]


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IP:
    """
    IP describes the observed state of the interface's IP configuration.

    Attributes
    ----------
    addresses : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPAddressesItems0], default is Undefined, optional
        Addresses describes observed IP addresses for this interface.
    autoConfigurationEnabled : bool, default is Undefined, optional
        AutoConfigurationEnabled describes whether or not ICMPv6 router solicitation requests are enabled or disabled from a given interface. 
         These requests acquire an IP6 address and default gateway route from zero-to-many routers on the connected network. 
         If not set then ICMPv6 is not available on this VM.
    dhcp : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcp, default is Undefined, optional
        dhcp
    macAddr : str, default is Undefined, optional
        MACAddr describes the observed MAC address for this interface.
    """


    addresses?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPAddressesItems0]

    autoConfigurationEnabled?: bool

    dhcp?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcp

    macAddr?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPAddressesItems0:
    """
    VirtualMachineNetworkInterfaceIPAddrStatus describes information about a specific IP address.

    Attributes
    ----------
    address : str, default is Undefined, required
        Address is an IP4 or IP6 address and their network prefix length. 
         An IP4 address is specified using dotted decimal notation. For example, "192.0.2.1". 
         IP6 addresses are 128-bit addresses represented as eight fields of up to four hexadecimal digits. A colon separates each field (:). For example, 2001:DB8:101::230:6eff:fe04:d9ff. The address can also consist of the symbol '::' to represent multiple 16-bit groups of contiguous 0's only once in an address as described in RFC 2373.
    lifetime : str, default is Undefined, optional
        Lifetime describes when this address will expire.
    origin : str, default is Undefined, optional
        Origin describes how this address was configured.
    state : str, default is Undefined, optional
        State describes the state of this IP address.
    """


    address: str

    lifetime?: str

    origin?: "dhcp" | "linklayer" | "manual" | "other" | "random"

    state?: "deprecated" | "duplicate" | "inaccessible" | "invalid" | "preferred" | "tentative" | "unknown"


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcp:
    """
    DHCP describes the VM's observed, client-side, interface-specific DHCP options.

    Attributes
    ----------
    ip4 : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp4, default is Undefined, optional
        ip4
    ip6 : VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp6, default is Undefined, optional
        ip6
    """


    ip4?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp4

    ip6?: VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp6


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp4:
    """
    IP4 describes the observed state of the IP4 DHCP client settings.

    Attributes
    ----------
    config : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp4ConfigItems0], default is Undefined, optional
        Config describes platform-dependent settings for the DHCP client. 
         The key part is a unique number while the value part is the platform specific configuration command. For example on Linux and BSD systems using the file dhclient.conf output would be reported at system scope: key='1', value='timeout 60;' key='2', value='reboot 10;'. The output reported per interface would be: key='1', value='prepend domain-name-servers 192.0.2.1;' key='2', value='require subnet-mask, domain-name-servers;'.
    enabled : bool, default is Undefined, optional
        Enabled reports the status of the DHCP client services.
    """


    config?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp4ConfigItems0]

    enabled?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp4ConfigItems0:
    """
    KeyValuePair is useful when wanting to realize a map as a list of key/value pairs.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key part of the key/value pair.
    value : str, default is Undefined, optional
        Value is the optional value part of the key/value pair.
    """


    key: str

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp6:
    """
    IP6 describes the observed state of the IP6 DHCP client settings.

    Attributes
    ----------
    config : [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp6ConfigItems0], default is Undefined, optional
        Config describes platform-dependent settings for the DHCP client. 
         The key part is a unique number while the value part is the platform specific configuration command. For example on Linux and BSD systems using the file dhclient.conf output would be reported at system scope: key='1', value='timeout 60;' key='2', value='reboot 10;'. The output reported per interface would be: key='1', value='prepend domain-name-servers 192.0.2.1;' key='2', value='require subnet-mask, domain-name-servers;'.
    enabled : bool, default is Undefined, optional
        Enabled reports the status of the DHCP client services.
    """


    config?: [VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp6ConfigItems0]

    enabled?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkInterfacesItems0IPDhcpIp6ConfigItems0:
    """
    KeyValuePair is useful when wanting to realize a map as a list of key/value pairs.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key part of the key/value pair.
    value : str, default is Undefined, optional
        Value is the optional value part of the key/value pair.
    """


    key: str

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusNetworkKernelConfigItems0:
    """
    KeyValuePair is useful when wanting to realize a map as a list of key/value pairs.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key part of the key/value pair.
    value : str, default is Undefined, optional
        Value is the optional value part of the key/value pair.
    """


    key: str

    value?: str


schema VmoperatorVmwareComV1alpha2VirtualMachineStatusVolumesItems0:
    """
    VirtualMachineVolumeStatus defines the observed state of a VirtualMachineVolume instance.

    Attributes
    ----------
    attached : bool, default is Undefined, optional
        Attached represents whether a volume has been successfully attached to the VirtualMachine or not.
    diskUUID : str, default is Undefined, optional
        DiskUUID represents the underlying virtual disk UUID and is present when attachment succeeds.
    error : str, default is Undefined, optional
        Error represents the last error seen when attaching or detaching a volume.  Error will be empty if attachment succeeds.
    name : str, default is Undefined, required
        Name is the name of the attached volume.
    """


    attached?: bool

    diskUUID?: str

    error?: str

    name: str


