"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema ClusterVirtualMachineImage:
    """
    ClusterVirtualMachineImage is the schema for the clustervirtualmachineimages API.

    Attributes
    ----------
    apiVersion : str, default is "vmoperator.vmware.com/v1alpha2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ClusterVirtualMachineImage", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageSpec, default is Undefined, optional
        spec
    status : VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatus, default is Undefined, optional
        status
    """


    apiVersion: "vmoperator.vmware.com/v1alpha2" = "vmoperator.vmware.com/v1alpha2"

    kind: "ClusterVirtualMachineImage" = "ClusterVirtualMachineImage"

    metadata?: v1.ObjectMeta

    spec?: VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageSpec

    status?: VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatus


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageSpec:
    """
    VirtualMachineImageSpec defines the desired state of VirtualMachineImage.

    Attributes
    ----------
    providerRef : VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageSpecProviderRef, default is Undefined, optional
        provider ref
    """


    providerRef?: VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageSpecProviderRef


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageSpecProviderRef:
    """
    ProviderRef is a reference to the resource that contains the source of this image's information.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion defines the versioned schema of this representation of an object. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, required
        Name refers to a unique resource in the current namespace. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion: str

    kind: str

    name: str


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatus:
    """
    VirtualMachineImageStatus defines the observed state of VirtualMachineImage.

    Attributes
    ----------
    capabilities : [str], default is Undefined, optional
        Capabilities describes the image's observed capabilities. 
         The capabilities are discerned when VM Operator reconciles an image. If the source of an image is an OVF in Content Library, then the capabilities are parsed from the OVF property capabilities.image.vmoperator.vmware.com as a comma-separated list of values. Well-known capabilities include: 
         * cloud-init * nvidia-gpu * sriov-net 
         Every capability is also added to the resource's labels as VirtualMachineImageCapabilityLabel + Value. For example, if the capability is "cloud-init" then the following label will be added to the resource: capability.image.vmoperator.vmware.com/cloud-init.
    conditions : [VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusConditionsItems0], default is Undefined, optional
        Conditions describes the observed conditions for this image.
    firmware : str, default is Undefined, optional
        Firmware describe the firmware type used by this image, ex. BIOS, EFI.
    hardwareVersion : int, default is Undefined, optional
        HardwareVersion describes the observed hardware version of this image.
    name : str, default is Undefined, optional
        Name describes the observed, "friendly" name for this image.
    osInfo : VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusOsInfo, default is Undefined, optional
        os info
    ovfProperties : [VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusOvfPropertiesItems0], default is Undefined, optional
        OVFProperties describes the observed OVF properties defined for this image.
    productInfo : VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusProductInfo, default is Undefined, optional
        product info
    providerContentVersion : str, default is Undefined, optional
        ProviderContentVersion describes the content version from the provider item that this image corresponds to. If the provider of this image is a Content Library, this will be the version of the corresponding Content Library item.
    """


    capabilities?: [str]

    conditions?: [VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusConditionsItems0]

    firmware?: str

    hardwareVersion?: int

    name?: str

    osInfo?: VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusOsInfo

    ovfProperties?: [VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusOvfPropertiesItems0]

    productInfo?: VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusProductInfo

    providerContentVersion?: str


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusOsInfo:
    """
    OSInfo describes the observed operating system information for this image. 
     The OS information is also added to the image resource's labels. Please refer to VirtualMachineImageOSInfo for more information.

    Attributes
    ----------
    id : str, default is Undefined, optional
        ID describes the operating system ID. 
         This value is also added to the image resource's labels as VirtualMachineImageOSIDLabel.
    $type : str, default is Undefined, optional
        Type describes the operating system type. 
         This value is also added to the image resource's labels as VirtualMachineImageOSTypeLabel.
    version : str, default is Undefined, optional
        Version describes the operating system version. 
         This value is also added to the image resource's labels as VirtualMachineImageOSVersionLabel.
    """


    id?: str

    $type?: str

    version?: str


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusOvfPropertiesItems0:
    """
    OVFProperty describes an OVF property associated with an image. OVF properties may be used in conjunction with the vAppConfig bootstrap provider to customize a VM during its creation.

    Attributes
    ----------
    default : str, default is Undefined, optional
        Default describes the OVF property's default value.
    key : str, default is Undefined, required
        Key describes the OVF property's key.
    $type : str, default is Undefined, required
        Type describes the OVF property's type.
    """


    default?: str

    key: str

    $type: str


schema VmoperatorVmwareComV1alpha2ClusterVirtualMachineImageStatusProductInfo:
    """
    ProductInfo describes the observed product information for this image.

    Attributes
    ----------
    fullVersion : str, default is Undefined, optional
        FullVersion describes the long-form version of the image.
    product : str, default is Undefined, optional
        Product is a general descriptor for the image.
    vendor : str, default is Undefined, optional
        Vendor describes the organization/user that produced the image.
    version : str, default is Undefined, optional
        Version describes the short-form version of the image.
    """


    fullVersion?: str

    product?: str

    vendor?: str

    version?: str


