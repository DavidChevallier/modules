"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema VirtualMachineClass:
    """
    VirtualMachineClass is the schema for the virtualmachineclasses API and represents the desired state and observed status of a virtualmachineclasses resource.

    Attributes
    ----------
    apiVersion : str, default is "vmoperator.vmware.com/v1alpha2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VirtualMachineClass", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : VmoperatorVmwareComV1alpha2VirtualMachineClassSpec, default is Undefined, optional
        spec
    status : VmoperatorVmwareComV1alpha2VirtualMachineClassStatus, default is Undefined, optional
        status
    """


    apiVersion: "vmoperator.vmware.com/v1alpha2" = "vmoperator.vmware.com/v1alpha2"

    kind: "VirtualMachineClass" = "VirtualMachineClass"

    metadata?: v1.ObjectMeta

    spec?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpec

    status?: VmoperatorVmwareComV1alpha2VirtualMachineClassStatus


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpec:
    """
    VirtualMachineClassSpec defines the desired state of VirtualMachineClass.

    Attributes
    ----------
    configSpec : any, default is Undefined, optional
        ConfigSpec describes additional configuration information for a VirtualMachine. The contents of this field are the VirtualMachineConfigSpec data object (https://bit.ly/3HDtiRu) marshaled to JSON using the discriminator field "_typeName" to preserve type information.
    controllerName : str, default is Undefined, optional
        ControllerName describes the name of the controller responsible for reconciling VirtualMachine resources that are realized from this VirtualMachineClass. 
         When omitted, controllers reconciling VirtualMachine resources determine the default controller name from the environment variable DEFAULT_VM_CLASS_CONTROLLER_NAME. If this environment variable is not defined or empty, it defaults to vmoperator.vmware.com/vsphere. 
         Once a non-empty value is assigned to this field, attempts to set this field to an empty value will be silently ignored.
    description : str, default is Undefined, optional
        Description describes the configuration of the VirtualMachineClass which is not related to virtual hardware or infrastructure policy. This field is used to address remaining specs about this VirtualMachineClass.
    hardware : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardware, default is Undefined, optional
        hardware
    policies : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPolicies, default is Undefined, optional
        policies
    """


    configSpec?: any

    controllerName?: str

    description?: str

    hardware?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardware

    policies?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPolicies


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardware:
    """
    Hardware describes the configuration of the VirtualMachineClass attributes related to virtual hardware. The configuration specified in this field is used to customize the virtual hardware characteristics of any VirtualMachine associated with this VirtualMachineClass.

    Attributes
    ----------
    cpus : int, default is Undefined, optional
        cpus
    devices : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevices, default is Undefined, optional
        devices
    instanceStorage : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareInstanceStorage, default is Undefined, optional
        instance storage
    memory : int | str, default is Undefined, optional
        memory
    """


    cpus?: int

    devices?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevices

    instanceStorage?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareInstanceStorage

    memory?: int | str


    check:
        regex.match(str(memory), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if memory


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevices:
    """
    VirtualDevices contains information about the virtual devices associated with a VirtualMachineClass.

    Attributes
    ----------
    dynamicDirectPathIODevices : [VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevicesDynamicDirectPathIODevicesItems0], default is Undefined, optional
        dynamic direct path i o devices
    vgpuDevices : [VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevicesVgpuDevicesItems0], default is Undefined, optional
        vgpu devices
    """


    dynamicDirectPathIODevices?: [VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevicesDynamicDirectPathIODevicesItems0]

    vgpuDevices?: [VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevicesVgpuDevicesItems0]


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevicesDynamicDirectPathIODevicesItems0:
    """
    DynamicDirectPathIODevice contains the configuration corresponding to a Dynamic DirectPath I/O device.

    Attributes
    ----------
    customLabel : str, default is Undefined, optional
        custom label
    deviceID : int, default is Undefined, required
        device ID
    vendorID : int, default is Undefined, required
        vendor ID
    """


    customLabel?: str

    deviceID: int

    vendorID: int


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareDevicesVgpuDevicesItems0:
    """
    VGPUDevice contains the configuration corresponding to a vGPU device.

    Attributes
    ----------
    profileName : str, default is Undefined, required
        profile name
    """


    profileName: str


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareInstanceStorage:
    """
    InstanceStorage provides information used to configure instance storage volumes for a VirtualMachine.

    Attributes
    ----------
    storageClass : str, default is Undefined, optional
        StorageClass refers to the name of a StorageClass resource used to provide the storage for the configured instance storage volumes. The value of this field has no relationship to or bearing on the field virtualMachine.spec.storageClass. Please note the referred StorageClass must be available in the same namespace as the VirtualMachineClass that uses it for configuring instance storage.
    volumes : [VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareInstanceStorageVolumesItems0], default is Undefined, optional
        Volumes describes instance storage volumes created for a VirtualMachine instance that use this VirtualMachineClass.
    """


    storageClass?: str

    volumes?: [VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareInstanceStorageVolumesItems0]


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecHardwareInstanceStorageVolumesItems0:
    """
    InstanceStorageVolume contains information required to create an instance storage volume on a VirtualMachine.

    Attributes
    ----------
    size : int | str, default is Undefined, required
        size
    """


    size: int | str


    check:
        regex.match(str(size), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$")


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPolicies:
    """
    Policies describes the configuration of the VirtualMachineClass attributes related to virtual infrastructure policy. The configuration specified in this field is used to customize various policies related to infrastructure resource consumption.

    Attributes
    ----------
    resources : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResources, default is Undefined, optional
        resources
    """


    resources?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResources


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResources:
    """
    VirtualMachineClassResources describes the virtual hardware resource reservations and limits configuration to be used by a VirtualMachineClass.

    Attributes
    ----------
    limits : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResourcesLimits, default is Undefined, optional
        limits
    requests : VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResourcesRequests, default is Undefined, optional
        requests
    """


    limits?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResourcesLimits

    requests?: VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResourcesRequests


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResourcesLimits:
    """
    VirtualMachineResourceSpec describes a virtual hardware policy specification.

    Attributes
    ----------
    cpu : int | str, default is Undefined, optional
        cpu
    memory : int | str, default is Undefined, optional
        memory
    """


    cpu?: int | str

    memory?: int | str


    check:
        regex.match(str(cpu), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if cpu
        regex.match(str(memory), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if memory


schema VmoperatorVmwareComV1alpha2VirtualMachineClassSpecPoliciesResourcesRequests:
    """
    VirtualMachineResourceSpec describes a virtual hardware policy specification.

    Attributes
    ----------
    cpu : int | str, default is Undefined, optional
        cpu
    memory : int | str, default is Undefined, optional
        memory
    """


    cpu?: int | str

    memory?: int | str


    check:
        regex.match(str(cpu), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if cpu
        regex.match(str(memory), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if memory


schema VmoperatorVmwareComV1alpha2VirtualMachineClassStatus:
    """
    VirtualMachineClassStatus defines the observed state of VirtualMachineClass.

    Attributes
    ----------
    capabilities : [str], default is Undefined, optional
        Capabilities describes the class's observed capabilities. 
         The capabilities are discerned when VM Operator reconciles a class and inspects its specification. Well-known capabilities include: 
         * instance-storage * nvidia-gpu * sriov-net 
         In addition to "nvidia-gpu", a capability is added for every nVidia profile name associated with the class. 
         Every capability is also added to the resource's labels as VirtualMachineClassCapabilityLabel + Value. For example, if the capability is "nvidia-gpu" then the following label will be added to the resource: capability.class.vmoperator.vmware.com/nvidia-gpu.
    conditions : [VmoperatorVmwareComV1alpha2VirtualMachineClassStatusConditionsItems0], default is Undefined, optional
        Conditions describes the observed conditions of the VirtualMachineClass.
    ready : bool, default is Undefined, optional
        Ready describes whether the class's hardware can be realized in the cluster. 
         This field is only set to true if all of the class resource's conditions have Status=True.
    """


    capabilities?: [str]

    conditions?: [VmoperatorVmwareComV1alpha2VirtualMachineClassStatusConditionsItems0]

    ready?: bool


schema VmoperatorVmwareComV1alpha2VirtualMachineClassStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


