"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Nodegroup:
    """
    Nodegroup is the Schema for the Nodegroups API

    Attributes
    ----------
    apiVersion : str, default is "eks.services.k8s.aws/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Nodegroup", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : EksServicesK8sAwsV1alpha1NodegroupSpec, default is Undefined, optional
        spec
    status : EksServicesK8sAwsV1alpha1NodegroupStatus, default is Undefined, optional
        status
    """


    apiVersion: "eks.services.k8s.aws/v1alpha1" = "eks.services.k8s.aws/v1alpha1"

    kind: "Nodegroup" = "Nodegroup"

    metadata?: v1.ObjectMeta

    spec?: EksServicesK8sAwsV1alpha1NodegroupSpec

    status?: EksServicesK8sAwsV1alpha1NodegroupStatus


schema EksServicesK8sAwsV1alpha1NodegroupSpec:
    """
    NodegroupSpec defines the desired state of Nodegroup. 
     An object representing an Amazon EKS managed node group.

    Attributes
    ----------
    amiType : str, default is Undefined, optional
        The AMI type for your node group. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify amiType, or the node group deployment will fail. If your launch template uses a Windows custom AMI, then add eks:kube-proxy-windows to your Windows nodes rolearn in the aws-auth ConfigMap. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    capacityType : str, default is Undefined, optional
        The capacity type for your node group.
    clientRequestToken : str, default is Undefined, optional
        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    clusterName : str, default is Undefined, optional
        The name of the cluster to create the node group in.
    clusterRef : EksServicesK8sAwsV1alpha1NodegroupSpecClusterRef, default is Undefined, optional
        cluster ref
    diskSize : int, default is Undefined, optional
        The root device disk size (in GiB) for your node group instances. The default disk size is 20 GiB for Linux and Bottlerocket. The default disk size is 50 GiB for Windows. If you specify launchTemplate, then don't specify diskSize, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    instanceTypes : [str], default is Undefined, optional
        Specify the instance types for a node group. If you specify a GPU instance type, make sure to also specify an applicable GPU AMI type with the amiType parameter. If you specify launchTemplate, then you can specify zero or one instance type in your launch template or you can specify 0-20 instance types for instanceTypes. If however, you specify an instance type in your launch template and specify any instanceTypes, the node group deployment will fail. If you don't specify an instance type in a launch template or for instanceTypes, then t3.medium is used, by default. If you specify Spot for capacityType, then we recommend specifying multiple values for instanceTypes. For more information, see Managed node group capacity types (https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html#managed-node-group-capacity-types) and Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    labels : {str:str}, default is Undefined, optional
        The Kubernetes labels to be applied to the nodes in the node group when they are created.
    launchTemplate : EksServicesK8sAwsV1alpha1NodegroupSpecLaunchTemplate, default is Undefined, optional
        launch template
    name : str, default is Undefined, required
        The unique name to give your node group.
    nodeRole : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the IAM role to associate with your node group. The Amazon EKS worker node kubelet daemon makes calls to Amazon Web Services APIs on your behalf. Nodes receive permissions for these API calls through an IAM instance profile and associated policies. Before you can launch nodes and register them into a cluster, you must create an IAM role for those nodes to use when they are launched. For more information, see Amazon EKS node IAM role (https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html) in the Amazon EKS User Guide . If you specify launchTemplate, then don't specify IamInstanceProfile (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_IamInstanceProfile.html) in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    nodeRoleRef : EksServicesK8sAwsV1alpha1NodegroupSpecNodeRoleRef, default is Undefined, optional
        node role ref
    releaseVersion : str, default is Undefined, optional
        The AMI version of the Amazon EKS optimized AMI to use with your node group. By default, the latest available AMI version for the node group's current Kubernetes version is used. For information about Linux versions, see Amazon EKS optimized Amazon Linux AMI versions (https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html) in the Amazon EKS User Guide. Amazon EKS managed node groups support the November 2022 and later releases of the Windows AMIs. For information about Windows versions, see Amazon EKS optimized Windows AMI versions (https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html) in the Amazon EKS User Guide. 
         If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify releaseVersion, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    remoteAccess : EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccess, default is Undefined, optional
        remote access
    scalingConfig : EksServicesK8sAwsV1alpha1NodegroupSpecScalingConfig, default is Undefined, optional
        scaling config
    subnetRefs : [EksServicesK8sAwsV1alpha1NodegroupSpecSubnetRefsItems0], default is Undefined, optional
        subnet refs
    subnets : [str], default is Undefined, optional
        The subnets to use for the Auto Scaling group that is created for your node group. If you specify launchTemplate, then don't specify SubnetId (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html) in your launch template, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    tags : {str:str}, default is Undefined, optional
        The metadata to apply to the node group to assist with categorization and organization. Each tag consists of a key and an optional value. You define both. Node group tags do not propagate to any other resources associated with the node group, such as the Amazon EC2 instances or subnets.
    taints : [EksServicesK8sAwsV1alpha1NodegroupSpecTaintsItems0], default is Undefined, optional
        The Kubernetes taints to be applied to the nodes in the node group. For more information, see Node taints on managed node groups (https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).
    updateConfig : EksServicesK8sAwsV1alpha1NodegroupSpecUpdateConfig, default is Undefined, optional
        update config
    version : str, default is Undefined, optional
        The Kubernetes version to use for your managed nodes. By default, the Kubernetes version of the cluster is used, and this is the only accepted specified value. If you specify launchTemplate, and your launch template uses a custom AMI, then don't specify version, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.
    """


    amiType?: str

    capacityType?: str

    clientRequestToken?: str

    clusterName?: str

    clusterRef?: EksServicesK8sAwsV1alpha1NodegroupSpecClusterRef

    diskSize?: int

    instanceTypes?: [str]

    labels?: {str:str}

    launchTemplate?: EksServicesK8sAwsV1alpha1NodegroupSpecLaunchTemplate

    name: str

    nodeRole?: str

    nodeRoleRef?: EksServicesK8sAwsV1alpha1NodegroupSpecNodeRoleRef

    releaseVersion?: str

    remoteAccess?: EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccess

    scalingConfig?: EksServicesK8sAwsV1alpha1NodegroupSpecScalingConfig

    subnetRefs?: [EksServicesK8sAwsV1alpha1NodegroupSpecSubnetRefsItems0]

    subnets?: [str]

    tags?: {str:str}

    taints?: [EksServicesK8sAwsV1alpha1NodegroupSpecTaintsItems0]

    updateConfig?: EksServicesK8sAwsV1alpha1NodegroupSpecUpdateConfig

    version?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecClusterRef:
    """
    AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
     from: name: my-api

    Attributes
    ----------
    from : EksServicesK8sAwsV1alpha1NodegroupSpecClusterRefFrom, default is Undefined, optional
        from
    """


    from?: EksServicesK8sAwsV1alpha1NodegroupSpecClusterRefFrom


schema EksServicesK8sAwsV1alpha1NodegroupSpecClusterRefFrom:
    """
    AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """


    name?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecLaunchTemplate:
    """
    An object representing a node group's launch template specification. If specified, then do not specify instanceTypes, diskSize, or remoteAccess and make sure that the launch template meets the requirements in launchTemplateSpecification.

    Attributes
    ----------
    id : str, default is Undefined, optional
        id
    name : str, default is Undefined, optional
        name
    version : str, default is Undefined, optional
        version
    """


    id?: str

    name?: str

    version?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecNodeRoleRef:
    """
    AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
     from: name: my-api

    Attributes
    ----------
    from : EksServicesK8sAwsV1alpha1NodegroupSpecNodeRoleRefFrom, default is Undefined, optional
        from
    """


    from?: EksServicesK8sAwsV1alpha1NodegroupSpecNodeRoleRefFrom


schema EksServicesK8sAwsV1alpha1NodegroupSpecNodeRoleRefFrom:
    """
    AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """


    name?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccess:
    """
    The remote access configuration to use with your node group. For Linux, the protocol is SSH. For Windows, the protocol is RDP. If you specify launchTemplate, then don't specify remoteAccess, or the node group deployment will fail. For more information about using launch templates with Amazon EKS, see Launch template support (https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html) in the Amazon EKS User Guide.

    Attributes
    ----------
    ec2SshKey : str, default is Undefined, optional
        ec2 Ssh key
    sourceSecurityGroupRefs : [EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccessSourceSecurityGroupRefsItems0], default is Undefined, optional
        Reference field for SourceSecurityGroups
    sourceSecurityGroups : [str], default is Undefined, optional
        source security groups
    """


    ec2SshKey?: str

    sourceSecurityGroupRefs?: [EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccessSourceSecurityGroupRefsItems0]

    sourceSecurityGroups?: [str]


schema EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccessSourceSecurityGroupRefsItems0:
    """
    AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
     from: name: my-api

    Attributes
    ----------
    from : EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccessSourceSecurityGroupRefsItems0From, default is Undefined, optional
        from
    """


    from?: EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccessSourceSecurityGroupRefsItems0From


schema EksServicesK8sAwsV1alpha1NodegroupSpecRemoteAccessSourceSecurityGroupRefsItems0From:
    """
    AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """


    name?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecScalingConfig:
    """
    The scaling configuration details for the Auto Scaling group that is created for your node group.

    Attributes
    ----------
    desiredSize : int, default is Undefined, optional
        desired size
    maxSize : int, default is Undefined, optional
        max size
    minSize : int, default is Undefined, optional
        min size
    """


    desiredSize?: int

    maxSize?: int

    minSize?: int


schema EksServicesK8sAwsV1alpha1NodegroupSpecSubnetRefsItems0:
    """
    AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
     from: name: my-api

    Attributes
    ----------
    from : EksServicesK8sAwsV1alpha1NodegroupSpecSubnetRefsItems0From, default is Undefined, optional
        from
    """


    from?: EksServicesK8sAwsV1alpha1NodegroupSpecSubnetRefsItems0From


schema EksServicesK8sAwsV1alpha1NodegroupSpecSubnetRefsItems0From:
    """
    AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """


    name?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecTaintsItems0:
    """
    A property that allows a node to repel a set of pods. For more information, see Node taints on managed node groups (https://docs.aws.amazon.com/eks/latest/userguide/node-taints-managed-node-groups.html).

    Attributes
    ----------
    effect : str, default is Undefined, optional
        effect
    key : str, default is Undefined, optional
        key
    value : str, default is Undefined, optional
        value
    """


    effect?: str

    key?: str

    value?: str


schema EksServicesK8sAwsV1alpha1NodegroupSpecUpdateConfig:
    """
    The node group update configuration.

    Attributes
    ----------
    maxUnavailable : int, default is Undefined, optional
        max unavailable
    maxUnavailablePercentage : int, default is Undefined, optional
        max unavailable percentage
    """


    maxUnavailable?: int

    maxUnavailablePercentage?: int


schema EksServicesK8sAwsV1alpha1NodegroupStatus:
    """
    NodegroupStatus defines the observed state of Nodegroup

    Attributes
    ----------
    ackResourceMetadata : EksServicesK8sAwsV1alpha1NodegroupStatusAckResourceMetadata, default is Undefined, optional
        ack resource metadata
    conditions : [EksServicesK8sAwsV1alpha1NodegroupStatusConditionsItems0], default is Undefined, optional
        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    createdAt : str, default is Undefined, optional
        The Unix epoch timestamp in seconds for when the managed node group was created.
    health : EksServicesK8sAwsV1alpha1NodegroupStatusHealth, default is Undefined, optional
        health
    modifiedAt : str, default is Undefined, optional
        The Unix epoch timestamp in seconds for when the managed node group was last modified.
    resources : EksServicesK8sAwsV1alpha1NodegroupStatusResources, default is Undefined, optional
        resources
    status : str, default is Undefined, optional
        The current status of the managed node group.
    """


    ackResourceMetadata?: EksServicesK8sAwsV1alpha1NodegroupStatusAckResourceMetadata

    conditions?: [EksServicesK8sAwsV1alpha1NodegroupStatusConditionsItems0]

    createdAt?: str

    health?: EksServicesK8sAwsV1alpha1NodegroupStatusHealth

    modifiedAt?: str

    resources?: EksServicesK8sAwsV1alpha1NodegroupStatusResources

    status?: str


schema EksServicesK8sAwsV1alpha1NodegroupStatusAckResourceMetadata:
    """
    All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    ownerAccountID : str, default is Undefined, required
        OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    region : str, default is Undefined, required
        Region is the AWS region in which the resource exists or will exist.
    """


    arn?: str

    ownerAccountID: str

    region: str


schema EksServicesK8sAwsV1alpha1NodegroupStatusConditionsItems0:
    """
    Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type is the type of the Condition
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status: str

    $type: str


schema EksServicesK8sAwsV1alpha1NodegroupStatusHealth:
    """
    The health status of the node group. If there are issues with your node group's health, they are listed here.

    Attributes
    ----------
    issues : [EksServicesK8sAwsV1alpha1NodegroupStatusHealthIssuesItems0], default is Undefined, optional
        issues
    """


    issues?: [EksServicesK8sAwsV1alpha1NodegroupStatusHealthIssuesItems0]


schema EksServicesK8sAwsV1alpha1NodegroupStatusHealthIssuesItems0:
    """
    An object representing an issue with an Amazon EKS resource.

    Attributes
    ----------
    code : str, default is Undefined, optional
        code
    message : str, default is Undefined, optional
        message
    resourceIDs : [str], default is Undefined, optional
        resource i ds
    """


    code?: str

    message?: str

    resourceIDs?: [str]


schema EksServicesK8sAwsV1alpha1NodegroupStatusResources:
    """
    The resources associated with the node group, such as Auto Scaling groups and security groups for remote access.

    Attributes
    ----------
    autoScalingGroups : [EksServicesK8sAwsV1alpha1NodegroupStatusResourcesAutoScalingGroupsItems0], default is Undefined, optional
        auto scaling groups
    remoteAccessSecurityGroup : str, default is Undefined, optional
        remote access security group
    """


    autoScalingGroups?: [EksServicesK8sAwsV1alpha1NodegroupStatusResourcesAutoScalingGroupsItems0]

    remoteAccessSecurityGroup?: str


schema EksServicesK8sAwsV1alpha1NodegroupStatusResourcesAutoScalingGroupsItems0:
    """
    An Auto Scaling group that is associated with an Amazon EKS managed node group.

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """


    name?: str


