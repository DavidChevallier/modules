"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VMRule:
    """
    VMRule defines rule records for vmalert application

    Attributes
    ----------
    apiVersion : str, default is "operator.victoriametrics.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VMRule", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OperatorVictoriametricsComV1beta1VMRuleSpec, default is Undefined, required
        spec
    status : any, default is Undefined, optional
        VMRuleStatus defines the observed state of VMRule
    """


    apiVersion: "operator.victoriametrics.com/v1beta1" = "operator.victoriametrics.com/v1beta1"

    kind: "VMRule" = "VMRule"

    metadata?: v1.ObjectMeta

    spec: OperatorVictoriametricsComV1beta1VMRuleSpec

    status?: any


schema OperatorVictoriametricsComV1beta1VMRuleSpec:
    """
    VMRuleSpec defines the desired state of VMRule

    Attributes
    ----------
    groups : [OperatorVictoriametricsComV1beta1VMRuleSpecGroupsItems0], default is Undefined, required
        Groups list of group rules
    """


    groups: [OperatorVictoriametricsComV1beta1VMRuleSpecGroupsItems0]


schema OperatorVictoriametricsComV1beta1VMRuleSpecGroupsItems0:
    """
    RuleGroup is a list of sequentially evaluated recording and alerting rules.

    Attributes
    ----------
    concurrency : int, default is Undefined, optional
        Concurrency defines how many rules execute at once.
    extra_filter_labels : {str:str}, default is Undefined, optional
        ExtraFilterLabels optional list of label filters applied to every rule's
        request withing a group. Is compatible only with VM datasource.
        See more details at https://docs.victoriametrics.com#prometheus-querying-api-enhancements
        Deprecated, use params instead
    headers : [str], default is Undefined, optional
        Headers contains optional HTTP headers added to each rule request
        Must be in form `header-name: value`
        For example:
         headers:
           - "CustomHeader: foo"
           - "CustomHeader2: bar"
    interval : str, default is Undefined, optional
        evaluation interval for group
    labels : {str:str}, default is Undefined, optional
        Labels optional list of labels added to every rule within a group.
        It has priority over the external labels.
        Labels are commonly used for adding environment
        or tenant-specific tag.
    limit : int, default is Undefined, optional
        Limit the number of alerts an alerting rule and series a recording
        rule can produce
    name : str, default is Undefined, required
        Name of group
    notifier_headers : [str], default is Undefined, optional
        NotifierHeaders contains optional HTTP headers added to each alert request which will send to notifier
        Must be in form `header-name: value`
        For example:
         headers:
           - "CustomHeader: foo"
           - "CustomHeader2: bar"
    params : {str:[str]}, default is Undefined, optional
        Params optional HTTP URL parameters added to each rule request
    rules : [OperatorVictoriametricsComV1beta1VMRuleSpecGroupsItems0RulesItems0], default is Undefined, required
        Rules list of alert rules
    tenant : str, default is Undefined, optional
        Tenant id for group, can be used only with enterprise version of vmalert
        See more details at https://docs.victoriametrics.com/vmalert.html#multitenancy
    $type : str, default is Undefined, optional
        Type defines datasource type for enterprise version of vmalert
        possible values - prometheus,graphite
    """


    concurrency?: int

    extra_filter_labels?: {str:str}

    headers?: [str]

    interval?: str

    labels?: {str:str}

    limit?: int

    name: str

    notifier_headers?: [str]

    params?: {str:[str]}

    rules: [OperatorVictoriametricsComV1beta1VMRuleSpecGroupsItems0RulesItems0]

    tenant?: str

    $type?: str


schema OperatorVictoriametricsComV1beta1VMRuleSpecGroupsItems0RulesItems0:
    """
    Rule describes an alerting or recording rule.

    Attributes
    ----------
    alert : str, default is Undefined, optional
        Alert is a name for alert
    annotations : {str:str}, default is Undefined, optional
        Annotations will be added to rule configuration
    debug : bool, default is Undefined, optional
        Debug enables logging for rule
        it useful for tracking
    expr : str, default is Undefined, optional
        Expr is query, that will be evaluated at dataSource
    $for : str, default is Undefined, optional
        For evaluation interval in time.Duration format
        30s, 1m, 1h  or nanoseconds
    keep_firing_for : str, default is Undefined, optional
        KeepFiringFor will make alert continue firing for this long
        even when the alerting expression no longer has results.
        Use time.Duration format, 30s, 1m, 1h  or nanoseconds
    labels : {str:str}, default is Undefined, optional
        Labels will be added to rule configuration
    record : str, default is Undefined, optional
        Record represents a query, that will be recorded to dataSource
    update_entries_limit : int, default is Undefined, optional
        UpdateEntriesLimit defines max number of rule's state updates stored in memory.
        Overrides `-rule.updateEntriesLimit` in vmalert.
    """


    alert?: str

    annotations?: {str:str}

    debug?: bool

    expr?: str

    $for?: str

    keep_firing_for?: str

    labels?: {str:str}

    record?: str

    update_entries_limit?: int


