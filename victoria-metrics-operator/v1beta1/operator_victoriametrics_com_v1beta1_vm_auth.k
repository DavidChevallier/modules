"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema VMAuth:
    """
    VMAuth is the Schema for the vmauths API

    Attributes
    ----------
    apiVersion : str, default is "operator.victoriametrics.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VMAuth", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OperatorVictoriametricsComV1beta1VMAuthSpec, default is Undefined, optional
        spec
    status : OperatorVictoriametricsComV1beta1VMAuthStatus, default is Undefined, optional
        status
    """


    apiVersion: "operator.victoriametrics.com/v1beta1" = "operator.victoriametrics.com/v1beta1"

    kind: "VMAuth" = "VMAuth"

    metadata?: v1.ObjectMeta

    spec?: OperatorVictoriametricsComV1beta1VMAuthSpec

    status?: OperatorVictoriametricsComV1beta1VMAuthStatus


schema OperatorVictoriametricsComV1beta1VMAuthSpec:
    """
    VMAuthSpec defines the desired state of VMAuth

    Attributes
    ----------
    affinity : any, default is Undefined, optional
        Affinity If specified, the pod's scheduling constraints.
    configMaps : [str], default is Undefined, optional
        ConfigMaps is a list of ConfigMaps in the same namespace as the VMAuth
        object, which shall be mounted into the VMAuth Pods.
    configReloaderExtraArgs : {str:str}, default is Undefined, optional
        ConfigReloaderExtraArgs that will be passed to  VMAuths config-reloader container
        for example resyncInterval: "30s"
    configSecret : str, default is Undefined, optional
        ConfigSecret is the name of a Kubernetes Secret in the same namespace as the
        VMAuth object, which contains auth configuration for vmauth,
        configuration must be inside secret key: config.yaml.
        It must be created and managed manually.
        If it's defined, configuration for vmauth becomes unmanaged and operator'll not create any related secrets/config-reloaders
    containers : [any], default is Undefined, optional
        Containers property allows to inject additions sidecars or to patch existing containers.
        It can be useful for proxies, backup, etc.
    default_url : [str], default is Undefined, optional
        DefaultURLs backend url for non-matching paths filter
        usually used for default backend with error message
    discover_backend_ips : bool, default is Undefined, optional
        DiscoverBackendIPs instructs discovering URLPrefix backend IPs via DNS.
    dnsConfig : OperatorVictoriametricsComV1beta1VMAuthSpecDNSConfig, default is Undefined, optional
        dns config
    dnsPolicy : str, default is Undefined, optional
        DNSPolicy sets DNS policy for the pod
    drop_src_path_prefix_parts : int, default is Undefined, optional
        DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
        See https://docs.victoriametrics.com/vmauth.html#dropping-request-path-prefix for more details.
    extraArgs : {str:str}, default is Undefined, optional
        ExtraArgs that will be passed to  VMAuth pod
        for example remoteWrite.tmpDataPath: /tmp
    extraEnvs : [OperatorVictoriametricsComV1beta1VMAuthSpecExtraEnvsItems0], default is Undefined, optional
        ExtraEnvs that will be added to VMAuth pod
    headers : [str], default is Undefined, optional
        Headers represent additional http headers, that vmauth uses
        in form of ["header_key: header_value"]
        multiple values for header key:
        ["header_key: value1,value2"]
        it's available since 1.68.0 version of vmauth
    hostAliases : [OperatorVictoriametricsComV1beta1VMAuthSpecHostAliasesItems0], default is Undefined, optional
        HostAliases provides mapping for ip and hostname,
        that would be propagated to pod,
        cannot be used with HostNetwork.
    hostNetwork : bool, default is Undefined, optional
        HostNetwork controls whether the pod may use the node network namespace
    image : OperatorVictoriametricsComV1beta1VMAuthSpecImage, default is Undefined, optional
        image
    imagePullSecrets : [OperatorVictoriametricsComV1beta1VMAuthSpecImagePullSecretsItems0], default is Undefined, optional
        ImagePullSecrets An optional list of references to secrets in the same namespace
        to use for pulling images from registries
        see https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod
    ingress : OperatorVictoriametricsComV1beta1VMAuthSpecIngress, default is Undefined, optional
        ingress
    initContainers : [any], default is Undefined, optional
        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
        fetch secrets for injection into the vmSingle configuration from external sources. Any
        errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        Using initContainers for any use case other then secret fetching is entirely outside the scope
        of what the maintainers will support and by doing so, you accept that this behaviour may break
        at any time without notice.
    ip_filters : OperatorVictoriametricsComV1beta1VMAuthSpecIPFilters, default is Undefined, optional
        ip filters
    license : OperatorVictoriametricsComV1beta1VMAuthSpecLicense, default is Undefined, optional
        license
    livenessProbe : any, default is Undefined, optional
        LivenessProbe that will be added CRD pod
    load_balancing_policy : str, default is Undefined, optional
        LoadBalancingPolicy defines load balancing policy to use for backend urls.
        Supported policies: least_loaded, first_available.
        See https://docs.victoriametrics.com/vmauth.html#load-balancing for more details (default "least_loaded")
    logFormat : str, default is Undefined, optional
        LogFormat for VMAuth to be configured with.
    logLevel : str, default is Undefined, optional
        LogLevel for victoria metrics single to be configured with.
    max_concurrent_requests : int, default is Undefined, optional
        MaxConcurrentRequests defines max concurrent requests per user
        300 is default value for vmauth
    minReadySeconds : int, default is Undefined, optional
        MinReadySeconds defines a minim number os seconds to wait before starting update next pod
        if previous in healthy state
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector Define which Nodes the Pods are scheduled on.
    paused : bool, default is Undefined, optional
        Paused If set to true all actions on the underlying managed objects are not
        going to be performed, except for delete actions.
    podDisruptionBudget : OperatorVictoriametricsComV1beta1VMAuthSpecPodDisruptionBudget, default is Undefined, optional
        pod disruption budget
    podMetadata : OperatorVictoriametricsComV1beta1VMAuthSpecPodMetadata, default is Undefined, optional
        pod metadata
    port : str, default is Undefined, optional
        Port listen port
    priorityClassName : str, default is Undefined, optional
        PriorityClassName assigned to the Pods
    readinessGates : [OperatorVictoriametricsComV1beta1VMAuthSpecReadinessGatesItems0], default is Undefined, optional
        ReadinessGates defines pod readiness gates
    readinessProbe : any, default is Undefined, optional
        ReadinessProbe that will be added CRD pod
    replicaCount : int, default is Undefined, optional
        ReplicaCount is the expected size of the VMAuth
    resources : OperatorVictoriametricsComV1beta1VMAuthSpecResources, default is Undefined, optional
        resources
    response_headers : [str], default is Undefined, optional
        ResponseHeaders represent additional http headers, that vmauth adds for request response
        in form of ["header_key: header_value"]
        multiple values for header key:
        ["header_key: value1,value2"]
        it's available since 1.93.0 version of vmauth
    retry_status_codes : [int], default is Undefined, optional
        RetryStatusCodes defines http status codes in numeric format for request retries
        e.g. [429,503]
    revisionHistoryLimitCount : int, default is Undefined, optional
        The number of old ReplicaSets to retain to allow rollback in deployment or
        maximum number of revisions that will be maintained in the StatefulSet's revision history.
        Defaults to 10.
    runtimeClassName : str, default is Undefined, optional
        RuntimeClassName - defines runtime class for kubernetes pod.
        https://kubernetes.io/docs/concepts/containers/runtime-class/
    schedulerName : str, default is Undefined, optional
        SchedulerName - defines kubernetes scheduler name
    secrets : [str], default is Undefined, optional
        Secrets is a list of Secrets in the same namespace as the VMAuth
        object, which shall be mounted into the VMAuth Pods.
    securityContext : any, default is Undefined, optional
        SecurityContext holds pod-level security attributes and common container settings.
        This defaults to the default PodSecurityContext.
    selectAllByDefault : bool, default is Undefined, optional
        SelectAllByDefault changes default behavior for empty CRD selectors, such userSelector.
        with selectAllByDefault: true and empty userSelector and userNamespaceSelector
        Operator selects all exist users
        with selectAllByDefault: false - selects nothing
    serviceAccountName : str, default is Undefined, optional
        ServiceAccountName is the name of the ServiceAccount to use to run the
        VMAuth Pods.
    serviceScrapeSpec : any, default is Undefined, optional
        ServiceScrapeSpec that will be added to vmauth VMServiceScrape spec
    serviceSpec : OperatorVictoriametricsComV1beta1VMAuthSpecServiceSpec, default is Undefined, optional
        service spec
    startupProbe : any, default is Undefined, optional
        StartupProbe that will be added to CRD pod
    terminationGracePeriodSeconds : int, default is Undefined, optional
        TerminationGracePeriodSeconds period for container graceful termination
    tlsConfig : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfig, default is Undefined, optional
        tls config
    tolerations : [OperatorVictoriametricsComV1beta1VMAuthSpecTolerationsItems0], default is Undefined, optional
        Tolerations If specified, the pod's tolerations.
    topologySpreadConstraints : [any], default is Undefined, optional
        TopologySpreadConstraints embedded kubernetes pod configuration option,
        controls how pods are spread across your cluster among failure-domains
        such as regions, zones, nodes, and other user-defined topology domains
        https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    unauthorizedAccessConfig : [OperatorVictoriametricsComV1beta1VMAuthSpecUnauthorizedAccessConfigItems0], default is Undefined, optional
        UnauthorizedAccessConfig configures access for un authorized users
    useStrictSecurity : bool, default is Undefined, optional
        UseStrictSecurity enables strict security mode for component
        it restricts disk writes access
        uses non-root user out of the box
        drops not needed security permissions
    userNamespaceSelector : OperatorVictoriametricsComV1beta1VMAuthSpecUserNamespaceSelector, default is Undefined, optional
        user namespace selector
    userSelector : OperatorVictoriametricsComV1beta1VMAuthSpecUserSelector, default is Undefined, optional
        user selector
    volumeMounts : [OperatorVictoriametricsComV1beta1VMAuthSpecVolumeMountsItems0], default is Undefined, optional
        VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition.
        VolumeMounts specified will be appended to other VolumeMounts in the VMAuth container,
        that are generated as a result of StorageSpec objects.
    volumes : [any], default is Undefined, optional
        Volumes allows configuration of additional volumes on the output deploy definition.
        Volumes specified will be appended to other volumes that are generated as a result of
        StorageSpec objects.
    """


    affinity?: any

    configMaps?: [str]

    configReloaderExtraArgs?: {str:str}

    configSecret?: str

    containers?: [any]

    default_url?: [str]

    discover_backend_ips?: bool

    dnsConfig?: OperatorVictoriametricsComV1beta1VMAuthSpecDNSConfig

    dnsPolicy?: str

    drop_src_path_prefix_parts?: int

    extraArgs?: {str:str}

    extraEnvs?: [OperatorVictoriametricsComV1beta1VMAuthSpecExtraEnvsItems0]

    headers?: [str]

    hostAliases?: [OperatorVictoriametricsComV1beta1VMAuthSpecHostAliasesItems0]

    hostNetwork?: bool

    image?: OperatorVictoriametricsComV1beta1VMAuthSpecImage

    imagePullSecrets?: [OperatorVictoriametricsComV1beta1VMAuthSpecImagePullSecretsItems0]

    ingress?: OperatorVictoriametricsComV1beta1VMAuthSpecIngress

    initContainers?: [any]

    ip_filters?: OperatorVictoriametricsComV1beta1VMAuthSpecIPFilters

    license?: OperatorVictoriametricsComV1beta1VMAuthSpecLicense

    livenessProbe?: any

    load_balancing_policy?: "least_loaded" | "first_available"

    logFormat?: "default" | "json"

    logLevel?: "INFO" | "WARN" | "ERROR" | "FATAL" | "PANIC"

    max_concurrent_requests?: int

    minReadySeconds?: int

    nodeSelector?: {str:str}

    paused?: bool

    podDisruptionBudget?: OperatorVictoriametricsComV1beta1VMAuthSpecPodDisruptionBudget

    podMetadata?: OperatorVictoriametricsComV1beta1VMAuthSpecPodMetadata

    port?: str

    priorityClassName?: str

    readinessGates?: [OperatorVictoriametricsComV1beta1VMAuthSpecReadinessGatesItems0]

    readinessProbe?: any

    replicaCount?: int

    resources?: OperatorVictoriametricsComV1beta1VMAuthSpecResources

    response_headers?: [str]

    retry_status_codes?: [int]

    revisionHistoryLimitCount?: int

    runtimeClassName?: str

    schedulerName?: str

    secrets?: [str]

    securityContext?: any

    selectAllByDefault?: bool

    serviceAccountName?: str

    serviceScrapeSpec?: any

    serviceSpec?: OperatorVictoriametricsComV1beta1VMAuthSpecServiceSpec

    startupProbe?: any

    terminationGracePeriodSeconds?: int

    tlsConfig?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfig

    tolerations?: [OperatorVictoriametricsComV1beta1VMAuthSpecTolerationsItems0]

    topologySpreadConstraints?: [any]

    unauthorizedAccessConfig?: [OperatorVictoriametricsComV1beta1VMAuthSpecUnauthorizedAccessConfigItems0]

    useStrictSecurity?: bool

    userNamespaceSelector?: OperatorVictoriametricsComV1beta1VMAuthSpecUserNamespaceSelector

    userSelector?: OperatorVictoriametricsComV1beta1VMAuthSpecUserSelector

    volumeMounts?: [OperatorVictoriametricsComV1beta1VMAuthSpecVolumeMountsItems0]

    volumes?: [any]


schema OperatorVictoriametricsComV1beta1VMAuthSpecDNSConfig:
    """
    Specifies the DNS parameters of a pod.
    Parameters specified here will be merged to the generated DNS
    configuration based on DNSPolicy.

    Attributes
    ----------
    nameservers : [str], default is Undefined, optional
        A list of DNS name server IP addresses.
        This will be appended to the base nameservers generated from DNSPolicy.
        Duplicated nameservers will be removed.
    options : [OperatorVictoriametricsComV1beta1VMAuthSpecDNSConfigOptionsItems0], default is Undefined, optional
        A list of DNS resolver options.
        This will be merged with the base options generated from DNSPolicy.
        Duplicated entries will be removed. Resolution options given in Options
        will override those that appear in the base DNSPolicy.
    searches : [str], default is Undefined, optional
        A list of DNS search domains for host-name lookup.
        This will be appended to the base search paths generated from DNSPolicy.
        Duplicated search paths will be removed.
    """


    nameservers?: [str]

    options?: [OperatorVictoriametricsComV1beta1VMAuthSpecDNSConfigOptionsItems0]

    searches?: [str]


schema OperatorVictoriametricsComV1beta1VMAuthSpecDNSConfigOptionsItems0:
    """
    PodDNSConfigOption defines DNS resolver options of a pod.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Required.
    value : str, default is Undefined, optional
        value
    """


    name?: str

    value?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecExtraEnvsItems0:
    """
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    """


    name: str

    value?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecHostAliasesItems0:
    """
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
    pod's hosts file.

    Attributes
    ----------
    hostnames : [str], default is Undefined, optional
        Hostnames for the above IP address.
    ip : str, default is Undefined, optional
        IP address of the host file entry.
    """


    hostnames?: [str]

    ip?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecIPFilters:
    """
    IPFilters defines per target src ip filters
    supported only with enterprise version of vmauth
    https://docs.victoriametrics.com/vmauth.html#ip-filters

    Attributes
    ----------
    allow_list : [str], default is Undefined, optional
        allow list
    deny_list : [str], default is Undefined, optional
        deny list
    """


    allow_list?: [str]

    deny_list?: [str]


schema OperatorVictoriametricsComV1beta1VMAuthSpecImage:
    """
    Image - docker image settings for VMAuth
    if no specified operator uses default config version

    Attributes
    ----------
    pullPolicy : str, default is Undefined, optional
        PullPolicy describes how to pull docker image
    repository : str, default is Undefined, optional
        Repository contains name of docker image + it's repository if needed
    tag : str, default is Undefined, optional
        Tag contains desired docker image version
    """


    pullPolicy?: str

    repository?: str

    tag?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecImagePullSecretsItems0:
    """
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    """


    name?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngress:
    """
    Ingress enables ingress configuration for VMAuth.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    class_name : str, default is Undefined, optional
        ClassName defines ingress class name for VMAuth
    extraRules : [OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0], default is Undefined, optional
        ExtraRules - additional rules for ingress,
        must be checked for correctness by user.
    extraTls : [OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraTLSItems0], default is Undefined, optional
        ExtraTLS - additional TLS configuration for ingress
        must be checked for correctness by user.
    host : str, default is Undefined, optional
        Host defines ingress host parameter for default rule
        It will be used, only if TlsHosts is empty
    labels : {str:str}, default is Undefined, optional
        Labels Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    tlsHosts : [str], default is Undefined, optional
        TlsHosts configures TLS access for ingress, tlsSecretName must be defined for it.
    tlsSecretName : str, default is Undefined, optional
        TlsSecretName defines secretname at the VMAuth namespace with cert and key
        https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    """


    annotations?: {str:str}

    class_name?: str

    extraRules?: [OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0]

    extraTls?: [OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraTLSItems0]

    host?: str

    labels?: {str:str}

    name?: str

    tlsHosts?: [str]

    tlsSecretName?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0:
    """
    IngressRule represents the rules mapping the paths under a specified host to
    the related backend services. Incoming requests are first evaluated for a host
    match, then routed to the backend associated with the matching IngressRuleValue.

    Attributes
    ----------
    host : str, default is Undefined, optional
        host is the fully qualified domain name of a network host, as defined by RFC 3986.
        Note the following deviations from the "host" part of the
        URI as defined in RFC 3986:
        1. IPs are not allowed. Currently an IngressRuleValue can only apply to
           the IP in the Spec of the parent Ingress.
        2. The `:` delimiter is not respected because ports are not allowed.
        	  Currently the port of an Ingress is implicitly :80 for http and
        	  :443 for https.
        Both these may change in the future.
        Incoming requests are matched against the host before the
        IngressRuleValue. If the host is unspecified, the Ingress routes all
        traffic based on the specified IngressRuleValue.


        host can be "precise" which is a domain name without the terminating dot of
        a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name
        prefixed with a single wildcard label (e.g. "*.foo.com").
        The wildcard character '*' must appear by itself as the first DNS label and
        matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*").
        Requests will be matched against the Host field in the following way:
        1. If host is precise, the request matches this rule if the http host header is equal to Host.
        2. If host is a wildcard, then the request matches this rule if the http host header
        is to equal to the suffix (removing the first label) of the wildcard rule.
    http : OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTP, default is Undefined, optional
        http
    """


    host?: str

    http?: OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTP


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTP:
    """
    HTTPIngressRuleValue is a list of http selectors pointing to backends.
    In the example: http://<host>/<path>?<searchpart> -> backend where
    where parts of the url correspond to RFC 3986, this resource will be used
    to match against everything after the last '/' and before the first '?'
    or '#'.

    Attributes
    ----------
    paths : [OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0], default is Undefined, required
        paths is a collection of paths that map requests to backends.
    """


    paths: [OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0]


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0:
    """
    HTTPIngressPath associates a path with a backend. Incoming urls matching the
    path are forwarded to the backend.

    Attributes
    ----------
    backend : OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0Backend, default is Undefined, required
        backend
    path : str, default is Undefined, optional
        path is matched against the path of an incoming request. Currently it can
        contain characters disallowed from the conventional "path" part of a URL
        as defined by RFC 3986. Paths must begin with a '/' and must be present
        when using PathType with value "Exact" or "Prefix".
    pathType : str, default is Undefined, required
        pathType determines the interpretation of the path matching. PathType can
        be one of the following values:
        * Exact: Matches the URL path exactly.
        * Prefix: Matches based on a URL path prefix split by '/'. Matching is
          done on a path element by element basis. A path element refers is the
          list of labels in the path split by the '/' separator. A request is a
          match for path p if every p is an element-wise prefix of p of the
          request path. Note that if the last element of the path is a substring
          of the last element in request path, it is not a match (e.g. /foo/bar
          matches /foo/bar/baz, but does not match /foo/barbaz).
        * ImplementationSpecific: Interpretation of the Path matching is up to
          the IngressClass. Implementations can treat this as a separate PathType
          or treat it identically to Prefix or Exact path types.
        Implementations are required to support all path types.
    """


    backend: OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0Backend

    path?: str

    pathType: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0Backend:
    """
    backend defines the referenced service endpoint to which the traffic
    will be forwarded to.

    Attributes
    ----------
    resource : OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendResource, default is Undefined, optional
        resource
    service : OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendService, default is Undefined, optional
        service
    """


    resource?: OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendResource

    service?: OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendService


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendResource:
    """
    resource is an ObjectRef to another Kubernetes resource in the namespace
    of the Ingress object. If resource is specified, a service.Name and
    service.Port must not be specified.
    This is a mutually exclusive setting with "Service".

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """


    apiGroup?: str

    kind: str

    name: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendService:
    """
    service references a service as a backend.
    This is a mutually exclusive setting with "Resource".

    Attributes
    ----------
    name : str, default is Undefined, required
        name is the referenced service. The service must exist in
        the same namespace as the Ingress object.
    port : OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendServicePort, default is Undefined, optional
        port
    """


    name: str

    port?: OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendServicePort


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraRulesItems0HTTPPathsItems0BackendServicePort:
    """
    port of the referenced service. A port name or port number
    is required for a IngressServiceBackend.

    Attributes
    ----------
    name : str, default is Undefined, optional
        name is the name of the port on the Service.
        This is a mutually exclusive setting with "Number".
    number : int, default is Undefined, optional
        number is the numerical port number (e.g. 80) on the Service.
        This is a mutually exclusive setting with "Name".
    """


    name?: str

    number?: int


schema OperatorVictoriametricsComV1beta1VMAuthSpecIngressExtraTLSItems0:
    """
    IngressTLS describes the transport layer security associated with an ingress.

    Attributes
    ----------
    hosts : [str], default is Undefined, optional
        hosts is a list of hosts included in the TLS certificate. The values in
        this list must match the name/s used in the tlsSecret. Defaults to the
        wildcard host setting for the loadbalancer controller fulfilling this
        Ingress, if left unspecified.
    secretName : str, default is Undefined, optional
        secretName is the name of the secret used to terminate TLS traffic on
        port 443. Field is left optional to allow TLS routing based on SNI
        hostname alone. If the SNI host in a listener conflicts with the "Host"
        header field used by an IngressRule, the SNI host is used for termination
        and value of the "Host" header is used for routing.
    """


    hosts?: [str]

    secretName?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecLicense:
    """
    License allows to configure license key to be used for enterprise features.
    Using license key is supported starting from VictoriaMetrics v1.94.0.
    See: https://docs.victoriametrics.com/enterprise.html

    Attributes
    ----------
    key : str, default is Undefined, optional
        Enterprise license key. This flag is available only in VictoriaMetrics enterprise.
        Documentation - https://docs.victoriametrics.com/enterprise.html
        for more information, visit https://victoriametrics.com/products/enterprise/ .
        To request a trial license, go to https://victoriametrics.com/products/enterprise/trial/
    keyRef : OperatorVictoriametricsComV1beta1VMAuthSpecLicenseKeyRef, default is Undefined, optional
        key ref
    """


    key?: str

    keyRef?: OperatorVictoriametricsComV1beta1VMAuthSpecLicenseKeyRef


schema OperatorVictoriametricsComV1beta1VMAuthSpecLicenseKeyRef:
    """
    KeyRef is reference to secret with license key for enterprise features.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecPodDisruptionBudget:
    """
    PodDisruptionBudget created by operator

    Attributes
    ----------
    maxUnavailable : int | str, default is Undefined, optional
        An eviction is allowed if at most "maxUnavailable" pods selected by
        "selector" are unavailable after the eviction, i.e. even in absence of
        the evicted pod. For example, one can prevent all voluntary evictions
        by specifying 0. This is a mutually exclusive setting with "minAvailable".
    minAvailable : int | str, default is Undefined, optional
        An eviction is allowed if at least "minAvailable" pods selected by
        "selector" will still be available after the eviction, i.e. even in the
        absence of the evicted pod.  So for example you can prevent all voluntary
        evictions by specifying "100%".
    selectorLabels : {str:str}, default is Undefined, optional
        replaces default labels selector generated by operator
        it's useful when you need to create custom budget
    """


    maxUnavailable?: int | str

    minAvailable?: int | str

    selectorLabels?: {str:str}


schema OperatorVictoriametricsComV1beta1VMAuthSpecPodMetadata:
    """
    PodMetadata configures Labels and Annotations which are propagated to the VMAuth pods.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    labels : {str:str}, default is Undefined, optional
        Labels Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    """


    annotations?: {str:str}

    labels?: {str:str}

    name?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecReadinessGatesItems0:
    """
    PodReadinessGate contains the reference to a pod condition

    Attributes
    ----------
    conditionType : str, default is Undefined, required
        ConditionType refers to a condition in the pod's condition list with matching type.
    """


    conditionType: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecResources:
    """
    Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    if not defined default resources from operator config will be used

    Attributes
    ----------
    claims : [OperatorVictoriametricsComV1beta1VMAuthSpecResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.


        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.


        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [OperatorVictoriametricsComV1beta1VMAuthSpecResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits {regex.match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests {regex.match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema OperatorVictoriametricsComV1beta1VMAuthSpecResourcesClaimsItems0:
    """
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    """


    name: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecServiceSpec:
    """
    ServiceSpec that will be added to vmsingle service spec

    Attributes
    ----------
    metadata : OperatorVictoriametricsComV1beta1VMAuthSpecServiceSpecMetadata, default is Undefined, optional
        metadata
    spec : any, default is Undefined, required
        ServiceSpec describes the attributes that a user creates on a service.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/
    useAsDefault : bool, default is Undefined, optional
        UseAsDefault applies changes from given service definition to the main object Service
        Changing from headless service to clusterIP or loadbalancer may break cross-component communication
    """


    metadata?: OperatorVictoriametricsComV1beta1VMAuthSpecServiceSpecMetadata

    spec: any

    useAsDefault?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecServiceSpecMetadata:
    """
    EmbeddedObjectMetadata defines objectMeta for additional service.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    labels : {str:str}, default is Undefined, optional
        Labels Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    """


    annotations?: {str:str}

    labels?: {str:str}

    name?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfig:
    """
    TLSConfig specifies TLSConfig configuration parameters.

    Attributes
    ----------
    ca : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        Path to the CA cert in the container to use for the targets.
    cert : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        Path to the client cert file in the container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keyFile : str, default is Undefined, optional
        Path to the client key file in the container for the targets.
    keySecret : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigKeySecret, default is Undefined, optional
        key secret
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """


    ca?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCa

    caFile?: str

    cert?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCert

    certFile?: str

    insecureSkipVerify?: bool

    keyFile?: str

    keySecret?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigKeySecret

    serverName?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCa:
    """
    Stuct containing the CA cert to use for the targets.

    Attributes
    ----------
    configMap : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCaSecret, default is Undefined, optional
        secret
    """


    configMap?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCaConfigMap

    secret?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCaSecret


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCaConfigMap:
    """
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCaSecret:
    """
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCert:
    """
    Struct containing the client cert file for the targets.

    Attributes
    ----------
    configMap : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCertSecret, default is Undefined, optional
        secret
    """


    configMap?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCertConfigMap

    secret?: OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCertSecret


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCertConfigMap:
    """
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigCertSecret:
    """
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecTLSConfigKeySecret:
    """
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMAuthSpecTolerationsItems0:
    """
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema OperatorVictoriametricsComV1beta1VMAuthSpecUnauthorizedAccessConfigItems0:
    """
    operator victoriametrics com v1beta1 VM auth spec unauthorized access config items0

    Attributes
    ----------
    discover_backend_ips : bool, default is Undefined, optional
        DiscoverBackendIPs instructs discovering URLPrefix backend IPs via DNS.
    drop_src_path_prefix_parts : int, default is Undefined, optional
        DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
        See https://docs.victoriametrics.com/vmauth.html#dropping-request-path-prefix for more details.
    headers : [str], default is Undefined, optional
        RequestHeaders represent additional http headers, that vmauth uses
        in form of ["header_key: header_value"]
        multiple values for header key:
        ["header_key: value1,value2"]
        it's available since 1.68.0 version of vmauth
    load_balancing_policy : str, default is Undefined, optional
        LoadBalancingPolicy defines load balancing policy to use for backend urls.
        Supported policies: least_loaded, first_available.
        See https://docs.victoriametrics.com/vmauth.html#load-balancing for more details (default "least_loaded")
    response_headers : [str], default is Undefined, optional
        ResponseHeaders represent additional http headers, that vmauth adds for request response
        in form of ["header_key: header_value"]
        multiple values for header key:
        ["header_key: value1,value2"]
        it's available since 1.93.0 version of vmauth
    retry_status_codes : [int], default is Undefined, optional
        RetryStatusCodes defines http status codes in numeric format for request retries
        Can be defined per target or at VMUser.spec level
        e.g. [429,503]
    src_headers : [str], default is Undefined, optional
        SrcHeaders is an optional list of headers, which must match request headers.
    src_hosts : [str], default is Undefined, optional
        SrcHosts is an optional list of regular expressions, which must match the request hostname.
    src_paths : [str], default is Undefined, optional
        SrcPaths is an optional list of regular expressions, which must match the request path.
    src_query_args : [str], default is Undefined, optional
        SrcQueryArgs is an optional list of query args, which must match request URL query args.
    url_prefix : [str], default is Undefined, optional
        UrlPrefix contains backend url prefixes for the proxied request url.
    """


    discover_backend_ips?: bool

    drop_src_path_prefix_parts?: int

    headers?: [str]

    load_balancing_policy?: "least_loaded" | "first_available"

    response_headers?: [str]

    retry_status_codes?: [int]

    src_headers?: [str]

    src_hosts?: [str]

    src_paths?: [str]

    src_query_args?: [str]

    url_prefix?: [str]


schema OperatorVictoriametricsComV1beta1VMAuthSpecUserNamespaceSelector:
    """
    UserNamespaceSelector Namespaces to be selected for  VMAuth discovery.
    Works in combination with Selector.
    NamespaceSelector nil - only objects at VMAuth namespace.
    Selector nil - only objects at NamespaceSelector namespaces.
    If both nil - behaviour controlled by selectAllByDefault

    Attributes
    ----------
    matchExpressions : [OperatorVictoriametricsComV1beta1VMAuthSpecUserNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorVictoriametricsComV1beta1VMAuthSpecUserNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorVictoriametricsComV1beta1VMAuthSpecUserNamespaceSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorVictoriametricsComV1beta1VMAuthSpecUserSelector:
    """
    UserSelector defines VMUser to be selected for config file generation.
    Works in combination with NamespaceSelector.
    NamespaceSelector nil - only objects at VMAuth namespace.
    If both nil - behaviour controlled by selectAllByDefault

    Attributes
    ----------
    matchExpressions : [OperatorVictoriametricsComV1beta1VMAuthSpecUserSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorVictoriametricsComV1beta1VMAuthSpecUserSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorVictoriametricsComV1beta1VMAuthSpecUserSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorVictoriametricsComV1beta1VMAuthSpecVolumeMountsItems0:
    """
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    subPath?: str

    subPathExpr?: str


schema OperatorVictoriametricsComV1beta1VMAuthStatus:
    """
    VMAuthStatus defines the observed state of VMAuth

    Attributes
    ----------
    reason : str, default is Undefined, optional
        Reason defines fail reason for update process, effective only for statefulMode
    updateStatus : str, default is Undefined, optional
        UpdateStatus defines a status for update rollout, effective only for statefulMode
    """


    reason?: str

    updateStatus?: str


