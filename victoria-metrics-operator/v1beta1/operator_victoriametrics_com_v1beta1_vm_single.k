"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema VMSingle:
    """
    VMSingle  is fast, cost-effective and scalable time-series database.

    Attributes
    ----------
    apiVersion : str, default is "operator.victoriametrics.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VMSingle", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OperatorVictoriametricsComV1beta1VMSingleSpec, default is Undefined, optional
        spec
    status : OperatorVictoriametricsComV1beta1VMSingleStatus, default is Undefined, optional
        status
    """


    apiVersion: "operator.victoriametrics.com/v1beta1" = "operator.victoriametrics.com/v1beta1"

    kind: "VMSingle" = "VMSingle"

    metadata?: v1.ObjectMeta

    spec?: OperatorVictoriametricsComV1beta1VMSingleSpec

    status?: OperatorVictoriametricsComV1beta1VMSingleStatus


schema OperatorVictoriametricsComV1beta1VMSingleSpec:
    """
    VMSingleSpec defines the desired state of VMSingle

    Attributes
    ----------
    affinity : any, default is Undefined, optional
        Affinity If specified, the pod's scheduling constraints.
    configMaps : [str], default is Undefined, optional
        ConfigMaps is a list of ConfigMaps in the same namespace as the VMSingle object, which shall be mounted into the VMSingle Pods.
    containers : [any], default is Undefined, optional
        Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.
    dnsConfig : OperatorVictoriametricsComV1beta1VMSingleSpecDNSConfig, default is Undefined, optional
        dns config
    dnsPolicy : str, default is Undefined, optional
        DNSPolicy sets DNS policy for the pod
    extraArgs : {str:str}, default is Undefined, optional
        ExtraArgs that will be passed to  VMSingle pod for example remoteWrite.tmpDataPath: /tmp
    extraEnvs : [OperatorVictoriametricsComV1beta1VMSingleSpecExtraEnvsItems0], default is Undefined, optional
        ExtraEnvs that will be added to VMSingle pod
    hostAliases : [OperatorVictoriametricsComV1beta1VMSingleSpecHostAliasesItems0], default is Undefined, optional
        HostAliases provides mapping for ip and hostname, that would be propagated to pod, cannot be used with HostNetwork.
    hostNetwork : bool, default is Undefined, optional
        HostNetwork controls whether the pod may use the node network namespace
    image : OperatorVictoriametricsComV1beta1VMSingleSpecImage, default is Undefined, optional
        image
    imagePullSecrets : [OperatorVictoriametricsComV1beta1VMSingleSpecImagePullSecretsItems0], default is Undefined, optional
        ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod
    initContainers : [any], default is Undefined, optional
        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the vmSingle configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
    insertPorts : OperatorVictoriametricsComV1beta1VMSingleSpecInsertPorts, default is Undefined, optional
        insert ports
    livenessProbe : any, default is Undefined, optional
        LivenessProbe that will be added CRD pod
    logFormat : str, default is Undefined, optional
        LogFormat for VMSingle to be configured with.
    logLevel : str, default is Undefined, optional
        LogLevel for victoria metrics single to be configured with.
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector Define which Nodes the Pods are scheduled on.
    podMetadata : OperatorVictoriametricsComV1beta1VMSingleSpecPodMetadata, default is Undefined, optional
        pod metadata
    podSecurityPolicyName : str, default is Undefined, optional
        PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.
    port : str, default is Undefined, optional
        Port listen port
    priorityClassName : str, default is Undefined, optional
        PriorityClassName assigned to the Pods
    readinessGates : [OperatorVictoriametricsComV1beta1VMSingleSpecReadinessGatesItems0], default is Undefined, optional
        ReadinessGates defines pod readiness gates
    readinessProbe : any, default is Undefined, optional
        ReadinessProbe that will be added CRD pod
    removePvcAfterDelete : bool, default is Undefined, optional
        RemovePvcAfterDelete - if true, controller adds ownership to pvc and after VMSingle objest deletion - pvc will be garbage collected by controller manager
    replicaCount : int, default is Undefined, optional
        ReplicaCount is the expected size of the VMSingle it can be 0 or 1 if you need more - use vm cluster
    resources : OperatorVictoriametricsComV1beta1VMSingleSpecResources, default is Undefined, optional
        resources
    retentionPeriod : str, default is Undefined, required
        RetentionPeriod for the stored metrics Note VictoriaMetrics has data/ and indexdb/ folders metrics from data/ removed eventually as soon as partition leaves retention period reverse index data at indexdb rotates once at the half of configured retention period https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#retention
    runtimeClassName : str, default is Undefined, optional
        RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/
    schedulerName : str, default is Undefined, optional
        SchedulerName - defines kubernetes scheduler name
    secrets : [str], default is Undefined, optional
        Secrets is a list of Secrets in the same namespace as the VMSingle object, which shall be mounted into the VMSingle Pods.
    securityContext : any, default is Undefined, optional
        SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
    serviceAccountName : str, default is Undefined, optional
        ServiceAccountName is the name of the ServiceAccount to use to run the VMSingle Pods.
    serviceScrapeSpec : any, default is Undefined, optional
        ServiceScrapeSpec that will be added to vmsingle VMServiceScrape spec
    serviceSpec : OperatorVictoriametricsComV1beta1VMSingleSpecServiceSpec, default is Undefined, optional
        service spec
    startupProbe : any, default is Undefined, optional
        StartupProbe that will be added to CRD pod
    storage : OperatorVictoriametricsComV1beta1VMSingleSpecStorage, default is Undefined, optional
        storage
    storageDataPath : str, default is Undefined, optional
        StorageDataPath disables spec.storage option and overrides arg for victoria-metrics binary --storageDataPath, its users responsibility to mount proper device into given path.
    storageMetadata : OperatorVictoriametricsComV1beta1VMSingleSpecStorageMetadata, default is Undefined, optional
        storage metadata
    streamAggrConfig : OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfig, default is Undefined, optional
        stream aggr config
    terminationGracePeriodSeconds : int, default is Undefined, optional
        TerminationGracePeriodSeconds period for container graceful termination
    tolerations : [OperatorVictoriametricsComV1beta1VMSingleSpecTolerationsItems0], default is Undefined, optional
        Tolerations If specified, the pod's tolerations.
    topologySpreadConstraints : [any], default is Undefined, optional
        TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    vmBackup : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackup, default is Undefined, optional
        vm backup
    volumeMounts : [OperatorVictoriametricsComV1beta1VMSingleSpecVolumeMountsItems0], default is Undefined, optional
        VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMSingle container, that are generated as a result of StorageSpec objects.
    volumes : [any], default is Undefined, optional
        Volumes allows configuration of additional volumes on the output deploy definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
    """


    affinity?: any

    configMaps?: [str]

    containers?: [any]

    dnsConfig?: OperatorVictoriametricsComV1beta1VMSingleSpecDNSConfig

    dnsPolicy?: str

    extraArgs?: {str:str}

    extraEnvs?: [OperatorVictoriametricsComV1beta1VMSingleSpecExtraEnvsItems0]

    hostAliases?: [OperatorVictoriametricsComV1beta1VMSingleSpecHostAliasesItems0]

    hostNetwork?: bool

    image?: OperatorVictoriametricsComV1beta1VMSingleSpecImage

    imagePullSecrets?: [OperatorVictoriametricsComV1beta1VMSingleSpecImagePullSecretsItems0]

    initContainers?: [any]

    insertPorts?: OperatorVictoriametricsComV1beta1VMSingleSpecInsertPorts

    livenessProbe?: any

    logFormat?: "default" | "json"

    logLevel?: "INFO" | "WARN" | "ERROR" | "FATAL" | "PANIC"

    nodeSelector?: {str:str}

    podMetadata?: OperatorVictoriametricsComV1beta1VMSingleSpecPodMetadata

    podSecurityPolicyName?: str

    port?: str

    priorityClassName?: str

    readinessGates?: [OperatorVictoriametricsComV1beta1VMSingleSpecReadinessGatesItems0]

    readinessProbe?: any

    removePvcAfterDelete?: bool

    replicaCount?: int

    resources?: OperatorVictoriametricsComV1beta1VMSingleSpecResources

    retentionPeriod: str

    runtimeClassName?: str

    schedulerName?: str

    secrets?: [str]

    securityContext?: any

    serviceAccountName?: str

    serviceScrapeSpec?: any

    serviceSpec?: OperatorVictoriametricsComV1beta1VMSingleSpecServiceSpec

    startupProbe?: any

    storage?: OperatorVictoriametricsComV1beta1VMSingleSpecStorage

    storageDataPath?: str

    storageMetadata?: OperatorVictoriametricsComV1beta1VMSingleSpecStorageMetadata

    streamAggrConfig?: OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfig

    terminationGracePeriodSeconds?: int

    tolerations?: [OperatorVictoriametricsComV1beta1VMSingleSpecTolerationsItems0]

    topologySpreadConstraints?: [any]

    vmBackup?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackup

    volumeMounts?: [OperatorVictoriametricsComV1beta1VMSingleSpecVolumeMountsItems0]

    volumes?: [any]


schema [any]:
    """
    Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.

    Attributes
    ----------
    nameservers : [str], default is Undefined, optional
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
    options : [OperatorVictoriametricsComV1beta1VMSingleSpecDNSConfigOptionsItems0], default is Undefined, optional
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
    searches : [str], default is Undefined, optional
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
    """


    nameservers?: [str]

    options?: [OperatorVictoriametricsComV1beta1VMSingleSpecDNSConfigOptionsItems0]

    searches?: [str]


schema OperatorVictoriametricsComV1beta1VMSingleSpecDNSConfigOptionsItems0:
    """
    PodDNSConfigOption defines DNS resolver options of a pod.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Required.
    value : str, default is Undefined, optional
        value
    """


    name?: str

    value?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecExtraEnvsItems0:
    """
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    """


    name: str

    value?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecHostAliasesItems0:
    """
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.

    Attributes
    ----------
    hostnames : [str], default is Undefined, optional
        Hostnames for the above IP address.
    ip : str, default is Undefined, optional
        IP address of the host file entry.
    """


    hostnames?: [str]

    ip?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecImage:
    """
    Image - docker image settings for VMSingle if no specified operator uses default config version

    Attributes
    ----------
    pullPolicy : str, default is Undefined, optional
        PullPolicy describes how to pull docker image
    repository : str, default is Undefined, optional
        Repository contains name of docker image + it's repository if needed
    tag : str, default is Undefined, optional
        Tag contains desired docker image version
    """


    pullPolicy?: str

    repository?: str

    tag?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecImagePullSecretsItems0:
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    """


    name?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecInsertPorts:
    """
    InsertPorts - additional listen ports for data ingestion.

    Attributes
    ----------
    graphitePort : str, default is Undefined, optional
        GraphitePort listen port
    influxPort : str, default is Undefined, optional
        InfluxPort listen port
    openTSDBHTTPPort : str, default is Undefined, optional
        OpenTSDBHTTPPort for http connections.
    openTSDBPort : str, default is Undefined, optional
        OpenTSDBPort for tcp and udp listen
    """


    graphitePort?: str

    influxPort?: str

    openTSDBHTTPPort?: str

    openTSDBPort?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecPodMetadata:
    """
    PodMetadata configures Labels and Annotations which are propagated to the VMSingle pods.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    annotations?: {str:str}

    labels?: {str:str}

    name?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecReadinessGatesItems0:
    """
    PodReadinessGate contains the reference to a pod condition

    Attributes
    ----------
    conditionType : str, default is Undefined, required
        ConditionType refers to a condition in the pod's condition list with matching type.
    """


    conditionType: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecResources:
    """
    Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, n in limits { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if limits
        all _, n in requests { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if requests


schema OperatorVictoriametricsComV1beta1VMSingleSpecServiceSpec:
    """
    ServiceSpec that will be added to vmsingle service spec

    Attributes
    ----------
    metadata : OperatorVictoriametricsComV1beta1VMSingleSpecServiceSpecMetadata, default is Undefined, optional
        metadata
    spec : any, default is Undefined, required
        ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    """


    metadata?: OperatorVictoriametricsComV1beta1VMSingleSpecServiceSpecMetadata

    spec: any


schema OperatorVictoriametricsComV1beta1VMSingleSpecServiceSpecMetadata:
    """
    EmbeddedObjectMetadata defines objectMeta for additional service.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    annotations?: {str:str}

    labels?: {str:str}

    name?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorage:
    """
    Storage is the definition of how storage will be used by the VMSingle by default it`s empty dir

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : OperatorVictoriametricsComV1beta1VMSingleSpecStorageDataSource, default is Undefined, optional
        data source
    dataSourceRef : OperatorVictoriametricsComV1beta1VMSingleSpecStorageDataSourceRef, default is Undefined, optional
        data source ref
    resources : OperatorVictoriametricsComV1beta1VMSingleSpecStorageResources, default is Undefined, optional
        resources
    selector : OperatorVictoriametricsComV1beta1VMSingleSpecStorageSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """


    accessModes?: [str]

    dataSource?: OperatorVictoriametricsComV1beta1VMSingleSpecStorageDataSource

    dataSourceRef?: OperatorVictoriametricsComV1beta1VMSingleSpecStorageDataSourceRef

    resources?: OperatorVictoriametricsComV1beta1VMSingleSpecStorageResources

    selector?: OperatorVictoriametricsComV1beta1VMSingleSpecStorageSelector

    storageClassName?: str

    volumeMode?: str

    volumeName?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorageDataSource:
    """
    dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """


    apiGroup?: str

    kind: str

    name: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorageDataSourceRef:
    """
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """


    apiGroup?: str

    kind: str

    name: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorageMetadata:
    """
    StorageMeta defines annotations and labels attached to PVC for given vmsingle CR

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    annotations?: {str:str}

    labels?: {str:str}

    name?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorageResources:
    """
    resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, n in limits { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if limits
        all _, n in requests { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if requests


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorageSelector:
    """
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [OperatorVictoriametricsComV1beta1VMSingleSpecStorageSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorVictoriametricsComV1beta1VMSingleSpecStorageSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorVictoriametricsComV1beta1VMSingleSpecStorageSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfig:
    """
    StreamAggrConfig defines stream aggregation configuration for VMSingle

    Attributes
    ----------
    dedupInterval : str, default is Undefined, optional
        Allows setting different de-duplication intervals per each configured remote storage
    dropInput : bool, default is Undefined, optional
        Allow drop all the input samples after the aggregation
    keepInput : bool, default is Undefined, optional
        Allows writing both raw and aggregate data
    rules : [OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0], default is Undefined, required
        Stream aggregation rules
    """


    dedupInterval?: str

    dropInput?: bool

    keepInput?: bool

    rules: [OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0]


schema OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0:
    """
    StreamAggrRule defines the rule in stream aggregation config

    Attributes
    ----------
    by : [str], default is Undefined, optional
        By is an optional list of labels for grouping input series. 
         See also Without. 
         If neither By nor Without are set, then the Outputs are calculated individually per each input time series.
    input_relabel_configs : [OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0InputRelabelConfigsItems0], default is Undefined, optional
        InputRelabelConfigs is an optional relabeling rules, which are applied on the input before aggregation.
    interval : str, default is Undefined, required
        Interval is the interval between aggregations.
    match : any, default is Undefined, optional
        Match is a label selector (or list of label selectors) for filtering time series for the given selector. 
         If the match isn't set, then all the input time series are processed.
    output_relabel_configs : [OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0OutputRelabelConfigsItems0], default is Undefined, optional
        OutputRelabelConfigs is an optional relabeling rules, which are applied on the aggregated output before being sent to remote storage.
    outputs : [str], default is Undefined, required
        Outputs is a list of output aggregate functions to produce. 
         The following names are allowed: 
         - total - aggregates input counters - increase - counts the increase over input counters - count_series - counts the input series - count_samples - counts the input samples - sum_samples - sums the input samples - last - the last biggest sample value - min - the minimum sample value - max - the maximum sample value - avg - the average value across all the samples - stddev - standard deviation across all the samples - stdvar - standard variance across all the samples - histogram_bucket - creates VictoriaMetrics histogram for input samples - quantiles(phi1, ..., phiN) - quantiles' estimation for phi in the range [0..1] 
         The output time series will have the following names: 
         input_name:aggr_<interval>_<output>
    staleness_interval : str, default is Undefined, optional
        StalenessInterval defines an interval after which the series state will be reset if no samples have been sent during it.
    without : [str], default is Undefined, optional
        Without is an optional list of labels, which must be excluded when grouping input series. 
         See also By. 
         If neither By nor Without are set, then the Outputs are calculated individually per each input time series.
    """


    by?: [str]

    input_relabel_configs?: [OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0InputRelabelConfigsItems0]

    interval: str

    match?: any

    output_relabel_configs?: [OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0OutputRelabelConfigsItems0]

    outputs: [str]

    staleness_interval?: str

    without?: [str]


schema OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0InputRelabelConfigsItems0:
    """
    RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs

    Attributes
    ----------
    action : str, default is Undefined, optional
        Action to perform based on regex matching. Default is 'replace'
    $if : any, default is Undefined, optional
        If represents metricsQL match expression (or list of expressions): '{__name__=~"foo_.*"}'
    labels : {str:str}, default is Undefined, optional
        Labels is used together with Match for `action: graphite`
    match : str, default is Undefined, optional
        Match is used together with Labels for `action: graphite`
    modulus : int, default is Undefined, optional
        Modulus to take of the hash of the source label values.
    regex : str, default is Undefined, optional
        Regular expression against which the extracted value is matched. Default is '(.*)'
    replacement : str, default is Undefined, optional
        Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
    separator : str, default is Undefined, optional
        Separator placed between concatenated source label values. default is ';'.
    sourceLabels : [str], default is Undefined, optional
        The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
    source_labels : [str], default is Undefined, optional
        UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131
    targetLabel : str, default is Undefined, optional
        Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
    target_label : str, default is Undefined, optional
        UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131
    """


    action?: str

    $if?: any

    labels?: {str:str}

    match?: str

    modulus?: int

    regex?: str

    replacement?: str

    separator?: str

    sourceLabels?: [str]

    source_labels?: [str]

    targetLabel?: str

    target_label?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecStreamAggrConfigRulesItems0OutputRelabelConfigsItems0:
    """
    RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs

    Attributes
    ----------
    action : str, default is Undefined, optional
        Action to perform based on regex matching. Default is 'replace'
    $if : any, default is Undefined, optional
        If represents metricsQL match expression (or list of expressions): '{__name__=~"foo_.*"}'
    labels : {str:str}, default is Undefined, optional
        Labels is used together with Match for `action: graphite`
    match : str, default is Undefined, optional
        Match is used together with Labels for `action: graphite`
    modulus : int, default is Undefined, optional
        Modulus to take of the hash of the source label values.
    regex : str, default is Undefined, optional
        Regular expression against which the extracted value is matched. Default is '(.*)'
    replacement : str, default is Undefined, optional
        Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
    separator : str, default is Undefined, optional
        Separator placed between concatenated source label values. default is ';'.
    sourceLabels : [str], default is Undefined, optional
        The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
    source_labels : [str], default is Undefined, optional
        UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131
    targetLabel : str, default is Undefined, optional
        Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
    target_label : str, default is Undefined, optional
        UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131
    """


    action?: str

    $if?: any

    labels?: {str:str}

    match?: str

    modulus?: int

    regex?: str

    replacement?: str

    separator?: str

    sourceLabels?: [str]

    source_labels?: [str]

    targetLabel?: str

    target_label?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecTolerationsItems0:
    """
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackup:
    """
    VMBackup configuration for backup

    Attributes
    ----------
    acceptEULA : bool, default is Undefined, required
        AcceptEULA accepts enterprise feature usage, must be set to true. otherwise backupmanager cannot be added to single/cluster version. https://victoriametrics.com/legal/esa/
    concurrency : int, default is Undefined, optional
        Defines number of concurrent workers. Higher concurrency may reduce backup duration (default 10)
    credentialsSecret : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupCredentialsSecret, default is Undefined, optional
        credentials secret
    customS3Endpoint : str, default is Undefined, optional
        Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set
    destination : str, default is Undefined, optional
        Defines destination for backup
    destinationDisableSuffixAdd : bool, default is Undefined, optional
        DestinationDisableSuffixAdd - disables suffix adding for cluster version backups each vmstorage backup must have unique backup folder so operator adds POD_NAME as suffix for backup destination folder.
    disableDaily : bool, default is Undefined, optional
        Defines if daily backups disabled (default false)
    disableHourly : bool, default is Undefined, optional
        Defines if hourly backups disabled (default false)
    disableMonthly : bool, default is Undefined, optional
        Defines if monthly backups disabled (default false)
    disableWeekly : bool, default is Undefined, optional
        Defines if weekly backups disabled (default false)
    extraArgs : {str:str}, default is Undefined, optional
        extra args like maxBytesPerSecond default 0
    extraEnvs : [OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0], default is Undefined, optional
        extra envs
    image : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupImage, default is Undefined, optional
        image
    logFormat : str, default is Undefined, optional
        LogFormat for VMSelect to be configured with. default or json
    logLevel : str, default is Undefined, optional
        LogLevel for VMSelect to be configured with.
    port : str, default is Undefined, optional
        Port for health check connections
    resources : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupResources, default is Undefined, optional
        resources
    restore : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupRestore, default is Undefined, optional
        restore
    snapshotCreateURL : str, default is Undefined, optional
        SnapshotCreateURL overwrites url for snapshot create
    snapshotDeleteURL : str, default is Undefined, optional
        SnapShotDeleteURL overwrites url for snapshot delete
    volumeMounts : [OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupVolumeMountsItems0], default is Undefined, optional
        VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the vmbackupmanager container, that are generated as a result of StorageSpec objects.
    """


    acceptEULA: bool

    concurrency?: int

    credentialsSecret?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupCredentialsSecret

    customS3Endpoint?: str

    destination?: str

    destinationDisableSuffixAdd?: bool

    disableDaily?: bool

    disableHourly?: bool

    disableMonthly?: bool

    disableWeekly?: bool

    extraArgs?: {str:str}

    extraEnvs?: [OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0]

    image?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupImage

    logFormat?: "default" | "json"

    logLevel?: "INFO" | "WARN" | "ERROR" | "FATAL" | "PANIC"

    port?: str

    resources?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupResources

    restore?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupRestore

    snapshotCreateURL?: str

    snapshotDeleteURL?: str

    volumeMounts?: [OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupVolumeMountsItems0]


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupCredentialsSecret:
    """
    CredentialsSecret is secret in the same namespace for access to remote storage The secret is mounted into /etc/vm/creds.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0:
    """
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    valueFrom : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFrom


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFrom:
    """
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromConfigMapKeyRef

    fieldRef?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromFieldRef

    resourceFieldRef?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromResourceFieldRef

    secretKeyRef?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromSecretKeyRef


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromConfigMapKeyRef:
    """
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromFieldRef:
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromResourceFieldRef:
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        regex.match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupExtraEnvsItems0ValueFromSecretKeyRef:
    """
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupImage:
    """
    Image - docker image settings for VMBackuper

    Attributes
    ----------
    pullPolicy : str, default is Undefined, optional
        PullPolicy describes how to pull docker image
    repository : str, default is Undefined, optional
        Repository contains name of docker image + it's repository if needed
    tag : str, default is Undefined, optional
        Tag contains desired docker image version
    """


    pullPolicy?: str

    repository?: str

    tag?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupResources:
    """
    Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, n in limits { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if limits
        all _, n in requests { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if requests


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupRestore:
    """
    Restore Allows to enable restore options for pod Read more: https://docs.victoriametrics.com/vmbackupmanager.html#restore-commands

    Attributes
    ----------
    onStart : OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupRestoreOnStart, default is Undefined, optional
        on start
    """


    onStart?: OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupRestoreOnStart


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupRestoreOnStart:
    """
    OnStart defines configuration for restore on pod start

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Enabled defines if restore on start enabled
    """


    enabled?: bool


schema OperatorVictoriametricsComV1beta1VMSingleSpecVMBackupVolumeMountsItems0:
    """
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    subPath?: str

    subPathExpr?: str


schema OperatorVictoriametricsComV1beta1VMSingleSpecVolumeMountsItems0:
    """
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    subPath?: str

    subPathExpr?: str


schema OperatorVictoriametricsComV1beta1VMSingleStatus:
    """
    VMSingleStatus defines the observed state of VMSingle

    Attributes
    ----------
    availableReplicas : int, default is Undefined, required
        AvailableReplicas Total number of available pods (ready for at least minReadySeconds) targeted by this VMSingle.
    reason : str, default is Undefined, optional
        reason
    replicas : int, default is Undefined, required
        ReplicaCount Total number of non-terminated pods targeted by this VMSingle.
    singleStatus : str, default is Undefined, required
        single status
    unavailableReplicas : int, default is Undefined, required
        UnavailableReplicas Total number of unavailable pods targeted by this VMSingle.
    updatedReplicas : int, default is Undefined, required
        UpdatedReplicas Total number of non-terminated pods targeted by this VMSingle.
    """


    availableReplicas: int

    reason?: str

    replicas: int

    singleStatus: str

    unavailableReplicas: int

    updatedReplicas: int


