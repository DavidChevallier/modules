"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema OpenIDConnectProvider:
    """
    OpenIDConnectProvider is the Schema for the OpenIDConnectProviders API

    Attributes
    ----------
    apiVersion : str, default is "iam.services.k8s.aws/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "OpenIDConnectProvider", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : IamServicesK8sAwsV1alpha1OpenIDConnectProviderSpec, default is Undefined, optional
        spec
    status : IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatus, default is Undefined, optional
        status
    """


    apiVersion: "iam.services.k8s.aws/v1alpha1" = "iam.services.k8s.aws/v1alpha1"

    kind: "OpenIDConnectProvider" = "OpenIDConnectProvider"

    metadata?: v1.ObjectMeta

    spec?: IamServicesK8sAwsV1alpha1OpenIDConnectProviderSpec

    status?: IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatus


schema IamServicesK8sAwsV1alpha1OpenIDConnectProviderSpec:
    """
    OpenIDConnectProviderSpec defines the desired state of OpenIDConnectProvider.

    Attributes
    ----------
    clientIDs : [str], default is Undefined, optional
        Provides a list of client IDs, also known as audiences. When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. This is the value that's sent as the client_id parameter on OAuth requests. 
         You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider. 
         There is no defined format for a client ID. The CreateOpenIDConnectProviderRequest operation accepts client IDs up to 255 characters long.
    tags : [IamServicesK8sAwsV1alpha1OpenIDConnectProviderSpecTagsItems0], default is Undefined, optional
        A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider. Each tag consists of a key name and an associated value. For more information about tagging, see Tagging IAM resources (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide. 
         If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
    thumbprints : [str], default is Undefined, required
        A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificates. Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates. 
         The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string. 
         You must provide at least one thumbprint when creating an IAM OIDC provider. For example, assume that the OIDC provider is server.example.com and the provider stores its keys at https://keys.server.example.com/openid-connect. In that case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by https://keys.server.example.com. 
         For more information about obtaining the OIDC provider thumbprint, see Obtaining the thumbprint for an OpenID Connect provider (https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html) in the IAM User Guide.
    url : str, default is Undefined, required
        The URL of the identity provider. The URL must begin with https:// and should correspond to the iss claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like https://server.example.org or https://example.com. The URL should not contain a port number. 
         You cannot register the same provider multiple times in a single Amazon Web Services account. If you try to submit a URL that has already been used for an OpenID Connect provider in the Amazon Web Services account, you will get an error.
    """


    clientIDs?: [str]

    tags?: [IamServicesK8sAwsV1alpha1OpenIDConnectProviderSpecTagsItems0]

    thumbprints: [str]

    url: str


schema IamServicesK8sAwsV1alpha1OpenIDConnectProviderSpecTagsItems0:
    """
    A structure that represents user-provided metadata that can be associated with an IAM resource. For more information about tagging, see Tagging IAM resources (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    value : str, default is Undefined, optional
        value
    """


    key?: str

    value?: str


schema IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatus:
    """
    OpenIDConnectProviderStatus defines the observed state of OpenIDConnectProvider

    Attributes
    ----------
    ackResourceMetadata : IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatusAckResourceMetadata, default is Undefined, optional
        ack resource metadata
    conditions : [IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatusConditionsItems0], default is Undefined, optional
        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    """


    ackResourceMetadata?: IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatusAckResourceMetadata

    conditions?: [IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatusConditionsItems0]


schema IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatusAckResourceMetadata:
    """
    All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    ownerAccountID : str, default is Undefined, required
        OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    region : str, default is Undefined, required
        Region is the AWS region in which the resource exists or will exist.
    """


    arn?: str

    ownerAccountID: str

    region: str


schema IamServicesK8sAwsV1alpha1OpenIDConnectProviderStatusConditionsItems0:
    """
    Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type is the type of the Condition
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status: str

    $type: str


