"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Kibana:
    """
    Kibana represents a Kibana resource in a Kubernetes cluster.

    Attributes
    ----------
    apiVersion : str, default is "kibana.k8s.elastic.co/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Kibana", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KibanaK8sElasticCoV1beta1KibanaSpec, default is Undefined, optional
        spec
    status : KibanaK8sElasticCoV1beta1KibanaStatus, default is Undefined, optional
        status
    """


    apiVersion: "kibana.k8s.elastic.co/v1beta1" = "kibana.k8s.elastic.co/v1beta1"

    kind: "Kibana" = "Kibana"

    metadata?: v1.ObjectMeta

    spec?: KibanaK8sElasticCoV1beta1KibanaSpec

    status?: KibanaK8sElasticCoV1beta1KibanaStatus


schema KibanaK8sElasticCoV1beta1KibanaSpec:
    """
    KibanaSpec holds the specification of a Kibana instance.

    Attributes
    ----------
    config : any, default is Undefined, optional
        Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
    count : int, default is Undefined, optional
        Count of Kibana instances to deploy.
    elasticsearchRef : KibanaK8sElasticCoV1beta1KibanaSpecElasticsearchRef, default is Undefined, optional
        elasticsearch ref
    http : KibanaK8sElasticCoV1beta1KibanaSpecHTTP, default is Undefined, optional
        http
    image : str, default is Undefined, optional
        Image is the Kibana Docker image to deploy.
    podTemplate : any, default is Undefined, optional
        PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
    secureSettings : [KibanaK8sElasticCoV1beta1KibanaSpecSecureSettingsItems0], default is Undefined, optional
        SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
    version : str, default is Undefined, optional
        Version of Kibana.
    """


    config?: any

    count?: int

    elasticsearchRef?: KibanaK8sElasticCoV1beta1KibanaSpecElasticsearchRef

    http?: KibanaK8sElasticCoV1beta1KibanaSpecHTTP

    image?: str

    podTemplate?: any

    secureSettings?: [KibanaK8sElasticCoV1beta1KibanaSpecSecureSettingsItems0]

    version?: str


schema KibanaK8sElasticCoV1beta1KibanaSpecElasticsearchRef:
    """
    ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the Kubernetes object.
    namespace : str, default is Undefined, optional
        Namespace of the Kubernetes object. If empty, defaults to the current namespace.
    """


    name: str

    namespace?: str


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTP:
    """
    HTTP holds the HTTP layer configuration for Kibana.

    Attributes
    ----------
    service : KibanaK8sElasticCoV1beta1KibanaSpecHTTPService, default is Undefined, optional
        service
    tls : KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLS, default is Undefined, optional
        tls
    """


    service?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPService

    tls?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLS


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPService:
    """
    Service defines the template for the associated Kubernetes Service object.

    Attributes
    ----------
    metadata : KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceMetadata, default is Undefined, optional
        metadata
    spec : KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpec, default is Undefined, optional
        spec
    """


    metadata?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceMetadata

    spec?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpec


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceMetadata:
    """
    ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        annotations
    finalizers : [str], default is Undefined, optional
        finalizers
    labels : {str:str}, default is Undefined, optional
        labels
    name : str, default is Undefined, optional
        name
    namespace : str, default is Undefined, optional
        namespace
    """


    annotations?: {str:str}

    finalizers?: [str]

    labels?: {str:str}

    name?: str

    namespace?: str


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpec:
    """
    Spec is the specification of the service.

    Attributes
    ----------
    allocateLoadBalancerNodePorts : bool, default is Undefined, optional
        allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
    clusterIP : str, default is Undefined, optional
        clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    clusterIPs : [str], default is Undefined, optional
        ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value. 
         This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    externalIPs : [str], default is Undefined, optional
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    externalName : str, default is Undefined, optional
        externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
    externalTrafficPolicy : str, default is Undefined, optional
        externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
    healthCheckNodePort : int, default is Undefined, optional
        healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
    internalTrafficPolicy : str, default is Undefined, optional
        InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints. "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is "Cluster".
    ipFamilies : [str], default is Undefined, optional
        IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName. 
         This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
    ipFamilyPolicy : str, default is Undefined, optional
        IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.
    loadBalancerClass : str, default is Undefined, optional
        loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
    loadBalancerIP : str, default is Undefined, optional
        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
    loadBalancerSourceRanges : [str], default is Undefined, optional
        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
    ports : [KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecPortsItems0], default is Undefined, optional
        The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    publishNotReadyAddresses : bool, default is Undefined, optional
        publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
    selector : {str:str}, default is Undefined, optional
        Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    sessionAffinity : str, default is Undefined, optional
        Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    sessionAffinityConfig : KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecSessionAffinityConfig, default is Undefined, optional
        session affinity config
    $type : str, default is Undefined, optional
        type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    """


    allocateLoadBalancerNodePorts?: bool

    clusterIP?: str

    clusterIPs?: [str]

    externalIPs?: [str]

    externalName?: str

    externalTrafficPolicy?: str

    healthCheckNodePort?: int

    internalTrafficPolicy?: str

    ipFamilies?: [str]

    ipFamilyPolicy?: str

    loadBalancerClass?: str

    loadBalancerIP?: str

    loadBalancerSourceRanges?: [str]

    ports?: [KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecPortsItems0]

    publishNotReadyAddresses?: bool

    selector?: {str:str}

    sessionAffinity?: str

    sessionAffinityConfig?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecSessionAffinityConfig

    $type?: str


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecPortsItems0:
    """
    ServicePort contains information on service's port.

    Attributes
    ----------
    appProtocol : str, default is Undefined, optional
        The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
    name : str, default is Undefined, optional
        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
    nodePort : int, default is Undefined, optional
        The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    port : int, default is Undefined, required
        The port that will be exposed by this service.
    $protocol : str, default is "TCP", optional
        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
    targetPort : int | str, default is Undefined, optional
        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
    """


    appProtocol?: str

    name?: str

    nodePort?: int

    port: int

    $protocol?: str = "TCP"

    targetPort?: int | str


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecSessionAffinityConfig:
    """
    sessionAffinityConfig contains the configurations of session affinity.

    Attributes
    ----------
    clientIP : KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecSessionAffinityConfigClientIP, default is Undefined, optional
        client IP
    """


    clientIP?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecSessionAffinityConfigClientIP


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPServiceSpecSessionAffinityConfigClientIP:
    """
    clientIP contains the configurations of Client IP based session affinity.

    Attributes
    ----------
    timeoutSeconds : int, default is Undefined, optional
        timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
    """


    timeoutSeconds?: int


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLS:
    """
    TLS defines options for configuring TLS for HTTP.

    Attributes
    ----------
    certificate : KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSCertificate, default is Undefined, optional
        certificate
    selfSignedCertificate : KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSSelfSignedCertificate, default is Undefined, optional
        self signed certificate
    """


    certificate?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSCertificate

    selfSignedCertificate?: KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSSelfSignedCertificate


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSCertificate:
    """
    Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
     - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.

    Attributes
    ----------
    secretName : str, default is Undefined, optional
        SecretName is the name of the secret.
    """


    secretName?: str


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSSelfSignedCertificate:
    """
    SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.

    Attributes
    ----------
    disabled : bool, default is Undefined, optional
        Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
    subjectAltNames : [KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSSelfSignedCertificateSubjectAltNamesItems0], default is Undefined, optional
        SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
    """


    disabled?: bool

    subjectAltNames?: [KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSSelfSignedCertificateSubjectAltNamesItems0]


schema KibanaK8sElasticCoV1beta1KibanaSpecHTTPTLSSelfSignedCertificateSubjectAltNamesItems0:
    """
    SubjectAlternativeName represents a SAN entry in a x509 certificate.

    Attributes
    ----------
    dns : str, default is Undefined, optional
        DNS is the DNS name of the subject.
    ip : str, default is Undefined, optional
        IP is the IP address of the subject.
    """


    dns?: str

    ip?: str


schema KibanaK8sElasticCoV1beta1KibanaSpecSecureSettingsItems0:
    """
    SecretSource defines a data source based on a Kubernetes Secret.

    Attributes
    ----------
    entries : [KibanaK8sElasticCoV1beta1KibanaSpecSecureSettingsItems0EntriesItems0], default is Undefined, optional
        Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
    secretName : str, default is Undefined, required
        SecretName is the name of the secret.
    """


    entries?: [KibanaK8sElasticCoV1beta1KibanaSpecSecureSettingsItems0EntriesItems0]

    secretName: str


schema KibanaK8sElasticCoV1beta1KibanaSpecSecureSettingsItems0EntriesItems0:
    """
    KeyToPath defines how to map a key in a Secret object to a filesystem path.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key contained in the secret.
    path : str, default is Undefined, optional
        Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
    """


    key: str

    path?: str


schema KibanaK8sElasticCoV1beta1KibanaStatus:
    """
    KibanaStatus defines the observed state of Kibana

    Attributes
    ----------
    associationStatus : str, default is Undefined, optional
        AssociationStatus is the status of an association resource.
    availableNodes : int, default is Undefined, optional
        available nodes
    health : str, default is Undefined, optional
        KibanaHealth expresses the status of the Kibana instances.
    """


    associationStatus?: str

    availableNodes?: int

    health?: str


