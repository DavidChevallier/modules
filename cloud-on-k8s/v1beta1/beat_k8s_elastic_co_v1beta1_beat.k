"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema Beat:
    """
    Beat is the Schema for the Beats API.

    Attributes
    ----------
    apiVersion : str, default is "beat.k8s.elastic.co/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Beat", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : BeatK8sElasticCoV1beta1BeatSpec, default is Undefined, optional
        spec
    status : BeatK8sElasticCoV1beta1BeatStatus, default is Undefined, optional
        status
    """


    apiVersion: "beat.k8s.elastic.co/v1beta1" = "beat.k8s.elastic.co/v1beta1"

    kind: "Beat" = "Beat"

    metadata?: v1.ObjectMeta

    spec?: BeatK8sElasticCoV1beta1BeatSpec

    status?: BeatK8sElasticCoV1beta1BeatStatus


schema BeatK8sElasticCoV1beta1BeatSpec:
    """
    BeatSpec defines the desired state of a Beat.

    Attributes
    ----------
    config : any, default is Undefined, optional
        Config holds the Beat configuration. At most one of [`Config`, `ConfigRef`] can be specified.
    configRef : BeatK8sElasticCoV1beta1BeatSpecConfigRef, default is Undefined, optional
        config ref
    daemonSet : BeatK8sElasticCoV1beta1BeatSpecDaemonSet, default is Undefined, optional
        daemon set
    deployment : BeatK8sElasticCoV1beta1BeatSpecDeployment, default is Undefined, optional
        deployment
    elasticsearchRef : BeatK8sElasticCoV1beta1BeatSpecElasticsearchRef, default is Undefined, optional
        elasticsearch ref
    image : str, default is Undefined, optional
        Image is the Beat Docker image to deploy. Version and Type have to match the Beat in the image.
    kibanaRef : BeatK8sElasticCoV1beta1BeatSpecKibanaRef, default is Undefined, optional
        kibana ref
    secureSettings : [BeatK8sElasticCoV1beta1BeatSpecSecureSettingsItems0], default is Undefined, optional
        SecureSettings is a list of references to Kubernetes Secrets containing sensitive configuration options for the Beat. Secrets data can be then referenced in the Beat config using the Secret's keys or as specified in `Entries` field of each SecureSetting.
    serviceAccountName : str, default is Undefined, optional
        ServiceAccountName is used to check access from the current resource to Elasticsearch resource in a different namespace. Can only be used if ECK is enforcing RBAC on references.
    $type : str, default is Undefined, required
        Type is the type of the Beat to deploy (filebeat, metricbeat, heartbeat, auditbeat, journalbeat, packetbeat, and so on). Any string can be used, but well-known types will have the image field defaulted and have the appropriate Elasticsearch roles created automatically. It also allows for dashboard setup when combined with a `KibanaRef`.
    version : str, default is Undefined, required
        Version of the Beat.
    """


    config?: any

    configRef?: BeatK8sElasticCoV1beta1BeatSpecConfigRef

    daemonSet?: BeatK8sElasticCoV1beta1BeatSpecDaemonSet

    deployment?: BeatK8sElasticCoV1beta1BeatSpecDeployment

    elasticsearchRef?: BeatK8sElasticCoV1beta1BeatSpecElasticsearchRef

    image?: str

    kibanaRef?: BeatK8sElasticCoV1beta1BeatSpecKibanaRef

    secureSettings?: [BeatK8sElasticCoV1beta1BeatSpecSecureSettingsItems0]

    serviceAccountName?: str

    $type: str

    version: str


    check:
        len($type) <= 20
        regex.match(str($type), r"[a-zA-Z0-9-]+")


schema BeatK8sElasticCoV1beta1BeatSpecConfigRef:
    """
    ConfigRef contains a reference to an existing Kubernetes Secret holding the Beat configuration. Beat settings must be specified as yaml, under a single "beat.yml" entry. At most one of [`Config`, `ConfigRef`] can be specified.

    Attributes
    ----------
    secretName : str, default is Undefined, optional
        SecretName is the name of the secret.
    """


    secretName?: str


schema BeatK8sElasticCoV1beta1BeatSpecDaemonSet:
    """
    DaemonSet specifies the Beat should be deployed as a DaemonSet, and allows providing its spec. Cannot be used along with `deployment`. If both are absent a default for the Type is used.

    Attributes
    ----------
    podTemplate : any, default is Undefined, optional
        PodTemplateSpec describes the data a pod should have when created from a template
    updateStrategy : BeatK8sElasticCoV1beta1BeatSpecDaemonSetUpdateStrategy, default is Undefined, optional
        update strategy
    """


    podTemplate?: any

    updateStrategy?: BeatK8sElasticCoV1beta1BeatSpecDaemonSetUpdateStrategy


schema BeatK8sElasticCoV1beta1BeatSpecDaemonSetUpdateStrategy:
    """
    DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.

    Attributes
    ----------
    rollingUpdate : BeatK8sElasticCoV1beta1BeatSpecDaemonSetUpdateStrategyRollingUpdate, default is Undefined, optional
        rolling update
    $type : str, default is Undefined, optional
        Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
    """


    rollingUpdate?: BeatK8sElasticCoV1beta1BeatSpecDaemonSetUpdateStrategyRollingUpdate

    $type?: str


schema BeatK8sElasticCoV1beta1BeatSpecDaemonSetUpdateStrategyRollingUpdate:
    """
    Rolling update config params. Present only if type = "RollingUpdate". --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345

    Attributes
    ----------
    maxSurge : int | str, default is Undefined, optional
        The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.
    maxUnavailable : int | str, default is Undefined, optional
        The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    """


    maxSurge?: int | str

    maxUnavailable?: int | str


schema BeatK8sElasticCoV1beta1BeatSpecDeployment:
    """
    Deployment specifies the Beat should be deployed as a Deployment, and allows providing its spec. Cannot be used along with `daemonSet`. If both are absent a default for the Type is used.

    Attributes
    ----------
    podTemplate : any, default is Undefined, optional
        PodTemplateSpec describes the data a pod should have when created from a template
    replicas : int, default is Undefined, optional
        replicas
    strategy : BeatK8sElasticCoV1beta1BeatSpecDeploymentStrategy, default is Undefined, optional
        strategy
    """


    podTemplate?: any

    replicas?: int

    strategy?: BeatK8sElasticCoV1beta1BeatSpecDeploymentStrategy


schema BeatK8sElasticCoV1beta1BeatSpecDeploymentStrategy:
    """
    DeploymentStrategy describes how to replace existing pods with new ones.

    Attributes
    ----------
    rollingUpdate : BeatK8sElasticCoV1beta1BeatSpecDeploymentStrategyRollingUpdate, default is Undefined, optional
        rolling update
    $type : str, default is Undefined, optional
        Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
    """


    rollingUpdate?: BeatK8sElasticCoV1beta1BeatSpecDeploymentStrategyRollingUpdate

    $type?: str


schema BeatK8sElasticCoV1beta1BeatSpecDeploymentStrategyRollingUpdate:
    """
    Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.

    Attributes
    ----------
    maxSurge : int | str, default is Undefined, optional
        The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
    maxUnavailable : int | str, default is Undefined, optional
        The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    """


    maxSurge?: int | str

    maxUnavailable?: int | str


schema BeatK8sElasticCoV1beta1BeatSpecElasticsearchRef:
    """
    ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
    namespace : str, default is Undefined, optional
        Namespace of the Kubernetes object. If empty, defaults to the current namespace.
    secretName : str, default is Undefined, optional
        SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
    serviceName : str, default is Undefined, optional
        ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
    """


    name?: str

    namespace?: str

    secretName?: str

    serviceName?: str


schema BeatK8sElasticCoV1beta1BeatSpecKibanaRef:
    """
    KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows automatic setup of dashboards and visualizations.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
    namespace : str, default is Undefined, optional
        Namespace of the Kubernetes object. If empty, defaults to the current namespace.
    secretName : str, default is Undefined, optional
        SecretName is the name of an existing Kubernetes secret that contains connection information for associating an Elastic resource not managed by the operator. The referenced secret must contain the following: - `url`: the URL to reach the Elastic resource - `username`: the username of the user to be authenticated to the Elastic resource - `password`: the password of the user to be authenticated to the Elastic resource - `ca.crt`: the CA certificate in PEM format (optional). This field cannot be used in combination with the other fields name, namespace or serviceName.
    serviceName : str, default is Undefined, optional
        ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of the referenced resource is used.
    """


    name?: str

    namespace?: str

    secretName?: str

    serviceName?: str


schema BeatK8sElasticCoV1beta1BeatSpecSecureSettingsItems0:
    """
    SecretSource defines a data source based on a Kubernetes Secret.

    Attributes
    ----------
    entries : [BeatK8sElasticCoV1beta1BeatSpecSecureSettingsItems0EntriesItems0], default is Undefined, optional
        Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
    secretName : str, default is Undefined, required
        SecretName is the name of the secret.
    """


    entries?: [BeatK8sElasticCoV1beta1BeatSpecSecureSettingsItems0EntriesItems0]

    secretName: str


schema BeatK8sElasticCoV1beta1BeatSpecSecureSettingsItems0EntriesItems0:
    """
    KeyToPath defines how to map a key in a Secret object to a filesystem path.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key contained in the secret.
    path : str, default is Undefined, optional
        Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
    """


    key: str

    path?: str


schema BeatK8sElasticCoV1beta1BeatStatus:
    """
    BeatStatus defines the observed state of a Beat.

    Attributes
    ----------
    availableNodes : int, default is Undefined, optional
        available nodes
    elasticsearchAssociationStatus : str, default is Undefined, optional
        AssociationStatus is the status of an association resource.
    expectedNodes : int, default is Undefined, optional
        expected nodes
    health : str, default is Undefined, optional
        health
    kibanaAssociationStatus : str, default is Undefined, optional
        AssociationStatus is the status of an association resource.
    version : str, default is Undefined, optional
        Version of the stack resource currently running. During version upgrades, multiple versions may run in parallel: this value specifies the lowest version currently running.
    """


    availableNodes?: int

    elasticsearchAssociationStatus?: str

    expectedNodes?: int

    health?: str

    kibanaAssociationStatus?: str

    version?: str


