"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Function:
    """
    Function is the Schema for the Functions API. Creates a new Cloud Function.

    Attributes
    ----------
    apiVersion : str, default is "cloudfunctions.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Function", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CloudfunctionsGcpUpboundIoV1beta1FunctionSpec, default is Undefined, required
        spec
    status : CloudfunctionsGcpUpboundIoV1beta1FunctionStatus, default is Undefined, optional
        status
    """


    apiVersion: "cloudfunctions.gcp.upbound.io/v1beta1" = "cloudfunctions.gcp.upbound.io/v1beta1"

    kind: "Function" = "Function"

    metadata?: v1.ObjectMeta

    spec: CloudfunctionsGcpUpboundIoV1beta1FunctionSpec

    status?: CloudfunctionsGcpUpboundIoV1beta1FunctionStatus


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpec:
    """
    FunctionSpec defines the desired state of Function

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProvider, default is Undefined, required
        for provider
    initProvider : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProvider

    initProvider?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecProviderConfigRef

    publishConnectionDetailsTo?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecWriteConnectionSecretToRef


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProvider:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider

    Attributes
    ----------
    availableMemoryMb : float, default is Undefined, optional
        Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
    buildEnvironmentVariables : {str:str}, default is Undefined, optional
        A set of key/value environment variable pairs available during build time.
    buildWorkerPool : str, default is Undefined, optional
        Name of the Cloud Build Custom Worker Pool that should be used to build the function.
    description : str, default is Undefined, optional
        Description of the function.
    dockerRegistry : str, default is Undefined, optional
        Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
    dockerRepository : str, default is Undefined, optional
        User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, Container Registry will be used by default, unless specified otherwise by other means.
    entryPoint : str, default is Undefined, optional
        Name of the function that will be executed when the Google Cloud Function is triggered.
    environmentVariables : {str:str}, default is Undefined, optional
        A set of key/value environment variable pairs to assign to the function.
    eventTrigger : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderEventTriggerItems0], default is Undefined, optional
        A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
    httpsTriggerSecurityLevel : str, default is Undefined, optional
        The security level for the function. The following options are available:
    httpsTriggerUrl : str, default is Undefined, optional
        URL which triggers function execution. Returned only if trigger_http is used.
    ingressSettings : str, default is Undefined, optional
        String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
    kmsKeyName : str, default is Undefined, optional
        Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
        If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
    labels : {str:str}, default is Undefined, optional
        A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
    maxInstances : float, default is Undefined, optional
        The limit on the maximum number of function instances that may coexist at a given time.
    minInstances : float, default is Undefined, optional
        The limit on the minimum number of function instances that may coexist at a given time.
    project : str, default is Undefined, optional
        Project of the function. If it is not provided, the provider project is used.
    region : str, default is Undefined, required
        Region of function. If it is not provided, the provider region is used.
    runtime : str, default is Undefined, optional
        The runtime in which the function is going to run.
        Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
    secretEnvironmentVariables : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretEnvironmentVariablesItems0], default is Undefined, optional
        Secret environment variables configuration. Structure is documented below.
    secretVolumes : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretVolumesItems0], default is Undefined, optional
        Secret volumes configuration. Structure is documented below.
    serviceAccountEmail : str, default is Undefined, optional
        If provided, the self-provided service account to run the function with.
    sourceArchiveBucket : str, default is Undefined, optional
        The GCS bucket containing the zip archive which contains the function.
    sourceArchiveBucketRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketRef, default is Undefined, optional
        source archive bucket ref
    sourceArchiveBucketSelector : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketSelector, default is Undefined, optional
        source archive bucket selector
    sourceArchiveObject : str, default is Undefined, optional
        The source archive object (file) in archive bucket.
    sourceArchiveObjectRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectRef, default is Undefined, optional
        source archive object ref
    sourceArchiveObjectSelector : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectSelector, default is Undefined, optional
        source archive object selector
    sourceRepository : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceRepositoryItems0], default is Undefined, optional
        Represents parameters related to source repository where a function is hosted.
        Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
    timeout : float, default is Undefined, optional
        Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
    triggerHttp : bool, default is Undefined, optional
        Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
    vpcConnector : str, default is Undefined, optional
        The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
    vpcConnectorEgressSettings : str, default is Undefined, optional
        The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
    """


    availableMemoryMb?: float

    buildEnvironmentVariables?: {str:str}

    buildWorkerPool?: str

    description?: str

    dockerRegistry?: str

    dockerRepository?: str

    entryPoint?: str

    environmentVariables?: {str:str}

    eventTrigger?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderEventTriggerItems0]

    httpsTriggerSecurityLevel?: str

    httpsTriggerUrl?: str

    ingressSettings?: str

    kmsKeyName?: str

    labels?: {str:str}

    maxInstances?: float

    minInstances?: float

    project?: str

    region: str

    runtime?: str

    secretEnvironmentVariables?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretEnvironmentVariablesItems0]

    secretVolumes?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretVolumesItems0]

    serviceAccountEmail?: str

    sourceArchiveBucket?: str

    sourceArchiveBucketRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketRef

    sourceArchiveBucketSelector?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketSelector

    sourceArchiveObject?: str

    sourceArchiveObjectRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectRef

    sourceArchiveObjectSelector?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectSelector

    sourceRepository?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceRepositoryItems0]

    timeout?: float

    triggerHttp?: bool

    vpcConnector?: str

    vpcConnectorEgressSettings?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderEventTriggerItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider event trigger items0

    Attributes
    ----------
    eventType : str, default is Undefined, optional
        The type of event to observe. For example: "google.storage.object.finalize".
        See the documentation on calling Cloud Functions for a
        full reference of accepted triggers.
    failurePolicy : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderEventTriggerItems0FailurePolicyItems0], default is Undefined, optional
        Specifies policy for failed executions. Structure is documented below.
    resource : str, default is Undefined, optional
        Required. The name or partial URI of the resource from
        which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
    """


    eventType?: str

    failurePolicy?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderEventTriggerItems0FailurePolicyItems0]

    resource?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderEventTriggerItems0FailurePolicyItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider event trigger items0 failure policy items0

    Attributes
    ----------
    retry : bool, default is Undefined, optional
        Whether the function should be retried on failure. Defaults to false.
    """


    retry?: bool


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretEnvironmentVariablesItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider secret environment variables items0

    Attributes
    ----------
    key : str, default is Undefined, optional
        Name of the environment variable.
    projectId : str, default is Undefined, optional
        Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    secret : str, default is Undefined, optional
        ID of the secret in secret manager (not the full resource name).
    version : str, default is Undefined, optional
        Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
    """


    key?: str

    projectId?: str

    secret?: str

    version?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretVolumesItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider secret volumes items0

    Attributes
    ----------
    mountPath : str, default is Undefined, optional
        The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
    projectId : str, default is Undefined, optional
        Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    secret : str, default is Undefined, optional
        ID of the secret in secret manager (not the full resource name).
    versions : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretVolumesItems0VersionsItems0], default is Undefined, optional
        List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
    """


    mountPath?: str

    projectId?: str

    secret?: str

    versions?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretVolumesItems0VersionsItems0]


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSecretVolumesItems0VersionsItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider secret volumes items0 versions items0

    Attributes
    ----------
    path : str, default is Undefined, optional
        Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
    version : str, default is Undefined, optional
        Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
    """


    path?: str

    version?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketRef:
    """
    Reference to a Bucket in storage to populate sourceArchiveBucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketRefPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketSelector:
    """
    Selector for a Bucket in storage to populate sourceArchiveBucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketSelectorPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveBucketSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectRef:
    """
    Reference to a BucketObject in storage to populate sourceArchiveObject.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectRefPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectSelector:
    """
    Selector for a BucketObject in storage to populate sourceArchiveObject.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectSelectorPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceArchiveObjectSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecForProviderSourceRepositoryItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec for provider source repository items0

    Attributes
    ----------
    url : str, default is Undefined, optional
        The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
    """


    url?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProvider:
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    availableMemoryMb : float, default is Undefined, optional
        Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
    buildEnvironmentVariables : {str:str}, default is Undefined, optional
        A set of key/value environment variable pairs available during build time.
    buildWorkerPool : str, default is Undefined, optional
        Name of the Cloud Build Custom Worker Pool that should be used to build the function.
    description : str, default is Undefined, optional
        Description of the function.
    dockerRegistry : str, default is Undefined, optional
        Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
    dockerRepository : str, default is Undefined, optional
        User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, Container Registry will be used by default, unless specified otherwise by other means.
    entryPoint : str, default is Undefined, optional
        Name of the function that will be executed when the Google Cloud Function is triggered.
    environmentVariables : {str:str}, default is Undefined, optional
        A set of key/value environment variable pairs to assign to the function.
    eventTrigger : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderEventTriggerItems0], default is Undefined, optional
        A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
    httpsTriggerSecurityLevel : str, default is Undefined, optional
        The security level for the function. The following options are available:
    httpsTriggerUrl : str, default is Undefined, optional
        URL which triggers function execution. Returned only if trigger_http is used.
    ingressSettings : str, default is Undefined, optional
        String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
    kmsKeyName : str, default is Undefined, optional
        Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
        If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
    labels : {str:str}, default is Undefined, optional
        A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
    maxInstances : float, default is Undefined, optional
        The limit on the maximum number of function instances that may coexist at a given time.
    minInstances : float, default is Undefined, optional
        The limit on the minimum number of function instances that may coexist at a given time.
    project : str, default is Undefined, optional
        Project of the function. If it is not provided, the provider project is used.
    runtime : str, default is Undefined, optional
        The runtime in which the function is going to run.
        Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
    secretEnvironmentVariables : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretEnvironmentVariablesItems0], default is Undefined, optional
        Secret environment variables configuration. Structure is documented below.
    secretVolumes : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretVolumesItems0], default is Undefined, optional
        Secret volumes configuration. Structure is documented below.
    serviceAccountEmail : str, default is Undefined, optional
        If provided, the self-provided service account to run the function with.
    sourceArchiveBucket : str, default is Undefined, optional
        The GCS bucket containing the zip archive which contains the function.
    sourceArchiveBucketRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketRef, default is Undefined, optional
        source archive bucket ref
    sourceArchiveBucketSelector : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketSelector, default is Undefined, optional
        source archive bucket selector
    sourceArchiveObject : str, default is Undefined, optional
        The source archive object (file) in archive bucket.
    sourceArchiveObjectRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectRef, default is Undefined, optional
        source archive object ref
    sourceArchiveObjectSelector : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectSelector, default is Undefined, optional
        source archive object selector
    sourceRepository : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceRepositoryItems0], default is Undefined, optional
        Represents parameters related to source repository where a function is hosted.
        Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
    timeout : float, default is Undefined, optional
        Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
    triggerHttp : bool, default is Undefined, optional
        Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
    vpcConnector : str, default is Undefined, optional
        The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
    vpcConnectorEgressSettings : str, default is Undefined, optional
        The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
    """


    availableMemoryMb?: float

    buildEnvironmentVariables?: {str:str}

    buildWorkerPool?: str

    description?: str

    dockerRegistry?: str

    dockerRepository?: str

    entryPoint?: str

    environmentVariables?: {str:str}

    eventTrigger?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderEventTriggerItems0]

    httpsTriggerSecurityLevel?: str

    httpsTriggerUrl?: str

    ingressSettings?: str

    kmsKeyName?: str

    labels?: {str:str}

    maxInstances?: float

    minInstances?: float

    project?: str

    runtime?: str

    secretEnvironmentVariables?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretEnvironmentVariablesItems0]

    secretVolumes?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretVolumesItems0]

    serviceAccountEmail?: str

    sourceArchiveBucket?: str

    sourceArchiveBucketRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketRef

    sourceArchiveBucketSelector?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketSelector

    sourceArchiveObject?: str

    sourceArchiveObjectRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectRef

    sourceArchiveObjectSelector?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectSelector

    sourceRepository?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceRepositoryItems0]

    timeout?: float

    triggerHttp?: bool

    vpcConnector?: str

    vpcConnectorEgressSettings?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderEventTriggerItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec init provider event trigger items0

    Attributes
    ----------
    eventType : str, default is Undefined, optional
        The type of event to observe. For example: "google.storage.object.finalize".
        See the documentation on calling Cloud Functions for a
        full reference of accepted triggers.
    failurePolicy : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderEventTriggerItems0FailurePolicyItems0], default is Undefined, optional
        Specifies policy for failed executions. Structure is documented below.
    resource : str, default is Undefined, optional
        Required. The name or partial URI of the resource from
        which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
    """


    eventType?: str

    failurePolicy?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderEventTriggerItems0FailurePolicyItems0]

    resource?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderEventTriggerItems0FailurePolicyItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec init provider event trigger items0 failure policy items0

    Attributes
    ----------
    retry : bool, default is Undefined, optional
        Whether the function should be retried on failure. Defaults to false.
    """


    retry?: bool


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretEnvironmentVariablesItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec init provider secret environment variables items0

    Attributes
    ----------
    key : str, default is Undefined, optional
        Name of the environment variable.
    projectId : str, default is Undefined, optional
        Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    secret : str, default is Undefined, optional
        ID of the secret in secret manager (not the full resource name).
    version : str, default is Undefined, optional
        Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
    """


    key?: str

    projectId?: str

    secret?: str

    version?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretVolumesItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec init provider secret volumes items0

    Attributes
    ----------
    mountPath : str, default is Undefined, optional
        The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
    projectId : str, default is Undefined, optional
        Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    secret : str, default is Undefined, optional
        ID of the secret in secret manager (not the full resource name).
    versions : [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretVolumesItems0VersionsItems0], default is Undefined, optional
        List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
    """


    mountPath?: str

    projectId?: str

    secret?: str

    versions?: [CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretVolumesItems0VersionsItems0]


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSecretVolumesItems0VersionsItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec init provider secret volumes items0 versions items0

    Attributes
    ----------
    path : str, default is Undefined, optional
        Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
    version : str, default is Undefined, optional
        Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
    """


    path?: str

    version?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketRef:
    """
    Reference to a Bucket in storage to populate sourceArchiveBucket.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketRefPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketSelector:
    """
    Selector for a Bucket in storage to populate sourceArchiveBucket.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketSelectorPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveBucketSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectRef:
    """
    Reference to a BucketObject in storage to populate sourceArchiveObject.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectRefPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectSelector:
    """
    Selector for a BucketObject in storage to populate sourceArchiveObject.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectSelectorPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceArchiveObjectSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecInitProviderSourceRepositoryItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function spec init provider source repository items0

    Attributes
    ----------
    url : str, default is Undefined, optional
        The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
    """


    url?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecProviderConfigRefPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRef

    metadata?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToMetadata

    name: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRefPolicy


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatus:
    """
    FunctionStatus defines the observed state of Function.

    Attributes
    ----------
    atProvider : CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProvider

    conditions?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusConditionsItems0]


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProvider:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider

    Attributes
    ----------
    availableMemoryMb : float, default is Undefined, optional
        Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
    buildEnvironmentVariables : {str:str}, default is Undefined, optional
        A set of key/value environment variable pairs available during build time.
    buildWorkerPool : str, default is Undefined, optional
        Name of the Cloud Build Custom Worker Pool that should be used to build the function.
    description : str, default is Undefined, optional
        Description of the function.
    dockerRegistry : str, default is Undefined, optional
        Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
    dockerRepository : str, default is Undefined, optional
        User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, Container Registry will be used by default, unless specified otherwise by other means.
    effectiveLabels : {str:str}, default is Undefined, optional
        effective labels
    entryPoint : str, default is Undefined, optional
        Name of the function that will be executed when the Google Cloud Function is triggered.
    environmentVariables : {str:str}, default is Undefined, optional
        A set of key/value environment variable pairs to assign to the function.
    eventTrigger : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderEventTriggerItems0], default is Undefined, optional
        A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
    httpsTriggerSecurityLevel : str, default is Undefined, optional
        The security level for the function. The following options are available:
    httpsTriggerUrl : str, default is Undefined, optional
        URL which triggers function execution. Returned only if trigger_http is used.
    id : str, default is Undefined, optional
        an identifier for the resource with format {{name}}
    ingressSettings : str, default is Undefined, optional
        String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
    kmsKeyName : str, default is Undefined, optional
        Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
        If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
    labels : {str:str}, default is Undefined, optional
        A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
    maxInstances : float, default is Undefined, optional
        The limit on the maximum number of function instances that may coexist at a given time.
    minInstances : float, default is Undefined, optional
        The limit on the minimum number of function instances that may coexist at a given time.
    project : str, default is Undefined, optional
        Project of the function. If it is not provided, the provider project is used.
    region : str, default is Undefined, optional
        Region of function. If it is not provided, the provider region is used.
    runtime : str, default is Undefined, optional
        The runtime in which the function is going to run.
        Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
    secretEnvironmentVariables : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretEnvironmentVariablesItems0], default is Undefined, optional
        Secret environment variables configuration. Structure is documented below.
    secretVolumes : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretVolumesItems0], default is Undefined, optional
        Secret volumes configuration. Structure is documented below.
    serviceAccountEmail : str, default is Undefined, optional
        If provided, the self-provided service account to run the function with.
    sourceArchiveBucket : str, default is Undefined, optional
        The GCS bucket containing the zip archive which contains the function.
    sourceArchiveObject : str, default is Undefined, optional
        The source archive object (file) in archive bucket.
    sourceRepository : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSourceRepositoryItems0], default is Undefined, optional
        Represents parameters related to source repository where a function is hosted.
        Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
    status : str, default is Undefined, optional
        status
    terraformLabels : {str:str}, default is Undefined, optional
        The combination of labels configured directly on the resource and default labels configured on the provider.
    timeout : float, default is Undefined, optional
        Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
    triggerHttp : bool, default is Undefined, optional
        Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
    versionId : str, default is Undefined, optional
        an identifier for the resource with format {{name}}
    vpcConnector : str, default is Undefined, optional
        The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
    vpcConnectorEgressSettings : str, default is Undefined, optional
        The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
    """


    availableMemoryMb?: float

    buildEnvironmentVariables?: {str:str}

    buildWorkerPool?: str

    description?: str

    dockerRegistry?: str

    dockerRepository?: str

    effectiveLabels?: {str:str}

    entryPoint?: str

    environmentVariables?: {str:str}

    eventTrigger?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderEventTriggerItems0]

    httpsTriggerSecurityLevel?: str

    httpsTriggerUrl?: str

    id?: str

    ingressSettings?: str

    kmsKeyName?: str

    labels?: {str:str}

    maxInstances?: float

    minInstances?: float

    project?: str

    region?: str

    runtime?: str

    secretEnvironmentVariables?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretEnvironmentVariablesItems0]

    secretVolumes?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretVolumesItems0]

    serviceAccountEmail?: str

    sourceArchiveBucket?: str

    sourceArchiveObject?: str

    sourceRepository?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSourceRepositoryItems0]

    status?: str

    terraformLabels?: {str:str}

    timeout?: float

    triggerHttp?: bool

    versionId?: str

    vpcConnector?: str

    vpcConnectorEgressSettings?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderEventTriggerItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider event trigger items0

    Attributes
    ----------
    eventType : str, default is Undefined, optional
        The type of event to observe. For example: "google.storage.object.finalize".
        See the documentation on calling Cloud Functions for a
        full reference of accepted triggers.
    failurePolicy : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderEventTriggerItems0FailurePolicyItems0], default is Undefined, optional
        Specifies policy for failed executions. Structure is documented below.
    resource : str, default is Undefined, optional
        Required. The name or partial URI of the resource from
        which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
    """


    eventType?: str

    failurePolicy?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderEventTriggerItems0FailurePolicyItems0]

    resource?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderEventTriggerItems0FailurePolicyItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider event trigger items0 failure policy items0

    Attributes
    ----------
    retry : bool, default is Undefined, optional
        Whether the function should be retried on failure. Defaults to false.
    """


    retry?: bool


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretEnvironmentVariablesItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider secret environment variables items0

    Attributes
    ----------
    key : str, default is Undefined, optional
        Name of the environment variable.
    projectId : str, default is Undefined, optional
        Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    secret : str, default is Undefined, optional
        ID of the secret in secret manager (not the full resource name).
    version : str, default is Undefined, optional
        Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
    """


    key?: str

    projectId?: str

    secret?: str

    version?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretVolumesItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider secret volumes items0

    Attributes
    ----------
    mountPath : str, default is Undefined, optional
        The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
    projectId : str, default is Undefined, optional
        Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    secret : str, default is Undefined, optional
        ID of the secret in secret manager (not the full resource name).
    versions : [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretVolumesItems0VersionsItems0], default is Undefined, optional
        List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
    """


    mountPath?: str

    projectId?: str

    secret?: str

    versions?: [CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretVolumesItems0VersionsItems0]


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSecretVolumesItems0VersionsItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider secret volumes items0 versions items0

    Attributes
    ----------
    path : str, default is Undefined, optional
        Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
    version : str, default is Undefined, optional
        Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
    """


    path?: str

    version?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusAtProviderSourceRepositoryItems0:
    """
    cloudfunctions gcp upbound io v1beta1 function status at provider source repository items0

    Attributes
    ----------
    deployedUrl : str, default is Undefined, optional
        The URL pointing to the hosted repository where the function was defined at the time of deployment.
    url : str, default is Undefined, optional
        The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
    """


    deployedUrl?: str

    url?: str


schema CloudfunctionsGcpUpboundIoV1beta1FunctionStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


