"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema MetastoreService:
    """
    MetastoreService is the Schema for the MetastoreServices API. A managed metastore service that serves metadata queries.

    Attributes
    ----------
    apiVersion : str, default is "dataproc.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "MetastoreService", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : DataprocGcpUpboundIoV1beta1MetastoreServiceSpec, default is Undefined, required
        spec
    status : DataprocGcpUpboundIoV1beta1MetastoreServiceStatus, default is Undefined, optional
        status
    """


    apiVersion: "dataproc.gcp.upbound.io/v1beta1" = "dataproc.gcp.upbound.io/v1beta1"

    kind: "MetastoreService" = "MetastoreService"

    metadata?: v1.ObjectMeta

    spec: DataprocGcpUpboundIoV1beta1MetastoreServiceSpec

    status?: DataprocGcpUpboundIoV1beta1MetastoreServiceStatus


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpec:
    """
    MetastoreServiceSpec defines the desired state of MetastoreService

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProvider, default is Undefined, required
        for provider
    initProvider : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProvider

    initProvider?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecProviderConfigRef

    publishConnectionDetailsTo?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecWriteConnectionSecretToRef


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProvider:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider

    Attributes
    ----------
    databaseType : str, default is Undefined, optional
        The database type that the Metastore service stores its data.
        Default value is MYSQL.
        Possible values are: MYSQL, SPANNER.
    encryptionConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0], default is Undefined, optional
        Information used to configure the Dataproc Metastore service to encrypt
        customer data at rest.
        Structure is documented below.
    hiveMetastoreConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0], default is Undefined, optional
        Configuration information specific to running Hive metastore software as the metastore service.
        Structure is documented below.
    labels : {str:str}, default is Undefined, optional
        User-defined labels for the metastore service.
        Note: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field effective_labels for all of the labels present on the resource.
    location : str, default is Undefined, optional
        The location where the metastore service should reside.
        The default value is global.
    maintenanceWindow : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMaintenanceWindowItems0], default is Undefined, optional
        The one hour maintenance window of the metastore service.
        This specifies when the service can be restarted for maintenance purposes in UTC time.
        Maintenance window is not needed for services with the SPANNER database type.
        Structure is documented below.
    metadataIntegration : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMetadataIntegrationItems0], default is Undefined, optional
        The setting that defines how metastore metadata should be integrated with external services and systems.
        Structure is documented below.
    network : str, default is Undefined, optional
        The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        "projects/{projectNumber}/global/networks/{network_id}".
    networkConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0], default is Undefined, optional
        The configuration specifying the network settings for the Dataproc Metastore service.
        Structure is documented below.
    port : float, default is Undefined, optional
        The TCP port at which the metastore service is reached. Default: 9083.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    releaseChannel : str, default is Undefined, optional
        The release channel of the service. If unspecified, defaults to STABLE.
        Default value is STABLE.
        Possible values are: CANARY, STABLE.
    scalingConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderScalingConfigItems0], default is Undefined, optional
        Represents the scaling configuration of a metastore service.
        Structure is documented below.
    telemetryConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderTelemetryConfigItems0], default is Undefined, optional
        The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
        Structure is documented below.
    tier : str, default is Undefined, optional
        The tier of the service.
        Possible values are: DEVELOPER, ENTERPRISE.
    """


    databaseType?: str

    encryptionConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0]

    hiveMetastoreConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0]

    labels?: {str:str}

    location?: str

    maintenanceWindow?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMaintenanceWindowItems0]

    metadataIntegration?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMetadataIntegrationItems0]

    network?: str

    networkConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0]

    port?: float

    project?: str

    releaseChannel?: str

    scalingConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderScalingConfigItems0]

    telemetryConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderTelemetryConfigItems0]

    tier?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider encryption config items0

    Attributes
    ----------
    kmsKey : str, default is Undefined, optional
        The fully qualified customer provided Cloud KMS key name to use for customer data encryption.
        Use the following format: projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)
    kmsKeyRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeyRef, default is Undefined, optional
        kms key ref
    kmsKeySelector : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeySelector, default is Undefined, optional
        kms key selector
    """


    kmsKey?: str

    kmsKeyRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeyRef

    kmsKeySelector?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeySelector


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeyRef:
    """
    Reference to a CryptoKey in kms to populate kmsKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeyRefPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeyRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeySelector:
    """
    Selector for a CryptoKey in kms to populate kmsKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeySelectorPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderEncryptionConfigItems0KmsKeySelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider hive metastore config items0

    Attributes
    ----------
    auxiliaryVersions : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0], default is Undefined, optional
        A mapping of Hive metastore version to the auxiliary version configuration.
        When specified, a secondary Hive metastore service is created along with the primary service.
        All auxiliary versions must be less than the service's primary version.
        The key is the auxiliary service name and it must match the regular expression a-z?.
        This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
        Structure is documented below.
    configOverrides : {str:str}, default is Undefined, optional
        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
        The mappings override system defaults (some keys cannot be overridden)
    endpointProtocol : str, default is Undefined, optional
        The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
        Default value is THRIFT.
        Possible values are: THRIFT, GRPC.
    kerberosConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0KerberosConfigItems0], default is Undefined, optional
        Information used to configure the Hive metastore service as a service principal in a Kerberos realm.
        Structure is documented below.
    version : str, default is Undefined, optional
        The Hive metastore schema version.
    """


    auxiliaryVersions?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0]

    configOverrides?: {str:str}

    endpointProtocol?: str

    kerberosConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0KerberosConfigItems0]

    version?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider hive metastore config items0 auxiliary versions items0

    Attributes
    ----------
    configOverrides : {str:str}, default is Undefined, optional
        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
        The mappings override system defaults (some keys cannot be overridden)
    key : str, default is Undefined, optional
        The identifier for this object. Format specified above.
    version : str, default is Undefined, optional
        The Hive metastore schema version.
    """


    configOverrides?: {str:str}

    key?: str

    version?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0KerberosConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider hive metastore config items0 kerberos config items0

    Attributes
    ----------
    keytab : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0], default is Undefined, optional
        A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
        Structure is documented below.
    krb5ConfigGcsUri : str, default is Undefined, optional
        A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
    principal : str, default is Undefined, optional
        A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form "primary/instance@REALM", but there is no exact format.
    """


    keytab?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0]

    krb5ConfigGcsUri?: str

    principal?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider hive metastore config items0 kerberos config items0 keytab items0

    Attributes
    ----------
    cloudSecret : str, default is Undefined, optional
        The relative resource name of a Secret Manager secret version, in the following form:
        "projects/{projectNumber}/secrets/{secret_id}/versions/{version_id}".
    """


    cloudSecret?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMaintenanceWindowItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider maintenance window items0

    Attributes
    ----------
    dayOfWeek : str, default is Undefined, optional
        The day of week, when the window starts.
        Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    hourOfDay : float, default is Undefined, optional
        The hour of day (0-23) when the window starts.
    """


    dayOfWeek?: str

    hourOfDay?: float


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMetadataIntegrationItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider metadata integration items0

    Attributes
    ----------
    dataCatalogConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMetadataIntegrationItems0DataCatalogConfigItems0], default is Undefined, optional
        The integration config for the Data Catalog service.
        Structure is documented below.
    """


    dataCatalogConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMetadataIntegrationItems0DataCatalogConfigItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderMetadataIntegrationItems0DataCatalogConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider metadata integration items0 data catalog config items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
    """


    enabled?: bool


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider network config items0

    Attributes
    ----------
    consumers : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0], default is Undefined, optional
        The consumer-side network configuration for the Dataproc Metastore instance.
        Structure is documented below.
    """


    consumers?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider network config items0 consumers items0

    Attributes
    ----------
    subnetwork : str, default is Undefined, optional
        The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint.
        It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network.
        There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:
        `projects/{projectNumber}/regions/{region_id}/subnetworks/{subnetwork_id}
    subnetworkRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkRef, default is Undefined, optional
        subnetwork ref
    subnetworkSelector : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkSelector, default is Undefined, optional
        subnetwork selector
    """


    subnetwork?: str

    subnetworkRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkRef

    subnetworkSelector?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkSelector


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkRef:
    """
    Reference to a Subnetwork in compute to populate subnetwork.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkRefPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkSelector:
    """
    Selector for a Subnetwork in compute to populate subnetwork.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkSelectorPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderNetworkConfigItems0ConsumersItems0SubnetworkSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderScalingConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider scaling config items0

    Attributes
    ----------
    instanceSize : str, default is Undefined, optional
        Metastore instance sizes.
        Possible values are: EXTRA_SMALL, SMALL, MEDIUM, LARGE, EXTRA_LARGE.
    scalingFactor : float, default is Undefined, optional
        Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
    """


    instanceSize?: str

    scalingFactor?: float


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecForProviderTelemetryConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec for provider telemetry config items0

    Attributes
    ----------
    logFormat : str, default is Undefined, optional
        The output format of the Dataproc Metastore service's logs.
        Default value is JSON.
        Possible values are: LEGACY, JSON.
    """


    logFormat?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProvider:
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    databaseType : str, default is Undefined, optional
        The database type that the Metastore service stores its data.
        Default value is MYSQL.
        Possible values are: MYSQL, SPANNER.
    encryptionConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0], default is Undefined, optional
        Information used to configure the Dataproc Metastore service to encrypt
        customer data at rest.
        Structure is documented below.
    hiveMetastoreConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0], default is Undefined, optional
        Configuration information specific to running Hive metastore software as the metastore service.
        Structure is documented below.
    labels : {str:str}, default is Undefined, optional
        User-defined labels for the metastore service.
        Note: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field effective_labels for all of the labels present on the resource.
    maintenanceWindow : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMaintenanceWindowItems0], default is Undefined, optional
        The one hour maintenance window of the metastore service.
        This specifies when the service can be restarted for maintenance purposes in UTC time.
        Maintenance window is not needed for services with the SPANNER database type.
        Structure is documented below.
    metadataIntegration : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMetadataIntegrationItems0], default is Undefined, optional
        The setting that defines how metastore metadata should be integrated with external services and systems.
        Structure is documented below.
    network : str, default is Undefined, optional
        The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        "projects/{projectNumber}/global/networks/{network_id}".
    networkConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0], default is Undefined, optional
        The configuration specifying the network settings for the Dataproc Metastore service.
        Structure is documented below.
    port : float, default is Undefined, optional
        The TCP port at which the metastore service is reached. Default: 9083.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    releaseChannel : str, default is Undefined, optional
        The release channel of the service. If unspecified, defaults to STABLE.
        Default value is STABLE.
        Possible values are: CANARY, STABLE.
    scalingConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderScalingConfigItems0], default is Undefined, optional
        Represents the scaling configuration of a metastore service.
        Structure is documented below.
    telemetryConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderTelemetryConfigItems0], default is Undefined, optional
        The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
        Structure is documented below.
    tier : str, default is Undefined, optional
        The tier of the service.
        Possible values are: DEVELOPER, ENTERPRISE.
    """


    databaseType?: str

    encryptionConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0]

    hiveMetastoreConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0]

    labels?: {str:str}

    maintenanceWindow?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMaintenanceWindowItems0]

    metadataIntegration?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMetadataIntegrationItems0]

    network?: str

    networkConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0]

    port?: float

    project?: str

    releaseChannel?: str

    scalingConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderScalingConfigItems0]

    telemetryConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderTelemetryConfigItems0]

    tier?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider encryption config items0

    Attributes
    ----------
    kmsKey : str, default is Undefined, optional
        The fully qualified customer provided Cloud KMS key name to use for customer data encryption.
        Use the following format: projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)
    kmsKeyRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeyRef, default is Undefined, optional
        kms key ref
    kmsKeySelector : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeySelector, default is Undefined, optional
        kms key selector
    """


    kmsKey?: str

    kmsKeyRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeyRef

    kmsKeySelector?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeySelector


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeyRef:
    """
    Reference to a CryptoKey in kms to populate kmsKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeyRefPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeyRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeySelector:
    """
    Selector for a CryptoKey in kms to populate kmsKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeySelectorPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderEncryptionConfigItems0KmsKeySelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider hive metastore config items0

    Attributes
    ----------
    auxiliaryVersions : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0], default is Undefined, optional
        A mapping of Hive metastore version to the auxiliary version configuration.
        When specified, a secondary Hive metastore service is created along with the primary service.
        All auxiliary versions must be less than the service's primary version.
        The key is the auxiliary service name and it must match the regular expression a-z?.
        This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
        Structure is documented below.
    configOverrides : {str:str}, default is Undefined, optional
        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
        The mappings override system defaults (some keys cannot be overridden)
    endpointProtocol : str, default is Undefined, optional
        The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
        Default value is THRIFT.
        Possible values are: THRIFT, GRPC.
    kerberosConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0KerberosConfigItems0], default is Undefined, optional
        Information used to configure the Hive metastore service as a service principal in a Kerberos realm.
        Structure is documented below.
    version : str, default is Undefined, optional
        The Hive metastore schema version.
    """


    auxiliaryVersions?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0]

    configOverrides?: {str:str}

    endpointProtocol?: str

    kerberosConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0KerberosConfigItems0]

    version?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider hive metastore config items0 auxiliary versions items0

    Attributes
    ----------
    configOverrides : {str:str}, default is Undefined, optional
        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
        The mappings override system defaults (some keys cannot be overridden)
    key : str, default is Undefined, optional
        The identifier for this object. Format specified above.
    version : str, default is Undefined, optional
        The Hive metastore schema version.
    """


    configOverrides?: {str:str}

    key?: str

    version?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0KerberosConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider hive metastore config items0 kerberos config items0

    Attributes
    ----------
    keytab : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0], default is Undefined, optional
        A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
        Structure is documented below.
    krb5ConfigGcsUri : str, default is Undefined, optional
        A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
    principal : str, default is Undefined, optional
        A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form "primary/instance@REALM", but there is no exact format.
    """


    keytab?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0]

    krb5ConfigGcsUri?: str

    principal?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider hive metastore config items0 kerberos config items0 keytab items0

    Attributes
    ----------
    cloudSecret : str, default is Undefined, optional
        The relative resource name of a Secret Manager secret version, in the following form:
        "projects/{projectNumber}/secrets/{secret_id}/versions/{version_id}".
    """


    cloudSecret?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMaintenanceWindowItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider maintenance window items0

    Attributes
    ----------
    dayOfWeek : str, default is Undefined, optional
        The day of week, when the window starts.
        Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    hourOfDay : float, default is Undefined, optional
        The hour of day (0-23) when the window starts.
    """


    dayOfWeek?: str

    hourOfDay?: float


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMetadataIntegrationItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider metadata integration items0

    Attributes
    ----------
    dataCatalogConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMetadataIntegrationItems0DataCatalogConfigItems0], default is Undefined, optional
        The integration config for the Data Catalog service.
        Structure is documented below.
    """


    dataCatalogConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMetadataIntegrationItems0DataCatalogConfigItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderMetadataIntegrationItems0DataCatalogConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider metadata integration items0 data catalog config items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
    """


    enabled?: bool


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider network config items0

    Attributes
    ----------
    consumers : [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0], default is Undefined, optional
        The consumer-side network configuration for the Dataproc Metastore instance.
        Structure is documented below.
    """


    consumers?: [DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider network config items0 consumers items0

    Attributes
    ----------
    subnetwork : str, default is Undefined, optional
        The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint.
        It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network.
        There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:
        `projects/{projectNumber}/regions/{region_id}/subnetworks/{subnetwork_id}
    subnetworkRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkRef, default is Undefined, optional
        subnetwork ref
    subnetworkSelector : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkSelector, default is Undefined, optional
        subnetwork selector
    """


    subnetwork?: str

    subnetworkRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkRef

    subnetworkSelector?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkSelector


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkRef:
    """
    Reference to a Subnetwork in compute to populate subnetwork.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkRefPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkSelector:
    """
    Selector for a Subnetwork in compute to populate subnetwork.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkSelectorPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderNetworkConfigItems0ConsumersItems0SubnetworkSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderScalingConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider scaling config items0

    Attributes
    ----------
    instanceSize : str, default is Undefined, optional
        Metastore instance sizes.
        Possible values are: EXTRA_SMALL, SMALL, MEDIUM, LARGE, EXTRA_LARGE.
    scalingFactor : float, default is Undefined, optional
        Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
    """


    instanceSize?: str

    scalingFactor?: float


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecInitProviderTelemetryConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service spec init provider telemetry config items0

    Attributes
    ----------
    logFormat : str, default is Undefined, optional
        The output format of the Dataproc Metastore service's logs.
        Default value is JSON.
        Possible values are: LEGACY, JSON.
    """


    logFormat?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecProviderConfigRefPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToConfigRef

    metadata?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToMetadata

    name: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToConfigRefPolicy


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatus:
    """
    MetastoreServiceStatus defines the observed state of MetastoreService.

    Attributes
    ----------
    atProvider : DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProvider

    conditions?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusConditionsItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProvider:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider

    Attributes
    ----------
    artifactGcsUri : str, default is Undefined, optional
        A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
    databaseType : str, default is Undefined, optional
        The database type that the Metastore service stores its data.
        Default value is MYSQL.
        Possible values are: MYSQL, SPANNER.
    effectiveLabels : {str:str}, default is Undefined, optional
        effective labels
    encryptionConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderEncryptionConfigItems0], default is Undefined, optional
        Information used to configure the Dataproc Metastore service to encrypt
        customer data at rest.
        Structure is documented below.
    endpointUri : str, default is Undefined, optional
        The URI of the endpoint used to access the metastore service.
    hiveMetastoreConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0], default is Undefined, optional
        Configuration information specific to running Hive metastore software as the metastore service.
        Structure is documented below.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/locations/{{location}}/services/{{service_id}}
    labels : {str:str}, default is Undefined, optional
        User-defined labels for the metastore service.
        Note: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field effective_labels for all of the labels present on the resource.
    location : str, default is Undefined, optional
        The location where the metastore service should reside.
        The default value is global.
    maintenanceWindow : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMaintenanceWindowItems0], default is Undefined, optional
        The one hour maintenance window of the metastore service.
        This specifies when the service can be restarted for maintenance purposes in UTC time.
        Maintenance window is not needed for services with the SPANNER database type.
        Structure is documented below.
    metadataIntegration : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMetadataIntegrationItems0], default is Undefined, optional
        The setting that defines how metastore metadata should be integrated with external services and systems.
        Structure is documented below.
    name : str, default is Undefined, optional
        The relative resource name of the metastore service.
    network : str, default is Undefined, optional
        The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        "projects/{projectNumber}/global/networks/{network_id}".
    networkConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderNetworkConfigItems0], default is Undefined, optional
        The configuration specifying the network settings for the Dataproc Metastore service.
        Structure is documented below.
    port : float, default is Undefined, optional
        The TCP port at which the metastore service is reached. Default: 9083.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    releaseChannel : str, default is Undefined, optional
        The release channel of the service. If unspecified, defaults to STABLE.
        Default value is STABLE.
        Possible values are: CANARY, STABLE.
    scalingConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderScalingConfigItems0], default is Undefined, optional
        Represents the scaling configuration of a metastore service.
        Structure is documented below.
    state : str, default is Undefined, optional
        The current state of the metastore service.
    stateMessage : str, default is Undefined, optional
        Additional information about the current state of the metastore service, if available.
    telemetryConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderTelemetryConfigItems0], default is Undefined, optional
        The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
        Structure is documented below.
    terraformLabels : {str:str}, default is Undefined, optional
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
    tier : str, default is Undefined, optional
        The tier of the service.
        Possible values are: DEVELOPER, ENTERPRISE.
    uid : str, default is Undefined, optional
        The globally unique resource identifier of the metastore service.
    """


    artifactGcsUri?: str

    databaseType?: str

    effectiveLabels?: {str:str}

    encryptionConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderEncryptionConfigItems0]

    endpointUri?: str

    hiveMetastoreConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0]

    id?: str

    labels?: {str:str}

    location?: str

    maintenanceWindow?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMaintenanceWindowItems0]

    metadataIntegration?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMetadataIntegrationItems0]

    name?: str

    network?: str

    networkConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderNetworkConfigItems0]

    port?: float

    project?: str

    releaseChannel?: str

    scalingConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderScalingConfigItems0]

    state?: str

    stateMessage?: str

    telemetryConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderTelemetryConfigItems0]

    terraformLabels?: {str:str}

    tier?: str

    uid?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderEncryptionConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider encryption config items0

    Attributes
    ----------
    kmsKey : str, default is Undefined, optional
        The fully qualified customer provided Cloud KMS key name to use for customer data encryption.
        Use the following format: projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)
    """


    kmsKey?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider hive metastore config items0

    Attributes
    ----------
    auxiliaryVersions : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0], default is Undefined, optional
        A mapping of Hive metastore version to the auxiliary version configuration.
        When specified, a secondary Hive metastore service is created along with the primary service.
        All auxiliary versions must be less than the service's primary version.
        The key is the auxiliary service name and it must match the regular expression a-z?.
        This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
        Structure is documented below.
    configOverrides : {str:str}, default is Undefined, optional
        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
        The mappings override system defaults (some keys cannot be overridden)
    endpointProtocol : str, default is Undefined, optional
        The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
        Default value is THRIFT.
        Possible values are: THRIFT, GRPC.
    kerberosConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0KerberosConfigItems0], default is Undefined, optional
        Information used to configure the Hive metastore service as a service principal in a Kerberos realm.
        Structure is documented below.
    version : str, default is Undefined, optional
        The Hive metastore schema version.
    """


    auxiliaryVersions?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0]

    configOverrides?: {str:str}

    endpointProtocol?: str

    kerberosConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0KerberosConfigItems0]

    version?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0AuxiliaryVersionsItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider hive metastore config items0 auxiliary versions items0

    Attributes
    ----------
    configOverrides : {str:str}, default is Undefined, optional
        A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
        The mappings override system defaults (some keys cannot be overridden)
    key : str, default is Undefined, optional
        The identifier for this object. Format specified above.
    version : str, default is Undefined, optional
        The Hive metastore schema version.
    """


    configOverrides?: {str:str}

    key?: str

    version?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0KerberosConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider hive metastore config items0 kerberos config items0

    Attributes
    ----------
    keytab : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0], default is Undefined, optional
        A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
        Structure is documented below.
    krb5ConfigGcsUri : str, default is Undefined, optional
        A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
    principal : str, default is Undefined, optional
        A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form "primary/instance@REALM", but there is no exact format.
    """


    keytab?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0]

    krb5ConfigGcsUri?: str

    principal?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderHiveMetastoreConfigItems0KerberosConfigItems0KeytabItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider hive metastore config items0 kerberos config items0 keytab items0

    Attributes
    ----------
    cloudSecret : str, default is Undefined, optional
        The relative resource name of a Secret Manager secret version, in the following form:
        "projects/{projectNumber}/secrets/{secret_id}/versions/{version_id}".
    """


    cloudSecret?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMaintenanceWindowItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider maintenance window items0

    Attributes
    ----------
    dayOfWeek : str, default is Undefined, optional
        The day of week, when the window starts.
        Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    hourOfDay : float, default is Undefined, optional
        The hour of day (0-23) when the window starts.
    """


    dayOfWeek?: str

    hourOfDay?: float


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMetadataIntegrationItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider metadata integration items0

    Attributes
    ----------
    dataCatalogConfig : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMetadataIntegrationItems0DataCatalogConfigItems0], default is Undefined, optional
        The integration config for the Data Catalog service.
        Structure is documented below.
    """


    dataCatalogConfig?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMetadataIntegrationItems0DataCatalogConfigItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderMetadataIntegrationItems0DataCatalogConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider metadata integration items0 data catalog config items0

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
    """


    enabled?: bool


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderNetworkConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider network config items0

    Attributes
    ----------
    consumers : [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderNetworkConfigItems0ConsumersItems0], default is Undefined, optional
        The consumer-side network configuration for the Dataproc Metastore instance.
        Structure is documented below.
    """


    consumers?: [DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderNetworkConfigItems0ConsumersItems0]


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderNetworkConfigItems0ConsumersItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider network config items0 consumers items0

    Attributes
    ----------
    endpointUri : str, default is Undefined, optional
        The URI of the endpoint used to access the metastore service.
    subnetwork : str, default is Undefined, optional
        The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint.
        It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network.
        There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:
        `projects/{projectNumber}/regions/{region_id}/subnetworks/{subnetwork_id}
    """


    endpointUri?: str

    subnetwork?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderScalingConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider scaling config items0

    Attributes
    ----------
    instanceSize : str, default is Undefined, optional
        Metastore instance sizes.
        Possible values are: EXTRA_SMALL, SMALL, MEDIUM, LARGE, EXTRA_LARGE.
    scalingFactor : float, default is Undefined, optional
        Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
    """


    instanceSize?: str

    scalingFactor?: float


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusAtProviderTelemetryConfigItems0:
    """
    dataproc gcp upbound io v1beta1 metastore service status at provider telemetry config items0

    Attributes
    ----------
    logFormat : str, default is Undefined, optional
        The output format of the Dataproc Metastore service's logs.
        Default value is JSON.
        Possible values are: LEGACY, JSON.
    """


    logFormat?: str


schema DataprocGcpUpboundIoV1beta1MetastoreServiceStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


