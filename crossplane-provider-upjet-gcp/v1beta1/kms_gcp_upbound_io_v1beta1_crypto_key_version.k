"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema CryptoKeyVersion:
    """
    CryptoKeyVersion is the Schema for the CryptoKeyVersions API. A

    Attributes
    ----------
    apiVersion : str, default is "kms.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "CryptoKeyVersion", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpec, default is Undefined, required
        spec
    status : KmsGcpUpboundIoV1beta1CryptoKeyVersionStatus, default is Undefined, optional
        status
    """


    apiVersion: "kms.gcp.upbound.io/v1beta1" = "kms.gcp.upbound.io/v1beta1"

    kind: "CryptoKeyVersion" = "CryptoKeyVersion"

    metadata?: v1.ObjectMeta

    spec: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpec

    status?: KmsGcpUpboundIoV1beta1CryptoKeyVersionStatus


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpec:
    """
    CryptoKeyVersionSpec defines the desired state of CryptoKeyVersion

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProvider, default is Undefined, required
        for provider
    initProvider : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProvider

    initProvider?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecProviderConfigRef

    publishConnectionDetailsTo?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecWriteConnectionSecretToRef


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProvider:
    """
    kms gcp upbound io v1beta1 crypto key version spec for provider

    Attributes
    ----------
    cryptoKey : str, default is Undefined, optional
        The name of the cryptoKey associated with the CryptoKeyVersions.
        Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}'
    cryptoKeyRef : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeyRef, default is Undefined, optional
        crypto key ref
    cryptoKeySelector : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeySelector, default is Undefined, optional
        crypto key selector
    state : str, default is Undefined, optional
        The current state of the CryptoKeyVersion.
        Possible values are: PENDING_GENERATION, ENABLED, DISABLED, DESTROYED, DESTROY_SCHEDULED, PENDING_IMPORT, IMPORT_FAILED.
    """


    cryptoKey?: str

    cryptoKeyRef?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeyRef

    cryptoKeySelector?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeySelector

    state?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeyRef:
    """
    Reference to a CryptoKey in kms to populate cryptoKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeyRefPolicy


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeyRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeySelector:
    """
    Selector for a CryptoKey in kms to populate cryptoKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeySelectorPolicy


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecForProviderCryptoKeySelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProvider:
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    cryptoKey : str, default is Undefined, optional
        The name of the cryptoKey associated with the CryptoKeyVersions.
        Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}'
    cryptoKeyRef : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeyRef, default is Undefined, optional
        crypto key ref
    cryptoKeySelector : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeySelector, default is Undefined, optional
        crypto key selector
    state : str, default is Undefined, optional
        The current state of the CryptoKeyVersion.
        Possible values are: PENDING_GENERATION, ENABLED, DISABLED, DESTROYED, DESTROY_SCHEDULED, PENDING_IMPORT, IMPORT_FAILED.
    """


    cryptoKey?: str

    cryptoKeyRef?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeyRef

    cryptoKeySelector?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeySelector

    state?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeyRef:
    """
    Reference to a CryptoKey in kms to populate cryptoKey.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeyRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeyRefPolicy


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeyRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeySelector:
    """
    Selector for a CryptoKey in kms to populate cryptoKey.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeySelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeySelectorPolicy


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecInitProviderCryptoKeySelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecProviderConfigRefPolicy


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToConfigRef

    metadata?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToMetadata

    name: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToConfigRefPolicy


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionStatus:
    """
    CryptoKeyVersionStatus defines the observed state of CryptoKeyVersion.

    Attributes
    ----------
    atProvider : KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProvider

    conditions?: [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusConditionsItems0]


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProvider:
    """
    kms gcp upbound io v1beta1 crypto key version status at provider

    Attributes
    ----------
    algorithm : str, default is Undefined, optional
        The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
    attestation : [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0], default is Undefined, optional
        Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
        Only provided for key versions with protectionLevel HSM.
        Structure is documented below.
    cryptoKey : str, default is Undefined, optional
        The name of the cryptoKey associated with the CryptoKeyVersions.
        Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyring}}/cryptoKeys/{{cryptoKey}}'
    generateTime : str, default is Undefined, optional
        The time this CryptoKeyVersion key material was generated
    id : str, default is Undefined, optional
        an identifier for the resource with format {{name}}
    name : str, default is Undefined, optional
        The resource name for this CryptoKeyVersion.
    protectionLevel : str, default is Undefined, optional
        The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
    state : str, default is Undefined, optional
        The current state of the CryptoKeyVersion.
        Possible values are: PENDING_GENERATION, ENABLED, DISABLED, DESTROYED, DESTROY_SCHEDULED, PENDING_IMPORT, IMPORT_FAILED.
    """


    algorithm?: str

    attestation?: [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0]

    cryptoKey?: str

    generateTime?: str

    id?: str

    name?: str

    protectionLevel?: str

    state?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0:
    """
    kms gcp upbound io v1beta1 crypto key version status at provider attestation items0

    Attributes
    ----------
    certChains : [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0CertChainsItems0], default is Undefined, optional
        The certificate chains needed to validate the attestation
        Structure is documented below.
    content : str, default is Undefined, optional
        (Output)
        The attestation data provided by the HSM when the key operation was performed.
    externalProtectionLevelOptions : [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0ExternalProtectionLevelOptionsItems0], default is Undefined, optional
        ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
        Structure is documented below.
    format : str, default is Undefined, optional
        (Output)
        The format of the attestation data.
    """


    certChains?: [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0CertChainsItems0]

    content?: str

    externalProtectionLevelOptions?: [KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0ExternalProtectionLevelOptionsItems0]

    format?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0CertChainsItems0:
    """
    kms gcp upbound io v1beta1 crypto key version status at provider attestation items0 cert chains items0

    Attributes
    ----------
    caviumCerts : str, default is Undefined, optional
        Cavium certificate chain corresponding to the attestation.
    googleCardCerts : str, default is Undefined, optional
        Google card certificate chain corresponding to the attestation.
    googlePartitionCerts : str, default is Undefined, optional
        Google partition certificate chain corresponding to the attestation.
    """


    caviumCerts?: str

    googleCardCerts?: str

    googlePartitionCerts?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusAtProviderAttestationItems0ExternalProtectionLevelOptionsItems0:
    """
    kms gcp upbound io v1beta1 crypto key version status at provider attestation items0 external protection level options items0

    Attributes
    ----------
    ekmConnectionKeyPath : str, default is Undefined, optional
        The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of externalKeyUri when using an EkmConnection.
    externalKeyUri : str, default is Undefined, optional
        The URI for an external resource that this CryptoKeyVersion represents.
    """


    ekmConnectionKeyPath?: str

    externalKeyUri?: str


schema KmsGcpUpboundIoV1beta1CryptoKeyVersionStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


