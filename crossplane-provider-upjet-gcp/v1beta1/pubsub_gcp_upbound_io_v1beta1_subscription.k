"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Subscription:
    """
    Subscription is the Schema for the Subscriptions API. A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application.

    Attributes
    ----------
    apiVersion : str, default is "pubsub.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Subscription", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : PubsubGcpUpboundIoV1beta1SubscriptionSpec, default is Undefined, required
        spec
    status : PubsubGcpUpboundIoV1beta1SubscriptionStatus, default is Undefined, optional
        status
    """


    apiVersion: "pubsub.gcp.upbound.io/v1beta1" = "pubsub.gcp.upbound.io/v1beta1"

    kind: "Subscription" = "Subscription"

    metadata?: v1.ObjectMeta

    spec: PubsubGcpUpboundIoV1beta1SubscriptionSpec

    status?: PubsubGcpUpboundIoV1beta1SubscriptionStatus


schema PubsubGcpUpboundIoV1beta1SubscriptionSpec:
    """
    SubscriptionSpec defines the desired state of Subscription

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProvider, default is Undefined, required
        for provider
    initProvider : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProvider

    initProvider?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecProviderConfigRef

    publishConnectionDetailsTo?: PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecWriteConnectionSecretToRef


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProvider:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider

    Attributes
    ----------
    ackDeadlineSeconds : float, default is Undefined, optional
        This value is the maximum time after a subscriber receives a message
        before the subscriber should acknowledge the message. After message
        delivery but before the ack deadline expires and before the message is
        acknowledged, it is an outstanding message and will not be delivered
        again during that time (on a best-effort basis).
        For pull subscriptions, this value is used as the initial value for
        the ack deadline. To override this value for a given message, call
        subscriptions.modifyAckDeadline with the corresponding ackId if using
        pull. The minimum custom deadline you can specify is 10 seconds. The
        maximum custom deadline you can specify is 600 seconds (10 minutes).
        If this parameter is 0, a default value of 10 seconds is used.
        For push delivery, this value is also used to set the request timeout
        for the call to the push endpoint.
        If the subscriber never acknowledges the message, the Pub/Sub system
        will eventually redeliver the message.
    bigqueryConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderBigqueryConfigItems0], default is Undefined, optional
        If delivery to BigQuery is used with this subscription, this field is used to configure it.
        Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        If all three are empty, then the subscriber will pull and ack messages using API methods.
        Structure is documented below.
    cloudStorageConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderCloudStorageConfigItems0], default is Undefined, optional
        If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
        Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        If all three are empty, then the subscriber will pull and ack messages using API methods.
        Structure is documented below.
    deadLetterPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0], default is Undefined, optional
        A policy that specifies the conditions for dead lettering messages in
        this subscription. If dead_letter_policy is not set, dead lettering
        is disabled.
        The Cloud Pub/Sub service account associated with this subscription's
        parent project (i.e.,
        service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        permission to Acknowledge() messages on this subscription.
        Structure is documented below.
    enableExactlyOnceDelivery : bool, default is Undefined, optional
        If true, Pub/Sub provides the following guarantees for the delivery
        of a message with a given value of messageId on this Subscriptions':
    enableMessageOrdering : bool, default is Undefined, optional
        If true, messages published with the same orderingKey in PubsubMessage will be delivered to
        the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        may be delivered in any order.
    expirationPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderExpirationPolicyItems0], default is Undefined, optional
        A policy that specifies the conditions for this subscription's expiration.
        A subscription is considered active as long as any connected subscriber
        is successfully consuming messages from the subscription or is issuing
        operations on the subscription. If expirationPolicy is not set, a default
        policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        resource never expires.  The minimum allowed value for expirationPolicy.ttl
        is 1 day.
        Structure is documented below.
    $filter : str, default is Undefined, optional
        The subscription only delivers the messages that match the filter.
        Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        you can't modify the filter.
    labels : {str:str}, default is Undefined, optional
        A set of key/value label pairs to assign to this Subscription.
    messageRetentionDuration : str, default is Undefined, optional
        How long to retain unacknowledged messages in the subscription's
        backlog, from the moment a message is published. If
        retain_acked_messages is true, then this also configures the retention
        of acknowledged messages, and thus configures how far back in time a
        subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        than 7 days ("604800s") or less than 10 minutes ("600s").
        A duration in seconds with up to nine fractional digits, terminated
        by 's'. Example: "600.5s".
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    pushConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0], default is Undefined, optional
        If push delivery is used with this subscription, this field is used to
        configure it. An empty pushConfig signifies that the subscriber will
        pull and ack messages using API methods.
        Structure is documented below.
    retainAckedMessages : bool, default is Undefined, optional
        Indicates whether to retain acknowledged messages. If true, then
        messages are not expunged from the subscription's backlog, even if
        they are acknowledged, until they fall out of the
        messageRetentionDuration window.
    retryPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderRetryPolicyItems0], default is Undefined, optional
        A policy that specifies how Pub/Sub retries message delivery for this subscription.
        If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
        RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
        Structure is documented below.
    topic : str, default is Undefined, optional
        A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
        (as in the id property of a google_pubsub_topic), or just a topic name if
        the topic is in the same project as the subscription.
    topicRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicRef, default is Undefined, optional
        topic ref
    topicSelector : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicSelector, default is Undefined, optional
        topic selector
    """


    ackDeadlineSeconds?: float

    bigqueryConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderBigqueryConfigItems0]

    cloudStorageConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderCloudStorageConfigItems0]

    deadLetterPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0]

    enableExactlyOnceDelivery?: bool

    enableMessageOrdering?: bool

    expirationPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderExpirationPolicyItems0]

    $filter?: str

    labels?: {str:str}

    messageRetentionDuration?: str

    project?: str

    pushConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0]

    retainAckedMessages?: bool

    retryPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderRetryPolicyItems0]

    topic?: str

    topicRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicRef

    topicSelector?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicSelector


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderBigqueryConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider bigquery config items0

    Attributes
    ----------
    dropUnknownFields : bool, default is Undefined, optional
        When true and use_topic_schema or use_table_schema is true, any fields that are a part of the topic schema or message schema that
        are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync
        and any messages with extra fields are not written and remain in the subscription's backlog.
    table : str, default is Undefined, optional
        The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
    useTableSchema : bool, default is Undefined, optional
        When true, use the BigQuery table's schema as the columns to write to in BigQuery. Messages
        must be published in JSON format. Only one of use_topic_schema and use_table_schema can be set.
    useTopicSchema : bool, default is Undefined, optional
        When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
        Only one of use_topic_schema and use_table_schema can be set.
    writeMetadata : bool, default is Undefined, optional
        When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
        The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
    """


    dropUnknownFields?: bool

    table?: str

    useTableSchema?: bool

    useTopicSchema?: bool

    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderCloudStorageConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider cloud storage config items0

    Attributes
    ----------
    avroConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderCloudStorageConfigItems0AvroConfigItems0], default is Undefined, optional
        If set, message data will be written to Cloud Storage in Avro format.
        Structure is documented below.
    bucket : str, default is Undefined, optional
        User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
    filenamePrefix : str, default is Undefined, optional
        User-provided prefix for Cloud Storage filename.
    filenameSuffix : str, default is Undefined, optional
        User-provided suffix for Cloud Storage filename. Must not end in "/".
    maxBytes : float, default is Undefined, optional
        The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
        The maxBytes limit may be exceeded in cases where messages are larger than the limit.
    maxDuration : str, default is Undefined, optional
        The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
        May not exceed the subscription's acknowledgement deadline.
        A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    """


    avroConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderCloudStorageConfigItems0AvroConfigItems0]

    bucket?: str

    filenamePrefix?: str

    filenameSuffix?: str

    maxBytes?: float

    maxDuration?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderCloudStorageConfigItems0AvroConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider cloud storage config items0 avro config items0

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, writes the Pub/Sub message metadata to
        x-goog-pubsub-<KEY>:<VAL> headers of the HTTP request. Writes the
        Pub/Sub message attributes to <KEY>:<VAL> headers of the HTTP request.
    """


    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider dead letter policy items0

    Attributes
    ----------
    deadLetterTopic : str, default is Undefined, optional
        The name of the topic to which dead letter messages should be published.
        Format is projects/{project}/topics/{topic}.
        The Cloud Pub/Sub service account associated with the enclosing subscription's
        parent project (i.e.,
        service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        permission to Publish() to this topic.
        The operation will fail if the topic does not exist.
        Users should ensure that there is a subscription attached to this topic
        since messages published to a topic with no subscriptions are lost.
    deadLetterTopicRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicRef, default is Undefined, optional
        dead letter topic ref
    deadLetterTopicSelector : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicSelector, default is Undefined, optional
        dead letter topic selector
    maxDeliveryAttempts : float, default is Undefined, optional
        The maximum number of delivery attempts for any message. The value must be
        between 5 and 100.
        The number of delivery attempts is defined as 1 + (the sum of number of
        NACKs and number of times the acknowledgement deadline has been exceeded for the message).
        A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        client libraries may automatically extend ack_deadlines.
        This field will be honored on a best effort basis.
        If this parameter is 0, a default value of 5 is used.
    """


    deadLetterTopic?: str

    deadLetterTopicRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicRef

    deadLetterTopicSelector?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicSelector

    maxDeliveryAttempts?: float


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicRef:
    """
    Reference to a Topic in pubsub to populate deadLetterTopic.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicRefPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicSelector:
    """
    Selector for a Topic in pubsub to populate deadLetterTopic.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicSelectorPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderDeadLetterPolicyItems0DeadLetterTopicSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderExpirationPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider expiration policy items0

    Attributes
    ----------
    ttl : str, default is Undefined, optional
        Specifies the "time-to-live" duration for an associated resource. The
        resource expires if it is not active for a period of ttl.
        If ttl is set to "", the associated resource never expires.
        A duration in seconds with up to nine fractional digits, terminated by 's'.
        Example - "3.5s".
    """


    ttl?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider push config items0

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Endpoint configuration attributes.
        Every endpoint has a set of API supported attributes that can
        be used to control different aspects of the message delivery.
        The currently supported attribute is x-goog-version, which you
        can use to change the format of the pushed message. This
        attribute indicates the version of the data expected by
        the endpoint. This controls the shape of the pushed message
        (i.e., its fields and metadata). The endpoint version is
        based on the version of the Pub/Sub API.
        If not present during the subscriptions.create call,
        it will default to the version of the API used to make
        such call. If not present during a subscriptions.modifyPushConfig
        call, its value will not be changed. subscriptions.get
        calls will always return a valid version, even if the
        subscription was created without this attribute.
        The possible values for this attribute are:
    noWrapper : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0NoWrapperItems0], default is Undefined, optional
        When set, the payload to the push endpoint is not wrapped.Sets the
        data field as the HTTP body for delivery.
        Structure is documented below.
    oidcToken : [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0OidcTokenItems0], default is Undefined, optional
        If specified, Pub/Sub will generate and attach an OIDC JWT token as
        an Authorization header in the HTTP request for every pushed message.
        Structure is documented below.
    pushEndpoint : str, default is Undefined, optional
        A URL locating the endpoint to which messages should be pushed.
        For example, a Webhook endpoint might use
        "https://example.com/push".
    """


    attributes?: {str:str}

    noWrapper?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0NoWrapperItems0]

    oidcToken?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0OidcTokenItems0]

    pushEndpoint?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0NoWrapperItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider push config items0 no wrapper items0

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, writes the Pub/Sub message metadata to
        x-goog-pubsub-<KEY>:<VAL> headers of the HTTP request. Writes the
        Pub/Sub message attributes to <KEY>:<VAL> headers of the HTTP request.
    """


    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderPushConfigItems0OidcTokenItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider push config items0 oidc token items0

    Attributes
    ----------
    audience : str, default is Undefined, optional
        Audience to be used when generating OIDC token. The audience claim
        identifies the recipients that the JWT is intended for. The audience
        value is a single case-sensitive string. Having multiple values (array)
        for the audience field is not supported. More info about the OIDC JWT
        token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        Note: if not specified, the Push endpoint URL will be used.
    serviceAccountEmail : str, default is Undefined, optional
        Service account email to be used for generating the OIDC token.
        The caller (for subscriptions.create, subscriptions.patch, and
        subscriptions.modifyPushConfig RPCs) must have the
        iam.serviceAccounts.actAs permission for the service account.
    """


    audience?: str

    serviceAccountEmail?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderRetryPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec for provider retry policy items0

    Attributes
    ----------
    maximumBackoff : str, default is Undefined, optional
        The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    minimumBackoff : str, default is Undefined, optional
        The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """


    maximumBackoff?: str

    minimumBackoff?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicRef:
    """
    Reference to a Topic to populate topic.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicRefPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicSelector:
    """
    Selector for a Topic to populate topic.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicSelectorPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecForProviderTopicSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProvider:
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    ackDeadlineSeconds : float, default is Undefined, optional
        This value is the maximum time after a subscriber receives a message
        before the subscriber should acknowledge the message. After message
        delivery but before the ack deadline expires and before the message is
        acknowledged, it is an outstanding message and will not be delivered
        again during that time (on a best-effort basis).
        For pull subscriptions, this value is used as the initial value for
        the ack deadline. To override this value for a given message, call
        subscriptions.modifyAckDeadline with the corresponding ackId if using
        pull. The minimum custom deadline you can specify is 10 seconds. The
        maximum custom deadline you can specify is 600 seconds (10 minutes).
        If this parameter is 0, a default value of 10 seconds is used.
        For push delivery, this value is also used to set the request timeout
        for the call to the push endpoint.
        If the subscriber never acknowledges the message, the Pub/Sub system
        will eventually redeliver the message.
    bigqueryConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderBigqueryConfigItems0], default is Undefined, optional
        If delivery to BigQuery is used with this subscription, this field is used to configure it.
        Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        If all three are empty, then the subscriber will pull and ack messages using API methods.
        Structure is documented below.
    cloudStorageConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderCloudStorageConfigItems0], default is Undefined, optional
        If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
        Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        If all three are empty, then the subscriber will pull and ack messages using API methods.
        Structure is documented below.
    deadLetterPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0], default is Undefined, optional
        A policy that specifies the conditions for dead lettering messages in
        this subscription. If dead_letter_policy is not set, dead lettering
        is disabled.
        The Cloud Pub/Sub service account associated with this subscription's
        parent project (i.e.,
        service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        permission to Acknowledge() messages on this subscription.
        Structure is documented below.
    enableExactlyOnceDelivery : bool, default is Undefined, optional
        If true, Pub/Sub provides the following guarantees for the delivery
        of a message with a given value of messageId on this Subscriptions':
    enableMessageOrdering : bool, default is Undefined, optional
        If true, messages published with the same orderingKey in PubsubMessage will be delivered to
        the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        may be delivered in any order.
    expirationPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderExpirationPolicyItems0], default is Undefined, optional
        A policy that specifies the conditions for this subscription's expiration.
        A subscription is considered active as long as any connected subscriber
        is successfully consuming messages from the subscription or is issuing
        operations on the subscription. If expirationPolicy is not set, a default
        policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        resource never expires.  The minimum allowed value for expirationPolicy.ttl
        is 1 day.
        Structure is documented below.
    $filter : str, default is Undefined, optional
        The subscription only delivers the messages that match the filter.
        Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        you can't modify the filter.
    labels : {str:str}, default is Undefined, optional
        A set of key/value label pairs to assign to this Subscription.
    messageRetentionDuration : str, default is Undefined, optional
        How long to retain unacknowledged messages in the subscription's
        backlog, from the moment a message is published. If
        retain_acked_messages is true, then this also configures the retention
        of acknowledged messages, and thus configures how far back in time a
        subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        than 7 days ("604800s") or less than 10 minutes ("600s").
        A duration in seconds with up to nine fractional digits, terminated
        by 's'. Example: "600.5s".
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    pushConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0], default is Undefined, optional
        If push delivery is used with this subscription, this field is used to
        configure it. An empty pushConfig signifies that the subscriber will
        pull and ack messages using API methods.
        Structure is documented below.
    retainAckedMessages : bool, default is Undefined, optional
        Indicates whether to retain acknowledged messages. If true, then
        messages are not expunged from the subscription's backlog, even if
        they are acknowledged, until they fall out of the
        messageRetentionDuration window.
    retryPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderRetryPolicyItems0], default is Undefined, optional
        A policy that specifies how Pub/Sub retries message delivery for this subscription.
        If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
        RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
        Structure is documented below.
    topic : str, default is Undefined, optional
        A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
        (as in the id property of a google_pubsub_topic), or just a topic name if
        the topic is in the same project as the subscription.
    topicRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicRef, default is Undefined, optional
        topic ref
    topicSelector : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicSelector, default is Undefined, optional
        topic selector
    """


    ackDeadlineSeconds?: float

    bigqueryConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderBigqueryConfigItems0]

    cloudStorageConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderCloudStorageConfigItems0]

    deadLetterPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0]

    enableExactlyOnceDelivery?: bool

    enableMessageOrdering?: bool

    expirationPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderExpirationPolicyItems0]

    $filter?: str

    labels?: {str:str}

    messageRetentionDuration?: str

    project?: str

    pushConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0]

    retainAckedMessages?: bool

    retryPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderRetryPolicyItems0]

    topic?: str

    topicRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicRef

    topicSelector?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicSelector


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderBigqueryConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider bigquery config items0

    Attributes
    ----------
    dropUnknownFields : bool, default is Undefined, optional
        When true and use_topic_schema or use_table_schema is true, any fields that are a part of the topic schema or message schema that
        are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync
        and any messages with extra fields are not written and remain in the subscription's backlog.
    table : str, default is Undefined, optional
        The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
    useTableSchema : bool, default is Undefined, optional
        When true, use the BigQuery table's schema as the columns to write to in BigQuery. Messages
        must be published in JSON format. Only one of use_topic_schema and use_table_schema can be set.
    useTopicSchema : bool, default is Undefined, optional
        When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
        Only one of use_topic_schema and use_table_schema can be set.
    writeMetadata : bool, default is Undefined, optional
        When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
        The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
    """


    dropUnknownFields?: bool

    table?: str

    useTableSchema?: bool

    useTopicSchema?: bool

    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderCloudStorageConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider cloud storage config items0

    Attributes
    ----------
    avroConfig : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderCloudStorageConfigItems0AvroConfigItems0], default is Undefined, optional
        If set, message data will be written to Cloud Storage in Avro format.
        Structure is documented below.
    bucket : str, default is Undefined, optional
        User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
    filenamePrefix : str, default is Undefined, optional
        User-provided prefix for Cloud Storage filename.
    filenameSuffix : str, default is Undefined, optional
        User-provided suffix for Cloud Storage filename. Must not end in "/".
    maxBytes : float, default is Undefined, optional
        The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
        The maxBytes limit may be exceeded in cases where messages are larger than the limit.
    maxDuration : str, default is Undefined, optional
        The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
        May not exceed the subscription's acknowledgement deadline.
        A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    """


    avroConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderCloudStorageConfigItems0AvroConfigItems0]

    bucket?: str

    filenamePrefix?: str

    filenameSuffix?: str

    maxBytes?: float

    maxDuration?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderCloudStorageConfigItems0AvroConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider cloud storage config items0 avro config items0

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, writes the Pub/Sub message metadata to
        x-goog-pubsub-<KEY>:<VAL> headers of the HTTP request. Writes the
        Pub/Sub message attributes to <KEY>:<VAL> headers of the HTTP request.
    """


    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider dead letter policy items0

    Attributes
    ----------
    deadLetterTopic : str, default is Undefined, optional
        The name of the topic to which dead letter messages should be published.
        Format is projects/{project}/topics/{topic}.
        The Cloud Pub/Sub service account associated with the enclosing subscription's
        parent project (i.e.,
        service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        permission to Publish() to this topic.
        The operation will fail if the topic does not exist.
        Users should ensure that there is a subscription attached to this topic
        since messages published to a topic with no subscriptions are lost.
    deadLetterTopicRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicRef, default is Undefined, optional
        dead letter topic ref
    deadLetterTopicSelector : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicSelector, default is Undefined, optional
        dead letter topic selector
    maxDeliveryAttempts : float, default is Undefined, optional
        The maximum number of delivery attempts for any message. The value must be
        between 5 and 100.
        The number of delivery attempts is defined as 1 + (the sum of number of
        NACKs and number of times the acknowledgement deadline has been exceeded for the message).
        A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        client libraries may automatically extend ack_deadlines.
        This field will be honored on a best effort basis.
        If this parameter is 0, a default value of 5 is used.
    """


    deadLetterTopic?: str

    deadLetterTopicRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicRef

    deadLetterTopicSelector?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicSelector

    maxDeliveryAttempts?: float


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicRef:
    """
    Reference to a Topic in pubsub to populate deadLetterTopic.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicRefPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicSelector:
    """
    Selector for a Topic in pubsub to populate deadLetterTopic.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicSelectorPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderDeadLetterPolicyItems0DeadLetterTopicSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderExpirationPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider expiration policy items0

    Attributes
    ----------
    ttl : str, default is Undefined, optional
        Specifies the "time-to-live" duration for an associated resource. The
        resource expires if it is not active for a period of ttl.
        If ttl is set to "", the associated resource never expires.
        A duration in seconds with up to nine fractional digits, terminated by 's'.
        Example - "3.5s".
    """


    ttl?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider push config items0

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Endpoint configuration attributes.
        Every endpoint has a set of API supported attributes that can
        be used to control different aspects of the message delivery.
        The currently supported attribute is x-goog-version, which you
        can use to change the format of the pushed message. This
        attribute indicates the version of the data expected by
        the endpoint. This controls the shape of the pushed message
        (i.e., its fields and metadata). The endpoint version is
        based on the version of the Pub/Sub API.
        If not present during the subscriptions.create call,
        it will default to the version of the API used to make
        such call. If not present during a subscriptions.modifyPushConfig
        call, its value will not be changed. subscriptions.get
        calls will always return a valid version, even if the
        subscription was created without this attribute.
        The possible values for this attribute are:
    noWrapper : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0NoWrapperItems0], default is Undefined, optional
        When set, the payload to the push endpoint is not wrapped.Sets the
        data field as the HTTP body for delivery.
        Structure is documented below.
    oidcToken : [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0OidcTokenItems0], default is Undefined, optional
        If specified, Pub/Sub will generate and attach an OIDC JWT token as
        an Authorization header in the HTTP request for every pushed message.
        Structure is documented below.
    pushEndpoint : str, default is Undefined, optional
        A URL locating the endpoint to which messages should be pushed.
        For example, a Webhook endpoint might use
        "https://example.com/push".
    """


    attributes?: {str:str}

    noWrapper?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0NoWrapperItems0]

    oidcToken?: [PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0OidcTokenItems0]

    pushEndpoint?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0NoWrapperItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider push config items0 no wrapper items0

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, writes the Pub/Sub message metadata to
        x-goog-pubsub-<KEY>:<VAL> headers of the HTTP request. Writes the
        Pub/Sub message attributes to <KEY>:<VAL> headers of the HTTP request.
    """


    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderPushConfigItems0OidcTokenItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider push config items0 oidc token items0

    Attributes
    ----------
    audience : str, default is Undefined, optional
        Audience to be used when generating OIDC token. The audience claim
        identifies the recipients that the JWT is intended for. The audience
        value is a single case-sensitive string. Having multiple values (array)
        for the audience field is not supported. More info about the OIDC JWT
        token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        Note: if not specified, the Push endpoint URL will be used.
    serviceAccountEmail : str, default is Undefined, optional
        Service account email to be used for generating the OIDC token.
        The caller (for subscriptions.create, subscriptions.patch, and
        subscriptions.modifyPushConfig RPCs) must have the
        iam.serviceAccounts.actAs permission for the service account.
    """


    audience?: str

    serviceAccountEmail?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderRetryPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription spec init provider retry policy items0

    Attributes
    ----------
    maximumBackoff : str, default is Undefined, optional
        The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    minimumBackoff : str, default is Undefined, optional
        The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """


    maximumBackoff?: str

    minimumBackoff?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicRef:
    """
    Reference to a Topic to populate topic.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicRefPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicSelector:
    """
    Selector for a Topic to populate topic.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicSelectorPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecInitProviderTopicSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecProviderConfigRefPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToConfigRef

    metadata?: PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToMetadata

    name: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToConfigRefPolicy


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatus:
    """
    SubscriptionStatus defines the observed state of Subscription.

    Attributes
    ----------
    atProvider : PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [PubsubGcpUpboundIoV1beta1SubscriptionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProvider

    conditions?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusConditionsItems0]


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProvider:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider

    Attributes
    ----------
    ackDeadlineSeconds : float, default is Undefined, optional
        This value is the maximum time after a subscriber receives a message
        before the subscriber should acknowledge the message. After message
        delivery but before the ack deadline expires and before the message is
        acknowledged, it is an outstanding message and will not be delivered
        again during that time (on a best-effort basis).
        For pull subscriptions, this value is used as the initial value for
        the ack deadline. To override this value for a given message, call
        subscriptions.modifyAckDeadline with the corresponding ackId if using
        pull. The minimum custom deadline you can specify is 10 seconds. The
        maximum custom deadline you can specify is 600 seconds (10 minutes).
        If this parameter is 0, a default value of 10 seconds is used.
        For push delivery, this value is also used to set the request timeout
        for the call to the push endpoint.
        If the subscriber never acknowledges the message, the Pub/Sub system
        will eventually redeliver the message.
    bigqueryConfig : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderBigqueryConfigItems0], default is Undefined, optional
        If delivery to BigQuery is used with this subscription, this field is used to configure it.
        Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        If all three are empty, then the subscriber will pull and ack messages using API methods.
        Structure is documented below.
    cloudStorageConfig : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderCloudStorageConfigItems0], default is Undefined, optional
        If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
        Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
        If all three are empty, then the subscriber will pull and ack messages using API methods.
        Structure is documented below.
    deadLetterPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderDeadLetterPolicyItems0], default is Undefined, optional
        A policy that specifies the conditions for dead lettering messages in
        this subscription. If dead_letter_policy is not set, dead lettering
        is disabled.
        The Cloud Pub/Sub service account associated with this subscription's
        parent project (i.e.,
        service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        permission to Acknowledge() messages on this subscription.
        Structure is documented below.
    effectiveLabels : {str:str}, default is Undefined, optional
        for all of the labels present on the resource.
    enableExactlyOnceDelivery : bool, default is Undefined, optional
        If true, Pub/Sub provides the following guarantees for the delivery
        of a message with a given value of messageId on this Subscriptions':
    enableMessageOrdering : bool, default is Undefined, optional
        If true, messages published with the same orderingKey in PubsubMessage will be delivered to
        the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
        may be delivered in any order.
    expirationPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderExpirationPolicyItems0], default is Undefined, optional
        A policy that specifies the conditions for this subscription's expiration.
        A subscription is considered active as long as any connected subscriber
        is successfully consuming messages from the subscription or is issuing
        operations on the subscription. If expirationPolicy is not set, a default
        policy with ttl of 31 days will be used.  If it is set but ttl is "", the
        resource never expires.  The minimum allowed value for expirationPolicy.ttl
        is 1 day.
        Structure is documented below.
    $filter : str, default is Undefined, optional
        The subscription only delivers the messages that match the filter.
        Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
        by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
        you can't modify the filter.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/subscriptions/{{name}}
    labels : {str:str}, default is Undefined, optional
        A set of key/value label pairs to assign to this Subscription.
    messageRetentionDuration : str, default is Undefined, optional
        How long to retain unacknowledged messages in the subscription's
        backlog, from the moment a message is published. If
        retain_acked_messages is true, then this also configures the retention
        of acknowledged messages, and thus configures how far back in time a
        subscriptions.seek can be done. Defaults to 7 days. Cannot be more
        than 7 days ("604800s") or less than 10 minutes ("600s").
        A duration in seconds with up to nine fractional digits, terminated
        by 's'. Example: "600.5s".
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    pushConfig : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0], default is Undefined, optional
        If push delivery is used with this subscription, this field is used to
        configure it. An empty pushConfig signifies that the subscriber will
        pull and ack messages using API methods.
        Structure is documented below.
    retainAckedMessages : bool, default is Undefined, optional
        Indicates whether to retain acknowledged messages. If true, then
        messages are not expunged from the subscription's backlog, even if
        they are acknowledged, until they fall out of the
        messageRetentionDuration window.
    retryPolicy : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderRetryPolicyItems0], default is Undefined, optional
        A policy that specifies how Pub/Sub retries message delivery for this subscription.
        If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
        RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
        Structure is documented below.
    terraformLabels : {str:str}, default is Undefined, optional
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
    topic : str, default is Undefined, optional
        A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
        (as in the id property of a google_pubsub_topic), or just a topic name if
        the topic is in the same project as the subscription.
    """


    ackDeadlineSeconds?: float

    bigqueryConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderBigqueryConfigItems0]

    cloudStorageConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderCloudStorageConfigItems0]

    deadLetterPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderDeadLetterPolicyItems0]

    effectiveLabels?: {str:str}

    enableExactlyOnceDelivery?: bool

    enableMessageOrdering?: bool

    expirationPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderExpirationPolicyItems0]

    $filter?: str

    id?: str

    labels?: {str:str}

    messageRetentionDuration?: str

    project?: str

    pushConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0]

    retainAckedMessages?: bool

    retryPolicy?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderRetryPolicyItems0]

    terraformLabels?: {str:str}

    topic?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderBigqueryConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider bigquery config items0

    Attributes
    ----------
    dropUnknownFields : bool, default is Undefined, optional
        When true and use_topic_schema or use_table_schema is true, any fields that are a part of the topic schema or message schema that
        are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync
        and any messages with extra fields are not written and remain in the subscription's backlog.
    table : str, default is Undefined, optional
        The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
    useTableSchema : bool, default is Undefined, optional
        When true, use the BigQuery table's schema as the columns to write to in BigQuery. Messages
        must be published in JSON format. Only one of use_topic_schema and use_table_schema can be set.
    useTopicSchema : bool, default is Undefined, optional
        When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
        Only one of use_topic_schema and use_table_schema can be set.
    writeMetadata : bool, default is Undefined, optional
        When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
        The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
    """


    dropUnknownFields?: bool

    table?: str

    useTableSchema?: bool

    useTopicSchema?: bool

    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderCloudStorageConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider cloud storage config items0

    Attributes
    ----------
    avroConfig : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderCloudStorageConfigItems0AvroConfigItems0], default is Undefined, optional
        If set, message data will be written to Cloud Storage in Avro format.
        Structure is documented below.
    bucket : str, default is Undefined, optional
        User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
    filenamePrefix : str, default is Undefined, optional
        User-provided prefix for Cloud Storage filename.
    filenameSuffix : str, default is Undefined, optional
        User-provided suffix for Cloud Storage filename. Must not end in "/".
    maxBytes : float, default is Undefined, optional
        The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
        The maxBytes limit may be exceeded in cases where messages are larger than the limit.
    maxDuration : str, default is Undefined, optional
        The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
        May not exceed the subscription's acknowledgement deadline.
        A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    state : str, default is Undefined, optional
        (Output)
        An output-only field that indicates whether or not the subscription can receive messages.
    """


    avroConfig?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderCloudStorageConfigItems0AvroConfigItems0]

    bucket?: str

    filenamePrefix?: str

    filenameSuffix?: str

    maxBytes?: float

    maxDuration?: str

    state?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderCloudStorageConfigItems0AvroConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider cloud storage config items0 avro config items0

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, writes the Pub/Sub message metadata to
        x-goog-pubsub-<KEY>:<VAL> headers of the HTTP request. Writes the
        Pub/Sub message attributes to <KEY>:<VAL> headers of the HTTP request.
    """


    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderDeadLetterPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider dead letter policy items0

    Attributes
    ----------
    deadLetterTopic : str, default is Undefined, optional
        The name of the topic to which dead letter messages should be published.
        Format is projects/{project}/topics/{topic}.
        The Cloud Pub/Sub service account associated with the enclosing subscription's
        parent project (i.e.,
        service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
        permission to Publish() to this topic.
        The operation will fail if the topic does not exist.
        Users should ensure that there is a subscription attached to this topic
        since messages published to a topic with no subscriptions are lost.
    maxDeliveryAttempts : float, default is Undefined, optional
        The maximum number of delivery attempts for any message. The value must be
        between 5 and 100.
        The number of delivery attempts is defined as 1 + (the sum of number of
        NACKs and number of times the acknowledgement deadline has been exceeded for the message).
        A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
        client libraries may automatically extend ack_deadlines.
        This field will be honored on a best effort basis.
        If this parameter is 0, a default value of 5 is used.
    """


    deadLetterTopic?: str

    maxDeliveryAttempts?: float


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderExpirationPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider expiration policy items0

    Attributes
    ----------
    ttl : str, default is Undefined, optional
        Specifies the "time-to-live" duration for an associated resource. The
        resource expires if it is not active for a period of ttl.
        If ttl is set to "", the associated resource never expires.
        A duration in seconds with up to nine fractional digits, terminated by 's'.
        Example - "3.5s".
    """


    ttl?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider push config items0

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Endpoint configuration attributes.
        Every endpoint has a set of API supported attributes that can
        be used to control different aspects of the message delivery.
        The currently supported attribute is x-goog-version, which you
        can use to change the format of the pushed message. This
        attribute indicates the version of the data expected by
        the endpoint. This controls the shape of the pushed message
        (i.e., its fields and metadata). The endpoint version is
        based on the version of the Pub/Sub API.
        If not present during the subscriptions.create call,
        it will default to the version of the API used to make
        such call. If not present during a subscriptions.modifyPushConfig
        call, its value will not be changed. subscriptions.get
        calls will always return a valid version, even if the
        subscription was created without this attribute.
        The possible values for this attribute are:
    noWrapper : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0NoWrapperItems0], default is Undefined, optional
        When set, the payload to the push endpoint is not wrapped.Sets the
        data field as the HTTP body for delivery.
        Structure is documented below.
    oidcToken : [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0OidcTokenItems0], default is Undefined, optional
        If specified, Pub/Sub will generate and attach an OIDC JWT token as
        an Authorization header in the HTTP request for every pushed message.
        Structure is documented below.
    pushEndpoint : str, default is Undefined, optional
        A URL locating the endpoint to which messages should be pushed.
        For example, a Webhook endpoint might use
        "https://example.com/push".
    """


    attributes?: {str:str}

    noWrapper?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0NoWrapperItems0]

    oidcToken?: [PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0OidcTokenItems0]

    pushEndpoint?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0NoWrapperItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider push config items0 no wrapper items0

    Attributes
    ----------
    writeMetadata : bool, default is Undefined, optional
        When true, writes the Pub/Sub message metadata to
        x-goog-pubsub-<KEY>:<VAL> headers of the HTTP request. Writes the
        Pub/Sub message attributes to <KEY>:<VAL> headers of the HTTP request.
    """


    writeMetadata?: bool


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderPushConfigItems0OidcTokenItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider push config items0 oidc token items0

    Attributes
    ----------
    audience : str, default is Undefined, optional
        Audience to be used when generating OIDC token. The audience claim
        identifies the recipients that the JWT is intended for. The audience
        value is a single case-sensitive string. Having multiple values (array)
        for the audience field is not supported. More info about the OIDC JWT
        token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        Note: if not specified, the Push endpoint URL will be used.
    serviceAccountEmail : str, default is Undefined, optional
        Service account email to be used for generating the OIDC token.
        The caller (for subscriptions.create, subscriptions.patch, and
        subscriptions.modifyPushConfig RPCs) must have the
        iam.serviceAccounts.actAs permission for the service account.
    """


    audience?: str

    serviceAccountEmail?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusAtProviderRetryPolicyItems0:
    """
    pubsub gcp upbound io v1beta1 subscription status at provider retry policy items0

    Attributes
    ----------
    maximumBackoff : str, default is Undefined, optional
        The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    minimumBackoff : str, default is Undefined, optional
        The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    """


    maximumBackoff?: str

    minimumBackoff?: str


schema PubsubGcpUpboundIoV1beta1SubscriptionStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


