"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Policy:
    """
    Policy is the Schema for the Policys API. A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.

    Attributes
    ----------
    apiVersion : str, default is "dns.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Policy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : DNSGcpUpboundIoV1beta1PolicySpec, default is Undefined, required
        spec
    status : DNSGcpUpboundIoV1beta1PolicyStatus, default is Undefined, optional
        status
    """


    apiVersion: "dns.gcp.upbound.io/v1beta1" = "dns.gcp.upbound.io/v1beta1"

    kind: "Policy" = "Policy"

    metadata?: v1.ObjectMeta

    spec: DNSGcpUpboundIoV1beta1PolicySpec

    status?: DNSGcpUpboundIoV1beta1PolicyStatus


schema DNSGcpUpboundIoV1beta1PolicySpec:
    """
    PolicySpec defines the desired state of Policy

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : DNSGcpUpboundIoV1beta1PolicySpecForProvider, default is Undefined, required
        for provider
    initProvider : DNSGcpUpboundIoV1beta1PolicySpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : DNSGcpUpboundIoV1beta1PolicySpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : DNSGcpUpboundIoV1beta1PolicySpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: DNSGcpUpboundIoV1beta1PolicySpecForProvider

    initProvider?: DNSGcpUpboundIoV1beta1PolicySpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: DNSGcpUpboundIoV1beta1PolicySpecProviderConfigRef

    publishConnectionDetailsTo?: DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: DNSGcpUpboundIoV1beta1PolicySpecWriteConnectionSecretToRef


schema DNSGcpUpboundIoV1beta1PolicySpecForProvider:
    """
    DNS gcp upbound io v1beta1 policy spec for provider

    Attributes
    ----------
    alternativeNameServerConfig : [DNSGcpUpboundIoV1beta1PolicySpecForProviderAlternativeNameServerConfigItems0], default is Undefined, optional
        Sets an alternative name server for the associated networks.
        When specified, all DNS queries are forwarded to a name server that you choose.
        Names such as .internal are not available when an alternative name server is specified.
        Structure is documented below.
    description : str, default is Undefined, optional
        A textual description field.
    enableInboundForwarding : bool, default is Undefined, optional
        Allows networks bound to this policy to receive DNS queries sent
        by VMs or applications over VPN connections. When enabled, a
        virtual IP address will be allocated from each of the sub-networks
        that are bound to this policy.
    enableLogging : bool, default is Undefined, optional
        Controls whether logging is enabled for the networks bound to this policy.
        Defaults to no logging if not set.
    networks : [DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0], default is Undefined, optional
        List of network names specifying networks to which this policy is applied.
        Structure is documented below.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    alternativeNameServerConfig?: [DNSGcpUpboundIoV1beta1PolicySpecForProviderAlternativeNameServerConfigItems0]

    description?: str

    enableInboundForwarding?: bool

    enableLogging?: bool

    networks?: [DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0]

    project?: str


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderAlternativeNameServerConfigItems0:
    """
    DNS gcp upbound io v1beta1 policy spec for provider alternative name server config items0

    Attributes
    ----------
    targetNameServers : [DNSGcpUpboundIoV1beta1PolicySpecForProviderAlternativeNameServerConfigItems0TargetNameServersItems0], default is Undefined, optional
        Sets an alternative name server for the associated networks. When specified,
        all DNS queries are forwarded to a name server that you choose. Names such as .internal
        are not available when an alternative name server is specified.
        Structure is documented below.
    """


    targetNameServers?: [DNSGcpUpboundIoV1beta1PolicySpecForProviderAlternativeNameServerConfigItems0TargetNameServersItems0]


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderAlternativeNameServerConfigItems0TargetNameServersItems0:
    """
    DNS gcp upbound io v1beta1 policy spec for provider alternative name server config items0 target name servers items0

    Attributes
    ----------
    forwardingPath : str, default is Undefined, optional
        Forwarding path for this TargetNameServer. If unset or default Cloud DNS will make forwarding
        decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
        to the Internet. When set to private, Cloud DNS will always send queries through VPC for this target
        Possible values are: default, private.
    ipv4Address : str, default is Undefined, optional
        IPv4 address to forward to.
    """


    forwardingPath?: str

    ipv4Address?: str


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0:
    """
    DNS gcp upbound io v1beta1 policy spec for provider networks items0

    Attributes
    ----------
    networkRef : DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkRef, default is Undefined, optional
        network ref
    networkSelector : DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkSelector, default is Undefined, optional
        network selector
    networkUrl : str, default is Undefined, optional
        The id or fully qualified URL of the VPC network to forward queries to.
        This should be formatted like projects/{project}/global/networks/{network} or
        https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    """


    networkRef?: DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkRef

    networkSelector?: DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkSelector

    networkUrl?: str


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkRef:
    """
    Reference to a Network in compute to populate networkUrl.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkRefPolicy


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkSelector:
    """
    Selector for a Network in compute to populate networkUrl.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkSelectorPolicy


schema DNSGcpUpboundIoV1beta1PolicySpecForProviderNetworksItems0NetworkSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DNSGcpUpboundIoV1beta1PolicySpecInitProvider:
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    alternativeNameServerConfig : [DNSGcpUpboundIoV1beta1PolicySpecInitProviderAlternativeNameServerConfigItems0], default is Undefined, optional
        Sets an alternative name server for the associated networks.
        When specified, all DNS queries are forwarded to a name server that you choose.
        Names such as .internal are not available when an alternative name server is specified.
        Structure is documented below.
    description : str, default is Undefined, optional
        A textual description field.
    enableInboundForwarding : bool, default is Undefined, optional
        Allows networks bound to this policy to receive DNS queries sent
        by VMs or applications over VPN connections. When enabled, a
        virtual IP address will be allocated from each of the sub-networks
        that are bound to this policy.
    enableLogging : bool, default is Undefined, optional
        Controls whether logging is enabled for the networks bound to this policy.
        Defaults to no logging if not set.
    networks : [DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0], default is Undefined, optional
        List of network names specifying networks to which this policy is applied.
        Structure is documented below.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    alternativeNameServerConfig?: [DNSGcpUpboundIoV1beta1PolicySpecInitProviderAlternativeNameServerConfigItems0]

    description?: str

    enableInboundForwarding?: bool

    enableLogging?: bool

    networks?: [DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0]

    project?: str


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderAlternativeNameServerConfigItems0:
    """
    DNS gcp upbound io v1beta1 policy spec init provider alternative name server config items0

    Attributes
    ----------
    targetNameServers : [DNSGcpUpboundIoV1beta1PolicySpecInitProviderAlternativeNameServerConfigItems0TargetNameServersItems0], default is Undefined, optional
        Sets an alternative name server for the associated networks. When specified,
        all DNS queries are forwarded to a name server that you choose. Names such as .internal
        are not available when an alternative name server is specified.
        Structure is documented below.
    """


    targetNameServers?: [DNSGcpUpboundIoV1beta1PolicySpecInitProviderAlternativeNameServerConfigItems0TargetNameServersItems0]


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderAlternativeNameServerConfigItems0TargetNameServersItems0:
    """
    DNS gcp upbound io v1beta1 policy spec init provider alternative name server config items0 target name servers items0

    Attributes
    ----------
    forwardingPath : str, default is Undefined, optional
        Forwarding path for this TargetNameServer. If unset or default Cloud DNS will make forwarding
        decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
        to the Internet. When set to private, Cloud DNS will always send queries through VPC for this target
        Possible values are: default, private.
    ipv4Address : str, default is Undefined, optional
        IPv4 address to forward to.
    """


    forwardingPath?: str

    ipv4Address?: str


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0:
    """
    DNS gcp upbound io v1beta1 policy spec init provider networks items0

    Attributes
    ----------
    networkRef : DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkRef, default is Undefined, optional
        network ref
    networkSelector : DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkSelector, default is Undefined, optional
        network selector
    networkUrl : str, default is Undefined, optional
        The id or fully qualified URL of the VPC network to forward queries to.
        This should be formatted like projects/{project}/global/networks/{network} or
        https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    """


    networkRef?: DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkRef

    networkSelector?: DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkSelector

    networkUrl?: str


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkRef:
    """
    Reference to a Network in compute to populate networkUrl.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkRefPolicy


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkSelector:
    """
    Selector for a Network in compute to populate networkUrl.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkSelectorPolicy


schema DNSGcpUpboundIoV1beta1PolicySpecInitProviderNetworksItems0NetworkSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DNSGcpUpboundIoV1beta1PolicySpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DNSGcpUpboundIoV1beta1PolicySpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DNSGcpUpboundIoV1beta1PolicySpecProviderConfigRefPolicy


schema DNSGcpUpboundIoV1beta1PolicySpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToConfigRef

    metadata?: DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToMetadata

    name: str


schema DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToConfigRefPolicy


schema DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema DNSGcpUpboundIoV1beta1PolicySpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema DNSGcpUpboundIoV1beta1PolicySpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema DNSGcpUpboundIoV1beta1PolicyStatus:
    """
    PolicyStatus defines the observed state of Policy.

    Attributes
    ----------
    atProvider : DNSGcpUpboundIoV1beta1PolicyStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [DNSGcpUpboundIoV1beta1PolicyStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: DNSGcpUpboundIoV1beta1PolicyStatusAtProvider

    conditions?: [DNSGcpUpboundIoV1beta1PolicyStatusConditionsItems0]


schema DNSGcpUpboundIoV1beta1PolicyStatusAtProvider:
    """
    DNS gcp upbound io v1beta1 policy status at provider

    Attributes
    ----------
    alternativeNameServerConfig : [DNSGcpUpboundIoV1beta1PolicyStatusAtProviderAlternativeNameServerConfigItems0], default is Undefined, optional
        Sets an alternative name server for the associated networks.
        When specified, all DNS queries are forwarded to a name server that you choose.
        Names such as .internal are not available when an alternative name server is specified.
        Structure is documented below.
    description : str, default is Undefined, optional
        A textual description field.
    enableInboundForwarding : bool, default is Undefined, optional
        Allows networks bound to this policy to receive DNS queries sent
        by VMs or applications over VPN connections. When enabled, a
        virtual IP address will be allocated from each of the sub-networks
        that are bound to this policy.
    enableLogging : bool, default is Undefined, optional
        Controls whether logging is enabled for the networks bound to this policy.
        Defaults to no logging if not set.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/policies/{{name}}
    networks : [DNSGcpUpboundIoV1beta1PolicyStatusAtProviderNetworksItems0], default is Undefined, optional
        List of network names specifying networks to which this policy is applied.
        Structure is documented below.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    alternativeNameServerConfig?: [DNSGcpUpboundIoV1beta1PolicyStatusAtProviderAlternativeNameServerConfigItems0]

    description?: str

    enableInboundForwarding?: bool

    enableLogging?: bool

    id?: str

    networks?: [DNSGcpUpboundIoV1beta1PolicyStatusAtProviderNetworksItems0]

    project?: str


schema DNSGcpUpboundIoV1beta1PolicyStatusAtProviderAlternativeNameServerConfigItems0:
    """
    DNS gcp upbound io v1beta1 policy status at provider alternative name server config items0

    Attributes
    ----------
    targetNameServers : [DNSGcpUpboundIoV1beta1PolicyStatusAtProviderAlternativeNameServerConfigItems0TargetNameServersItems0], default is Undefined, optional
        Sets an alternative name server for the associated networks. When specified,
        all DNS queries are forwarded to a name server that you choose. Names such as .internal
        are not available when an alternative name server is specified.
        Structure is documented below.
    """


    targetNameServers?: [DNSGcpUpboundIoV1beta1PolicyStatusAtProviderAlternativeNameServerConfigItems0TargetNameServersItems0]


schema DNSGcpUpboundIoV1beta1PolicyStatusAtProviderAlternativeNameServerConfigItems0TargetNameServersItems0:
    """
    DNS gcp upbound io v1beta1 policy status at provider alternative name server config items0 target name servers items0

    Attributes
    ----------
    forwardingPath : str, default is Undefined, optional
        Forwarding path for this TargetNameServer. If unset or default Cloud DNS will make forwarding
        decision based on address ranges, i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go
        to the Internet. When set to private, Cloud DNS will always send queries through VPC for this target
        Possible values are: default, private.
    ipv4Address : str, default is Undefined, optional
        IPv4 address to forward to.
    """


    forwardingPath?: str

    ipv4Address?: str


schema DNSGcpUpboundIoV1beta1PolicyStatusAtProviderNetworksItems0:
    """
    DNS gcp upbound io v1beta1 policy status at provider networks items0

    Attributes
    ----------
    networkUrl : str, default is Undefined, optional
        The id or fully qualified URL of the VPC network to forward queries to.
        This should be formatted like projects/{project}/global/networks/{network} or
        https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
    """


    networkUrl?: str


schema DNSGcpUpboundIoV1beta1PolicyStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


