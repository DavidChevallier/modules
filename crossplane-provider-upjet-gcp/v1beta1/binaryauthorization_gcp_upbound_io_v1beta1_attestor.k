"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Attestor:
    """
    Attestor is the Schema for the Attestors API. An attestor that attests to container image artifacts.

    Attributes
    ----------
    apiVersion : str, default is "binaryauthorization.gcp.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Attestor", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpec, default is Undefined, required
        spec
    status : BinaryauthorizationGcpUpboundIoV1beta1AttestorStatus, default is Undefined, optional
        status
    """


    apiVersion: "binaryauthorization.gcp.upbound.io/v1beta1" = "binaryauthorization.gcp.upbound.io/v1beta1"

    kind: "Attestor" = "Attestor"

    metadata?: v1.ObjectMeta

    spec: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpec

    status?: BinaryauthorizationGcpUpboundIoV1beta1AttestorStatus


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpec:
    """
    AttestorSpec defines the desired state of Attestor

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProvider, default is Undefined, required
        for provider
    initProvider : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProvider

    initProvider?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecProviderConfigRef

    publishConnectionDetailsTo?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecWriteConnectionSecretToRef


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProvider:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec for provider

    Attributes
    ----------
    attestationAuthorityNote : [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0], default is Undefined, optional
        A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
        Structure is documented below.
    description : str, default is Undefined, optional
        A descriptive comment. This field may be updated. The field may be
        displayed in chooser dialogs.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    attestationAuthorityNote?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0]

    description?: str

    project?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec for provider attestation authority note items0

    Attributes
    ----------
    noteReference : str, default is Undefined, optional
        The resource name of a ATTESTATION_AUTHORITY Note, created by the
        user. If the Note is in a different project from the Attestor, it
        should be specified in the format projects/*/notes/* (or the legacy
        providers/*/notes/*). This field may not be updated.
        An attestation by this attestor is stored as a Container Analysis
        ATTESTATION_AUTHORITY Occurrence that names a container image
        and that links to this Note.
    noteReferenceRef : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceRef, default is Undefined, optional
        note reference ref
    noteReferenceSelector : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceSelector, default is Undefined, optional
        note reference selector
    publicKeys : [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0PublicKeysItems0], default is Undefined, optional
        Public keys that verify attestations signed by this attestor. This
        field may be updated.
        If this field is non-empty, one of the specified public keys must
        verify that an attestation was signed by this attestor for the
        image specified in the admission request.
        If this field is empty, this attestor always returns that no valid
        attestations exist.
        Structure is documented below.
    """


    noteReference?: str

    noteReferenceRef?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceRef

    noteReferenceSelector?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceSelector

    publicKeys?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0PublicKeysItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceRef:
    """
    Reference to a Note in containeranalysis to populate noteReference.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceRefPolicy


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceSelector:
    """
    Selector for a Note in containeranalysis to populate noteReference.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceSelectorPolicy


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0NoteReferenceSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0PublicKeysItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec for provider attestation authority note items0 public keys items0

    Attributes
    ----------
    asciiArmoredPgpPublicKey : str, default is Undefined, optional
        ASCII-armored representation of a PGP public key, as the
        entire output by the command
        gpg --export --armor foo@example.com (either LF or CRLF
        line endings). When using this field, id should be left
        blank. The BinAuthz API handlers will calculate the ID
        and fill it in automatically. BinAuthz computes this ID
        as the OpenPGP RFC4880 V4 fingerprint, represented as
        upper-case hex. If id is provided by the caller, it will
        be overwritten by the API-calculated ID.
    comment : str, default is Undefined, optional
        A descriptive comment. This field may be updated.
    id : str, default is Undefined, optional
        The ID of this public key. Signatures verified by BinAuthz
        must include the ID of the public key that can be used to
        verify them, and that ID must match the contents of this
        field exactly. Additional restrictions on this field can
        be imposed based on which public key type is encapsulated.
        See the documentation on publicKey cases below for details.
    pkixPublicKey : [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0], default is Undefined, optional
        A raw PKIX SubjectPublicKeyInfo format public key.
        NOTE: id may be explicitly provided by the caller when using this
        type of public key, but it MUST be a valid RFC3986 URI. If id is left
        blank, a default one will be computed based on the digest of the DER
        encoding of the public key.
        Structure is documented below.
    """


    asciiArmoredPgpPublicKey?: str

    comment?: str

    id?: str

    pkixPublicKey?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecForProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec for provider attestation authority note items0 public keys items0 pkix public key items0

    Attributes
    ----------
    publicKeyPem : str, default is Undefined, optional
        A PEM-encoded public key, as described in
        https://tools.ietf.org/html/rfc7468#section-13
    signatureAlgorithm : str, default is Undefined, optional
        The signature algorithm used to verify a message against
        a signature using this key. These signature algorithm must
        match the structure and any object identifiers encoded in
        publicKeyPem (i.e. this algorithm must match that of the
        public key).
    """


    publicKeyPem?: str

    signatureAlgorithm?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProvider:
    """
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    attestationAuthorityNote : [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0], default is Undefined, optional
        A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
        Structure is documented below.
    description : str, default is Undefined, optional
        A descriptive comment. This field may be updated. The field may be
        displayed in chooser dialogs.
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    attestationAuthorityNote?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0]

    description?: str

    project?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec init provider attestation authority note items0

    Attributes
    ----------
    noteReference : str, default is Undefined, optional
        The resource name of a ATTESTATION_AUTHORITY Note, created by the
        user. If the Note is in a different project from the Attestor, it
        should be specified in the format projects/*/notes/* (or the legacy
        providers/*/notes/*). This field may not be updated.
        An attestation by this attestor is stored as a Container Analysis
        ATTESTATION_AUTHORITY Occurrence that names a container image
        and that links to this Note.
    noteReferenceRef : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceRef, default is Undefined, optional
        note reference ref
    noteReferenceSelector : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceSelector, default is Undefined, optional
        note reference selector
    publicKeys : [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0PublicKeysItems0], default is Undefined, optional
        Public keys that verify attestations signed by this attestor. This
        field may be updated.
        If this field is non-empty, one of the specified public keys must
        verify that an attestation was signed by this attestor for the
        image specified in the admission request.
        If this field is empty, this attestor always returns that no valid
        attestations exist.
        Structure is documented below.
    """


    noteReference?: str

    noteReferenceRef?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceRef

    noteReferenceSelector?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceSelector

    publicKeys?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0PublicKeysItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceRef:
    """
    Reference to a Note in containeranalysis to populate noteReference.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceRefPolicy


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceSelector:
    """
    Selector for a Note in containeranalysis to populate noteReference.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference
        as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceSelectorPolicy


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0NoteReferenceSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0PublicKeysItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec init provider attestation authority note items0 public keys items0

    Attributes
    ----------
    asciiArmoredPgpPublicKey : str, default is Undefined, optional
        ASCII-armored representation of a PGP public key, as the
        entire output by the command
        gpg --export --armor foo@example.com (either LF or CRLF
        line endings). When using this field, id should be left
        blank. The BinAuthz API handlers will calculate the ID
        and fill it in automatically. BinAuthz computes this ID
        as the OpenPGP RFC4880 V4 fingerprint, represented as
        upper-case hex. If id is provided by the caller, it will
        be overwritten by the API-calculated ID.
    comment : str, default is Undefined, optional
        A descriptive comment. This field may be updated.
    id : str, default is Undefined, optional
        The ID of this public key. Signatures verified by BinAuthz
        must include the ID of the public key that can be used to
        verify them, and that ID must match the contents of this
        field exactly. Additional restrictions on this field can
        be imposed based on which public key type is encapsulated.
        See the documentation on publicKey cases below for details.
    pkixPublicKey : [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0], default is Undefined, optional
        A raw PKIX SubjectPublicKeyInfo format public key.
        NOTE: id may be explicitly provided by the caller when using this
        type of public key, but it MUST be a valid RFC3986 URI. If id is left
        blank, a default one will be computed based on the digest of the DER
        encoding of the public key.
        Structure is documented below.
    """


    asciiArmoredPgpPublicKey?: str

    comment?: str

    id?: str

    pkixPublicKey?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecInitProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor spec init provider attestation authority note items0 public keys items0 pkix public key items0

    Attributes
    ----------
    publicKeyPem : str, default is Undefined, optional
        A PEM-encoded public key, as described in
        https://tools.ietf.org/html/rfc7468#section-13
    signatureAlgorithm : str, default is Undefined, optional
        The signature algorithm used to verify a message against
        a signature using this key. These signature algorithm must
        match the structure and any object identifiers encoded in
        publicKeyPem (i.e. this algorithm must match that of the
        public key).
    """


    publicKeyPem?: str

    signatureAlgorithm?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecProviderConfigRefPolicy


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToConfigRef

    metadata?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToMetadata

    name: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToConfigRefPolicy


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorStatus:
    """
    AttestorStatus defines the observed state of Attestor.

    Attributes
    ----------
    atProvider : BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProvider

    conditions?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusConditionsItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProvider:
    """
    binaryauthorization gcp upbound io v1beta1 attestor status at provider

    Attributes
    ----------
    attestationAuthorityNote : [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0], default is Undefined, optional
        A Container Analysis ATTESTATION_AUTHORITY Note, created by the user.
        Structure is documented below.
    description : str, default is Undefined, optional
        A descriptive comment. This field may be updated. The field may be
        displayed in chooser dialogs.
    id : str, default is Undefined, optional
        an identifier for the resource with format projects/{{project}}/attestors/{{name}}
    project : str, default is Undefined, optional
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
    """


    attestationAuthorityNote?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0]

    description?: str

    id?: str

    project?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor status at provider attestation authority note items0

    Attributes
    ----------
    delegationServiceAccountEmail : str, default is Undefined, optional
        (Output)
        This field will contain the service account email address that
        this Attestor will use as the principal when querying Container
        Analysis. Attestor administrators must grant this service account
        the IAM role needed to read attestations from the noteReference in
        Container Analysis (containeranalysis.notes.occurrences.viewer).
        This email address is fixed for the lifetime of the Attestor, but
        callers should not make any other assumptions about the service
        account email; future versions may use an email based on a
        different naming pattern.
    noteReference : str, default is Undefined, optional
        The resource name of a ATTESTATION_AUTHORITY Note, created by the
        user. If the Note is in a different project from the Attestor, it
        should be specified in the format projects/*/notes/* (or the legacy
        providers/*/notes/*). This field may not be updated.
        An attestation by this attestor is stored as a Container Analysis
        ATTESTATION_AUTHORITY Occurrence that names a container image
        and that links to this Note.
    publicKeys : [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0PublicKeysItems0], default is Undefined, optional
        Public keys that verify attestations signed by this attestor. This
        field may be updated.
        If this field is non-empty, one of the specified public keys must
        verify that an attestation was signed by this attestor for the
        image specified in the admission request.
        If this field is empty, this attestor always returns that no valid
        attestations exist.
        Structure is documented below.
    """


    delegationServiceAccountEmail?: str

    noteReference?: str

    publicKeys?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0PublicKeysItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0PublicKeysItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor status at provider attestation authority note items0 public keys items0

    Attributes
    ----------
    asciiArmoredPgpPublicKey : str, default is Undefined, optional
        ASCII-armored representation of a PGP public key, as the
        entire output by the command
        gpg --export --armor foo@example.com (either LF or CRLF
        line endings). When using this field, id should be left
        blank. The BinAuthz API handlers will calculate the ID
        and fill it in automatically. BinAuthz computes this ID
        as the OpenPGP RFC4880 V4 fingerprint, represented as
        upper-case hex. If id is provided by the caller, it will
        be overwritten by the API-calculated ID.
    comment : str, default is Undefined, optional
        A descriptive comment. This field may be updated.
    id : str, default is Undefined, optional
        The ID of this public key. Signatures verified by BinAuthz
        must include the ID of the public key that can be used to
        verify them, and that ID must match the contents of this
        field exactly. Additional restrictions on this field can
        be imposed based on which public key type is encapsulated.
        See the documentation on publicKey cases below for details.
    pkixPublicKey : [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0], default is Undefined, optional
        A raw PKIX SubjectPublicKeyInfo format public key.
        NOTE: id may be explicitly provided by the caller when using this
        type of public key, but it MUST be a valid RFC3986 URI. If id is left
        blank, a default one will be computed based on the digest of the DER
        encoding of the public key.
        Structure is documented below.
    """


    asciiArmoredPgpPublicKey?: str

    comment?: str

    id?: str

    pkixPublicKey?: [BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0]


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusAtProviderAttestationAuthorityNoteItems0PublicKeysItems0PkixPublicKeyItems0:
    """
    binaryauthorization gcp upbound io v1beta1 attestor status at provider attestation authority note items0 public keys items0 pkix public key items0

    Attributes
    ----------
    publicKeyPem : str, default is Undefined, optional
        A PEM-encoded public key, as described in
        https://tools.ietf.org/html/rfc7468#section-13
    signatureAlgorithm : str, default is Undefined, optional
        The signature algorithm used to verify a message against
        a signature using this key. These signature algorithm must
        match the structure and any object identifiers encoded in
        publicKeyPem (i.e. this algorithm must match that of the
        public key).
    """


    publicKeyPem?: str

    signatureAlgorithm?: str


schema BinaryauthorizationGcpUpboundIoV1beta1AttestorStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


