"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Grant:
    """
    Grant is the Schema for the Grants API

    Attributes
    ----------
    apiVersion : str, default is "kms.services.k8s.aws/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Grant", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KmsServicesK8sAwsV1alpha1GrantSpec, default is Undefined, optional
        spec
    status : KmsServicesK8sAwsV1alpha1GrantStatus, default is Undefined, optional
        status
    """


    apiVersion: "kms.services.k8s.aws/v1alpha1" = "kms.services.k8s.aws/v1alpha1"

    kind: "Grant" = "Grant"

    metadata?: v1.ObjectMeta

    spec?: KmsServicesK8sAwsV1alpha1GrantSpec

    status?: KmsServicesK8sAwsV1alpha1GrantStatus


schema KmsServicesK8sAwsV1alpha1GrantSpec:
    """
    GrantSpec defines the desired state of Grant.

    Attributes
    ----------
    constraints : KmsServicesK8sAwsV1alpha1GrantSpecConstraints, default is Undefined, optional
        constraints
    grantTokens : [str], default is Undefined, optional
        A list of grant tokens. 
         Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token (https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and Using a grant token (https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    granteePrincipal : str, default is Undefined, required
        The identity that gets the permissions specified in the grant. 
         To specify the principal, use the Amazon Resource Name (ARN) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, IAM roles, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see Amazon Web Services Identity and Access Management (IAM) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the Amazon Web Services General Reference.
    keyID : str, default is Undefined, optional
        Identifies the KMS key for the grant. The grant gives principals permission to use this KMS key. 
         Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. 
         For example: 
         - Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab 
         - Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab 
         To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
    keyRef : KmsServicesK8sAwsV1alpha1GrantSpecKeyRef, default is Undefined, optional
        key ref
    name : str, default is Undefined, optional
        A friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request. 
         When this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request. 
         When this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens for the same grant ID can be used interchangeably.
    operations : [str], default is Undefined, required
        A list of operations that the grant permits. 
         This list must include only operations that are permitted in a grant. Also, the operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric encryption KMS key that allows the Sign operation, or a grant for an asymmetric KMS key that allows the GenerateDataKey operation. If you try, KMS returns a ValidationError exception. For details, see Grant operations (https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) in the Key Management Service Developer Guide.
    retiringPrincipal : str, default is Undefined, optional
        The principal that has permission to use the RetireGrant operation to retire the grant. 
         To specify the principal, use the Amazon Resource Name (ARN) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see Amazon Web Services Identity and Access Management (IAM) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-iam) in the Example ARNs section of the Amazon Web Services General Reference. 
         The grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see RevokeGrant and Retiring and revoking grants (https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete) in the Key Management Service Developer Guide.
    """


    constraints?: KmsServicesK8sAwsV1alpha1GrantSpecConstraints

    grantTokens?: [str]

    granteePrincipal: str

    keyID?: str

    keyRef?: KmsServicesK8sAwsV1alpha1GrantSpecKeyRef

    name?: str

    operations: [str]

    retiringPrincipal?: str


schema KmsServicesK8sAwsV1alpha1GrantSpecConstraints:
    """
    Specifies a grant constraint. 
     KMS supports the EncryptionContextEquals and EncryptionContextSubset grant constraints. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters. For information about grant constraints, see Using grant constraints (https://docs.aws.amazon.com/kms/latest/developerguide/create-grant-overview.html#grant-constraints) in the Key Management Service Developer Guide. For more information about encryption context, see Encryption context (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the Key Management Service Developer Guide . 
     The encryption context grant constraints allow the permissions in the grant only when the encryption context in the request matches (EncryptionContextEquals) or includes (EncryptionContextSubset) the encryption context specified in this structure. 
     The encryption context grant constraints are supported only on grant operations (https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations) that include an EncryptionContext parameter, such as cryptographic operations on symmetric encryption KMS keys. Grants with grant constraints can include the DescribeKey and RetireGrant operations, but the constraint doesn't apply to these operations. If a grant with a grant constraint includes the CreateGrant operation, the constraint requires that any grants created with the CreateGrant permission have an equally strict or stricter encryption context constraint. 
     You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or HMAC KMS keys. These keys don't support an encryption context.

    Attributes
    ----------
    encryptionContextEquals : {str:str}, default is Undefined, optional
        encryption context equals
    encryptionContextSubset : {str:str}, default is Undefined, optional
        encryption context subset
    """


    encryptionContextEquals?: {str:str}

    encryptionContextSubset?: {str:str}


schema KmsServicesK8sAwsV1alpha1GrantSpecKeyRef:
    """
    AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference type to provide more user friendly syntax for references using 'from' field Ex: APIIDRef: 
     from: name: my-api

    Attributes
    ----------
    from : KmsServicesK8sAwsV1alpha1GrantSpecKeyRefFrom, default is Undefined, optional
        from
    """


    from?: KmsServicesK8sAwsV1alpha1GrantSpecKeyRefFrom


schema KmsServicesK8sAwsV1alpha1GrantSpecKeyRefFrom:
    """
    AWSResourceReference provides all the values necessary to reference another k8s resource for finding the identifier(Id/ARN/Name)

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """


    name?: str


schema KmsServicesK8sAwsV1alpha1GrantStatus:
    """
    GrantStatus defines the observed state of Grant

    Attributes
    ----------
    ackResourceMetadata : KmsServicesK8sAwsV1alpha1GrantStatusAckResourceMetadata, default is Undefined, optional
        ack resource metadata
    conditions : [KmsServicesK8sAwsV1alpha1GrantStatusConditionsItems0], default is Undefined, optional
        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    grantID : str, default is Undefined, optional
        The unique identifier for the grant. 
         You can use the GrantId in a ListGrants, RetireGrant, or RevokeGrant operation.
    grantToken : str, default is Undefined, optional
        The grant token. 
         Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see Grant token (https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and Using a grant token (https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    """


    ackResourceMetadata?: KmsServicesK8sAwsV1alpha1GrantStatusAckResourceMetadata

    conditions?: [KmsServicesK8sAwsV1alpha1GrantStatusConditionsItems0]

    grantID?: str

    grantToken?: str


schema KmsServicesK8sAwsV1alpha1GrantStatusAckResourceMetadata:
    """
    All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    ownerAccountID : str, default is Undefined, required
        OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    region : str, default is Undefined, required
        Region is the AWS region in which the resource exists or will exist.
    """


    arn?: str

    ownerAccountID: str

    region: str


schema KmsServicesK8sAwsV1alpha1GrantStatusConditionsItems0:
    """
    Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type is the type of the Condition
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status: str

    $type: str


