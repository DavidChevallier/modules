"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema TargetGroup:
    """
    TargetGroup is the Schema for the TargetGroups API

    Attributes
    ----------
    apiVersion : str, default is "elbv2.aws.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "TargetGroup", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpec, default is Undefined, required
        spec
    status : Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatus, default is Undefined, optional
        status
    """


    apiVersion: "elbv2.aws.crossplane.io/v1alpha1" = "elbv2.aws.crossplane.io/v1alpha1"

    kind: "TargetGroup" = "TargetGroup"

    metadata?: v1.ObjectMeta

    spec: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpec

    status?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatus


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpec:
    """
    TargetGroupSpec defines the desired state of TargetGroup

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
    forProvider : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProvider, default is Undefined, required
        for provider
    providerConfigRef : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProvider

    providerConfigRef?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderConfigRef

    providerRef?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderRef

    publishConnectionDetailsTo?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecWriteConnectionSecretToRef


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProvider:
    """
    TargetGroupParameters defines the desired state of TargetGroup

    Attributes
    ----------
    healthCheckEnabled : bool, default is Undefined, optional
        Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
    healthCheckIntervalSeconds : int, default is Undefined, optional
        The approximate amount of time, in seconds, between health checks of an individual target. If the target group protocol is TCP, TLS, UDP, or TCP_UDP, the supported values are 10 and 30 seconds. If the target group protocol is HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is lambda, the default is 35 seconds.
    healthCheckPath : str, default is Undefined, optional
        [HTTP/HTTPS health checks] The destination for health checks on the targets. 
         [HTTP1 or HTTP2 protocol version] The ping path. The default is /. 
         [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    healthCheckPort : str, default is Undefined, optional
        The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is traffic-port, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.
    healthCheckProtocol : str, default is Undefined, optional
        The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    healthCheckTimeoutSeconds : int, default is Undefined, optional
        The amount of time, in seconds, during which no response from a target means a failed health check. For target groups with a protocol of HTTP, HTTPS, or GENEVE, the default is 5 seconds. For target groups with a protocol of TCP or TLS, this value must be 6 seconds for HTTP health checks and 10 seconds for TCP and HTTPS health checks. If the target type is lambda, the default is 30 seconds.
    healthyThresholdCount : int, default is Undefined, optional
        The number of consecutive health checks successes required before considering an unhealthy target healthy. For target groups with a protocol of HTTP or HTTPS, the default is 5. For target groups with a protocol of TCP, TLS, or GENEVE, the default is 3. If the target type is lambda, the default is 5.
    ipAddressType : str, default is Undefined, optional
        The type of IP address used for this target group. The possible values are ipv4 and ipv6. This is an optional parameter. If not specified, the IP address type defaults to ipv4.
    matcher : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderMatcher, default is Undefined, optional
        matcher
    name : str, default is Undefined, required
        The name of the target group. 
         This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    port : int, default is Undefined, optional
        The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
    $protocol : str, default is Undefined, optional
        The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.
    protocolVersion : str, default is Undefined, optional
        [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1.
    region : str, default is Undefined, required
        Region is which region the TargetGroup will be created.
    tags : [Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderTagsItems0], default is Undefined, optional
        The tags to assign to the target group.
    targetType : str, default is Undefined, optional
        The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type. 
         * instance - Register targets by instance ID. This is the default value. 
         * ip - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses. 
         * lambda - Register a single Lambda function as a target. 
         * alb - Register a single Application Load Balancer as a target.
    unhealthyThresholdCount : int, default is Undefined, optional
        The number of consecutive health check failures required before considering a target unhealthy. If the target group protocol is HTTP or HTTPS, the default is 2. If the target group protocol is TCP or TLS, this value must be the same as the healthy threshold count. If the target group protocol is GENEVE, the default is 3. If the target type is lambda, the default is 2.
    vpcID : str, default is Undefined, optional
        The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.
    vpcIdRef : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    healthCheckEnabled?: bool

    healthCheckIntervalSeconds?: int

    healthCheckPath?: str

    healthCheckPort?: str

    healthCheckProtocol?: str

    healthCheckTimeoutSeconds?: int

    healthyThresholdCount?: int

    ipAddressType?: str

    matcher?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderMatcher

    name: str

    port?: int

    $protocol?: str

    protocolVersion?: str

    region: str

    tags?: [Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderTagsItems0]

    targetType?: str

    unhealthyThresholdCount?: int

    vpcID?: str

    vpcIdRef?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDRef

    vpcIdSelector?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDSelector


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderMatcher:
    """
    [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.

    Attributes
    ----------
    grpcCode : str, default is Undefined, optional
        grpc code
    httpCode : str, default is Undefined, optional
        http code
    """


    grpcCode?: str

    httpCode?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderTagsItems0:
    """
    elbv2 aws crossplane io v1alpha1 target group spec for provider tags items0

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    value : str, default is Undefined, optional
        value
    """


    key?: str

    value?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDRef:
    """
    Reference to VPC for VPCID

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDSelector:
    """
    Selector for references to VPC for VPCID

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDSelectorPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecForProviderVpcIDSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderConfigRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderRef:
    """
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecProviderRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToConfigRef

    metadata?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToMetadata

    name: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToConfigRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatus:
    """
    TargetGroupStatus defines the observed state of TargetGroup.

    Attributes
    ----------
    atProvider : Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProvider

    conditions?: [Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusConditionsItems0]


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProvider:
    """
    TargetGroupObservation defines the observed state of TargetGroup

    Attributes
    ----------
    targetGroups : [Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProviderTargetGroupsItems0], default is Undefined, optional
        Information about the target group.
    """


    targetGroups?: [Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProviderTargetGroupsItems0]


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProviderTargetGroupsItems0:
    """
    elbv2 aws crossplane io v1alpha1 target group status at provider target groups items0

    Attributes
    ----------
    healthCheckEnabled : bool, default is Undefined, optional
        health check enabled
    healthCheckIntervalSeconds : int, default is Undefined, optional
        health check interval seconds
    healthCheckPath : str, default is Undefined, optional
        health check path
    healthCheckPort : str, default is Undefined, optional
        health check port
    healthCheckProtocol : str, default is Undefined, optional
        health check protocol
    healthCheckTimeoutSeconds : int, default is Undefined, optional
        health check timeout seconds
    healthyThresholdCount : int, default is Undefined, optional
        healthy threshold count
    ipAddressType : str, default is Undefined, optional
        ip address type
    loadBalancerARNs : [str], default is Undefined, optional
        load balancer a r ns
    matcher : Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProviderTargetGroupsItems0Matcher, default is Undefined, optional
        matcher
    port : int, default is Undefined, optional
        port
    $protocol : str, default is Undefined, optional
        protocol
    protocolVersion : str, default is Undefined, optional
        protocol version
    targetGroupARN : str, default is Undefined, optional
        target group a r n
    targetGroupName : str, default is Undefined, optional
        target group name
    targetType : str, default is Undefined, optional
        target type
    unhealthyThresholdCount : int, default is Undefined, optional
        unhealthy threshold count
    vpcID : str, default is Undefined, optional
        vpc ID
    """


    healthCheckEnabled?: bool

    healthCheckIntervalSeconds?: int

    healthCheckPath?: str

    healthCheckPort?: str

    healthCheckProtocol?: str

    healthCheckTimeoutSeconds?: int

    healthyThresholdCount?: int

    ipAddressType?: str

    loadBalancerARNs?: [str]

    matcher?: Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProviderTargetGroupsItems0Matcher

    port?: int

    $protocol?: str

    protocolVersion?: str

    targetGroupARN?: str

    targetGroupName?: str

    targetType?: str

    unhealthyThresholdCount?: int

    vpcID?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusAtProviderTargetGroupsItems0Matcher:
    """
    The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes.

    Attributes
    ----------
    grpcCode : str, default is Undefined, optional
        grpc code
    httpCode : str, default is Undefined, optional
        http code
    """


    grpcCode?: str

    httpCode?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetGroupStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


