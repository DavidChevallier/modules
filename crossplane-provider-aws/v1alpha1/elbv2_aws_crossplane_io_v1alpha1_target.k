"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Target:
    """
    Target is the Schema for registering a target to an ELBV2 TargetGroup.

    Attributes
    ----------
    apiVersion : str, default is "elbv2.aws.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Target", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Elbv2AwsCrossplaneIoV1alpha1TargetSpec, default is Undefined, required
        spec
    status : Elbv2AwsCrossplaneIoV1alpha1TargetStatus, default is Undefined, optional
        status
    """


    apiVersion: "elbv2.aws.crossplane.io/v1alpha1" = "elbv2.aws.crossplane.io/v1alpha1"

    kind: "Target" = "Target"

    metadata?: v1.ObjectMeta

    spec: Elbv2AwsCrossplaneIoV1alpha1TargetSpec

    status?: Elbv2AwsCrossplaneIoV1alpha1TargetStatus


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpec:
    """
    TargetSpec defines the desired state of a Target

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
    forProvider : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProvider, default is Undefined, required
        for provider
    providerConfigRef : Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Elbv2AwsCrossplaneIoV1alpha1TargetSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProvider

    providerConfigRef?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderConfigRef

    providerRef?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderRef

    publishConnectionDetailsTo?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecWriteConnectionSecretToRef


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProvider:
    """
    TargetParameters defines the desired state of a Target

    Attributes
    ----------
    availabilityZone : str, default is Undefined, optional
        An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer. 
         This parameter is not supported if the target type of the target group is instance or alb. 
         If the target type is ip and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required. 
         With an Application Load Balancer, if the target type is ip and the IP address is outside the VPC for the target group, the only supported value is all. 
         If the target type is lambda, this parameter is optional and the only supported value is all.
    lambdaArn : str, default is Undefined, optional
        The LambdaARN that should be used as target. 
         Note: If you want to reference anything else than Lambda you currently have to specify the crossplane.io/external-name annotation directly. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target.
    lambdaArnRef : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnRef, default is Undefined, optional
        lambda arn ref
    lambdaArnSelector : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnSelector, default is Undefined, optional
        lambda arn selector
    port : int, default is Undefined, optional
        The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
    region : str, default is Undefined, required
        The AWS region the target resides in.
    targetGroupArn : str, default is Undefined, optional
        The Amazon Resource Name (ARN) of the target group. 
         One of TargetGroupARN, TargetGroupARNRef or TargetGroupARNSelector is required.
    targetGroupArnRef : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnRef, default is Undefined, optional
        target group arn ref
    targetGroupArnSelector : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnSelector, default is Undefined, optional
        target group arn selector
    """


    availabilityZone?: str

    lambdaArn?: str

    lambdaArnRef?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnRef

    lambdaArnSelector?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnSelector

    port?: int

    region: str

    targetGroupArn?: str

    targetGroupArnRef?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnRef

    targetGroupArnSelector?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnSelector


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnRef:
    """
    LambdaARNRef references a Lambda Function to set LambdaARN.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnSelector:
    """
    LambdaARNSelector references a Lambda Function to set LambdaARN.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnSelectorPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderLambdaArnSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnRef:
    """
    TargetGroupARNRef selects a ELBv2 TargetGroupARN with the given name.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnSelector:
    """
    TargetGroupARNSelector selects a ELBv2 TargetGroupARN with the given labels.

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnSelectorPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecForProviderTargetGroupArnSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderConfigRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderRef:
    """
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecProviderRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToConfigRef

    metadata?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToMetadata

    name: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToConfigRefPolicy


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetStatus:
    """
    TargetStatus defines the observed state of a Target

    Attributes
    ----------
    atProvider : Elbv2AwsCrossplaneIoV1alpha1TargetStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Elbv2AwsCrossplaneIoV1alpha1TargetStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: Elbv2AwsCrossplaneIoV1alpha1TargetStatusAtProvider

    conditions?: [Elbv2AwsCrossplaneIoV1alpha1TargetStatusConditionsItems0]


schema Elbv2AwsCrossplaneIoV1alpha1TargetStatusAtProvider:
    """
    TargetObservation defines the observed state of a Target

    Attributes
    ----------
    healthCheckPort : str, default is Undefined, optional
        The port to use to connect with the target.
    targetHealth : Elbv2AwsCrossplaneIoV1alpha1TargetStatusAtProviderTargetHealth, default is Undefined, optional
        target health
    """


    healthCheckPort?: str

    targetHealth?: Elbv2AwsCrossplaneIoV1alpha1TargetStatusAtProviderTargetHealth


schema Elbv2AwsCrossplaneIoV1alpha1TargetStatusAtProviderTargetHealth:
    """
    The health information for the target.

    Attributes
    ----------
    description : str, default is Undefined, optional
        A description of the target health that provides additional details. If the state is healthy, a description is not provided.
    reason : str, default is Undefined, optional
        The reason code. 
         If the target state is healthy, a reason code is not provided. 
         If the target state is initial, the reason code can be one of the following values: 
         * Elb.RegistrationInProgress - The target is in the process of being registered with the load balancer. 
         * Elb.InitialHealthChecking - The load balancer is still sending the target the minimum number of health checks required to determine its health status. 
         If the target state is unhealthy, the reason code can be one of the following values: 
         * Target.ResponseCodeMismatch - The health checks did not return an expected HTTP code. Applies only to Application Load Balancers and Gateway Load Balancers. 
         * Target.Timeout - The health check requests timed out. Applies only to Application Load Balancers and Gateway Load Balancers. 
         * Target.FailedHealthChecks - The load balancer received an error while establishing a connection to the target or the target response was malformed. 
         * Elb.InternalError - The health checks failed due to an internal error. Applies only to Application Load Balancers. 
         If the target state is unused, the reason code can be one of the following values: 
         * Target.NotRegistered - The target is not registered with the target group. 
         * Target.NotInUse - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer. 
         * Target.InvalidState - The target is in the stopped or terminated state. 
         * Target.IpUnusable - The target IP address is reserved for use by a load balancer. 
         If the target state is draining, the reason code can be the following value: 
         * Target.DeregistrationInProgress - The target is in the process of being deregistered and the deregistration delay period has not expired. 
         If the target state is unavailable, the reason code can be the following value: 
         * Target.HealthCheckDisabled - Health checks are disabled for the target group. Applies only to Application Load Balancers. 
         * Elb.InternalError - Target health is unavailable due to an internal error. Applies only to Network Load Balancers.
    state : str, default is Undefined, optional
        The state of the target.
    """


    description?: str

    reason?: str

    state?: str


schema Elbv2AwsCrossplaneIoV1alpha1TargetStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


