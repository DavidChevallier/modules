"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Subnet:
    """
    A Subnet is a managed resource that represents an AWS VPC Subnet.

    Attributes
    ----------
    apiVersion : str, default is "ec2.aws.crossplane.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Subnet", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Ec2AwsCrossplaneIoV1beta1SubnetSpec, default is Undefined, required
        spec
    status : Ec2AwsCrossplaneIoV1beta1SubnetStatus, default is Undefined, optional
        status
    """


    apiVersion: "ec2.aws.crossplane.io/v1beta1" = "ec2.aws.crossplane.io/v1beta1"

    kind: "Subnet" = "Subnet"

    metadata?: v1.ObjectMeta

    spec: Ec2AwsCrossplaneIoV1beta1SubnetSpec

    status?: Ec2AwsCrossplaneIoV1beta1SubnetStatus


schema Ec2AwsCrossplaneIoV1beta1SubnetSpec:
    """
    A SubnetSpec defines the desired state of a Subnet.

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
    forProvider : Ec2AwsCrossplaneIoV1beta1SubnetSpecForProvider, default is Undefined, required
        for provider
    providerConfigRef : Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : Ec2AwsCrossplaneIoV1beta1SubnetSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: Ec2AwsCrossplaneIoV1beta1SubnetSpecForProvider

    providerConfigRef?: Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderConfigRef

    providerRef?: Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderRef

    publishConnectionDetailsTo?: Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: Ec2AwsCrossplaneIoV1beta1SubnetSpecWriteConnectionSecretToRef


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecForProvider:
    """
    SubnetParameters define the desired state of an AWS VPC Subnet.

    Attributes
    ----------
    assignIpv6AddressOnCreation : bool, default is Undefined, optional
        Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
    availabilityZone : str, default is Undefined, optional
        The Availability Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.
    availabilityZoneId : str, default is Undefined, optional
        The AZ ID or the Local Zone ID of the subnet.
    cidrBlock : str, default is Undefined, required
        CIDRBlock is the IPv4 network range for the Subnet, in CIDR notation. For example, 10.0.0.0/18.
    ipv6CIDRBlock : str, default is Undefined, optional
        The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
    mapPublicIPOnLaunch : bool, default is Undefined, optional
        Indicates whether instances launched in this subnet receive a public IPv4 address.
    region : str, default is Undefined, optional
        Region is the region you'd like your Subnet to be created in.
    tags : [Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderTagsItems0], default is Undefined, optional
        Tags represents to current ec2 tags.
    vpcId : str, default is Undefined, optional
        VPCID is the ID of the VPC.
    vpcIdRef : Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDRef, default is Undefined, optional
        vpc Id ref
    vpcIdSelector : Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDSelector, default is Undefined, optional
        vpc Id selector
    """


    assignIpv6AddressOnCreation?: bool

    availabilityZone?: str

    availabilityZoneId?: str

    cidrBlock: str

    ipv6CIDRBlock?: str

    mapPublicIPOnLaunch?: bool

    region?: str

    tags?: [Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderTagsItems0]

    vpcId?: str

    vpcIdRef?: Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDRef

    vpcIdSelector?: Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDSelector


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderTagsItems0:
    """
    Tag defines a tag

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the name of the tag.
    value : str, default is Undefined, required
        Value is the value of the tag.
    """


    key: str

    value: str


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDRef:
    """
    VPCIDRef reference a VPC to retrieve its vpcId

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDRefPolicy


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDSelector:
    """
    VPCIDSelector selects reference to a VPC to retrieve its vpcId

    Attributes
    ----------
    matchControllerRef : bool, default is Undefined, optional
        MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels ensures an object with matching labels is selected.
    policy : Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDSelectorPolicy, default is Undefined, optional
        policy
    """


    matchControllerRef?: bool

    matchLabels?: {str:str}

    policy?: Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDSelectorPolicy


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecForProviderVpcIDSelectorPolicy:
    """
    Policies for selection.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderConfigRef:
    """
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderConfigRefPolicy


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderRef:
    """
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderRefPolicy


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecProviderRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsTo:
    """
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRef

    metadata?: Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToMetadata

    name: str


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRef:
    """
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRefPolicy


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToConfigRefPolicy:
    """
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecPublishConnectionDetailsToMetadata:
    """
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema Ec2AwsCrossplaneIoV1beta1SubnetSpecWriteConnectionSecretToRef:
    """
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema Ec2AwsCrossplaneIoV1beta1SubnetStatus:
    """
    A SubnetStatus represents the observed state of a Subnet.

    Attributes
    ----------
    atProvider : Ec2AwsCrossplaneIoV1beta1SubnetStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [Ec2AwsCrossplaneIoV1beta1SubnetStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: Ec2AwsCrossplaneIoV1beta1SubnetStatusAtProvider

    conditions?: [Ec2AwsCrossplaneIoV1beta1SubnetStatusConditionsItems0]


schema Ec2AwsCrossplaneIoV1beta1SubnetStatusAtProvider:
    """
    SubnetObservation keeps the state for the external resource

    Attributes
    ----------
    availableIpAddressCount : int, default is Undefined, optional
        The number of unused private IPv4 addresses in the subnet.
    defaultForAz : bool, default is Undefined, optional
        Indicates whether this is the default subnet for the Availability Zone.
    subnetId : str, default is Undefined, optional
        SubnetID is the ID of the Subnet.
    subnetState : str, default is Undefined, optional
        SubnetState is the current state of the Subnet.
    """


    availableIpAddressCount?: int

    defaultForAz?: bool

    subnetId?: str

    subnetState?: "pending" | "available"


schema Ec2AwsCrossplaneIoV1beta1SubnetStatusConditionsItems0:
    """
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


