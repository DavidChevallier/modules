"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema PreprovisioningImage:
    """
    PreprovisioningImage is the Schema for the preprovisioningimages API

    Attributes
    ----------
    apiVersion : str, default is "metal3.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "PreprovisioningImage", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : Metal3IoV1alpha1PreprovisioningImageSpec, default is Undefined, optional
        spec
    status : Metal3IoV1alpha1PreprovisioningImageStatus, default is Undefined, optional
        status
    """


    apiVersion: "metal3.io/v1alpha1" = "metal3.io/v1alpha1"

    kind: "PreprovisioningImage" = "PreprovisioningImage"

    metadata?: v1.ObjectMeta

    spec?: Metal3IoV1alpha1PreprovisioningImageSpec

    status?: Metal3IoV1alpha1PreprovisioningImageStatus


schema Metal3IoV1alpha1PreprovisioningImageSpec:
    """
    PreprovisioningImageSpec defines the desired state of PreprovisioningImage

    Attributes
    ----------
    acceptFormats : [str], default is Undefined, optional
        acceptFormats is a list of acceptable image formats.
    architecture : str, default is Undefined, optional
        architecture is the processor architecture for which to build the image.
    networkDataName : str, default is Undefined, optional
        networkDataName is the name of a Secret in the local namespace that contains network data to build in to the image.
    """


    acceptFormats?: [str]

    architecture?: str

    networkDataName?: str


schema Metal3IoV1alpha1PreprovisioningImageStatus:
    """
    PreprovisioningImageStatus defines the observed state of PreprovisioningImage

    Attributes
    ----------
    architecture : str, default is Undefined, optional
        architecture is the processor architecture for which the image is built
    conditions : [Metal3IoV1alpha1PreprovisioningImageStatusConditionsItems0], default is Undefined, optional
        conditions describe the state of the built image
    extraKernelParams : str, default is Undefined, optional
        extraKernelParams is a string with extra parameters to pass to the kernel when booting the image over network. Only makes sense for initrd images.
    format : str, default is Undefined, optional
        format is the type of image that is available at the download url: either iso or initrd.
    imageUrl : str, default is Undefined, optional
        imageUrl is the URL from which the built image can be downloaded.
    kernelUrl : str, default is Undefined, optional
        kernelUrl is the URL from which the kernel of the image can be downloaded. Only makes sense for initrd images.
    networkData : Metal3IoV1alpha1PreprovisioningImageStatusNetworkData, default is Undefined, optional
        network data
    """


    architecture?: str

    conditions?: [Metal3IoV1alpha1PreprovisioningImageStatusConditionsItems0]

    extraKernelParams?: str

    format?: "iso" | "initrd"

    imageUrl?: str

    kernelUrl?: str

    networkData?: Metal3IoV1alpha1PreprovisioningImageStatusNetworkData


schema Metal3IoV1alpha1PreprovisioningImageStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


schema Metal3IoV1alpha1PreprovisioningImageStatusNetworkData:
    """
    networkData is a reference to the version of the Secret containing the network data used to build the image.

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    version : str, default is Undefined, optional
        version
    """


    name?: str

    version?: str


