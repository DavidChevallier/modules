"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Provisioner:
    """
    Provisioner is the Schema for the Provisioners API

    Attributes
    ----------
    apiVersion : str, default is "karpenter.sh/v1alpha5", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Provisioner", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KarpenterShV1alpha5ProvisionerSpec, default is Undefined, optional
        spec
    status : KarpenterShV1alpha5ProvisionerStatus, default is Undefined, optional
        status
    """


    apiVersion: "karpenter.sh/v1alpha5" = "karpenter.sh/v1alpha5"

    kind: "Provisioner" = "Provisioner"

    metadata?: v1.ObjectMeta

    spec?: KarpenterShV1alpha5ProvisionerSpec

    status?: KarpenterShV1alpha5ProvisionerStatus


schema KarpenterShV1alpha5ProvisionerSpec:
    """
    ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are applied to every node.
    consolidation : KarpenterShV1alpha5ProvisionerSpecConsolidation, default is Undefined, optional
        consolidation
    kubeletConfiguration : KarpenterShV1alpha5ProvisionerSpecKubeletConfiguration, default is Undefined, optional
        kubelet configuration
    labels : {str:str}, default is Undefined, optional
        Labels are layered with Requirements and applied to every node.
    limits : KarpenterShV1alpha5ProvisionerSpecLimits, default is Undefined, optional
        limits
    provider : any, default is Undefined, optional
        Provider contains fields specific to your cloudprovider.
    providerRef : KarpenterShV1alpha5ProvisionerSpecProviderRef, default is Undefined, optional
        provider ref
    requirements : [KarpenterShV1alpha5ProvisionerSpecRequirementsItems0], default is Undefined, optional
        Requirements are layered with Labels and applied to every node.
    startupTaints : [KarpenterShV1alpha5ProvisionerSpecStartupTaintsItems0], default is Undefined, optional
        StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.
    taints : [KarpenterShV1alpha5ProvisionerSpecTaintsItems0], default is Undefined, optional
        Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.
    ttlSecondsAfterEmpty : int, default is Undefined, optional
        TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets. 
         Termination due to no utilization is disabled if this field is not set.
    ttlSecondsUntilExpired : int, default is Undefined, optional
        TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing. 
         Termination due to expiration is disabled if this field is not set.
    weight : int, default is Undefined, optional
        Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.
    """


    annotations?: {str:str}

    consolidation?: KarpenterShV1alpha5ProvisionerSpecConsolidation

    kubeletConfiguration?: KarpenterShV1alpha5ProvisionerSpecKubeletConfiguration

    labels?: {str:str}

    limits?: KarpenterShV1alpha5ProvisionerSpecLimits

    provider?: any

    providerRef?: KarpenterShV1alpha5ProvisionerSpecProviderRef

    requirements?: [KarpenterShV1alpha5ProvisionerSpecRequirementsItems0]

    startupTaints?: [KarpenterShV1alpha5ProvisionerSpecStartupTaintsItems0]

    taints?: [KarpenterShV1alpha5ProvisionerSpecTaintsItems0]

    ttlSecondsAfterEmpty?: int

    ttlSecondsUntilExpired?: int

    weight?: int


    check:
        weight <= 100
        weight >= 1


schema KarpenterShV1alpha5ProvisionerSpecConsolidation:
    """
    Consolidation are the consolidation parameters

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Enabled enables consolidation if it has been set
    """


    enabled?: bool


schema KarpenterShV1alpha5ProvisionerSpecKubeletConfiguration:
    """
    KubeletConfiguration are options passed to the kubelet when provisioning nodes

    Attributes
    ----------
    clusterDNS : [str], default is Undefined, optional
        clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.
    containerRuntime : str, default is Undefined, optional
        ContainerRuntime is the container runtime to be used with your worker nodes.
    cpuCFSQuota : bool, default is Undefined, optional
        CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.
    evictionHard : {str:str}, default is Undefined, optional
        EvictionHard is the map of signal names to quantities that define hard eviction thresholds
    evictionMaxPodGracePeriod : int, default is Undefined, optional
        EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.
    evictionSoft : {str:str}, default is Undefined, optional
        EvictionSoft is the map of signal names to quantities that define soft eviction thresholds
    evictionSoftGracePeriod : {str:str}, default is Undefined, optional
        EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal
    imageGCHighThresholdPercent : int, default is Undefined, optional
        ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.
    imageGCLowThresholdPercent : int, default is Undefined, optional
        ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent
    kubeReserved : {str:int | str}, default is Undefined, optional
        KubeReserved contains resources reserved for Kubernetes system components.
    maxPods : int, default is Undefined, optional
        MaxPods is an override for the maximum number of pods that can run on a worker node instance.
    podsPerCore : int, default is Undefined, optional
        PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.
    systemReserved : {str:int | str}, default is Undefined, optional
        SystemReserved contains resources reserved for OS system daemons and kernel memory.
    """


    clusterDNS?: [str]

    containerRuntime?: str

    cpuCFSQuota?: bool

    evictionHard?: {str:str}

    evictionMaxPodGracePeriod?: int

    evictionSoft?: {str:str}

    evictionSoftGracePeriod?: {str:str}

    imageGCHighThresholdPercent?: int

    imageGCLowThresholdPercent?: int

    kubeReserved?: {str:int | str}

    maxPods?: int

    podsPerCore?: int

    systemReserved?: {str:int | str}


    check:
        imageGCHighThresholdPercent <= 100
        imageGCHighThresholdPercent >= 0
        imageGCLowThresholdPercent <= 100
        imageGCLowThresholdPercent >= 0
        all _, n in kubeReserved { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if kubeReserved
        maxPods >= 0
        podsPerCore >= 0
        all _, n in systemReserved { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if systemReserved


schema KarpenterShV1alpha5ProvisionerSpecLimits:
    """
    Limits define a set of bounds for provisioning capacity.

    Attributes
    ----------
    resources : {str:int | str}, default is Undefined, optional
        Resources contains all the allocatable resources that Karpenter supports for limiting.
    """


    resources?: {str:int | str}


    check:
        all _, n in resources { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if resources


schema KarpenterShV1alpha5ProvisionerSpecProviderRef:
    """
    ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
    kind : str, default is Undefined, optional
        Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    name : str, default is Undefined, required
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion?: str

    kind?: str

    name: str


schema KarpenterShV1alpha5ProvisionerSpecRequirementsItems0:
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema KarpenterShV1alpha5ProvisionerSpecStartupTaintsItems0:
    """
    The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.

    Attributes
    ----------
    effect : str, default is Undefined, required
        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, required
        Required. The taint key to be applied to a node.
    timeAdded : str, default is Undefined, optional
        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    value : str, default is Undefined, optional
        The taint value corresponding to the taint key.
    """


    effect: str

    key: str

    timeAdded?: str

    value?: str


schema KarpenterShV1alpha5ProvisionerSpecTaintsItems0:
    """
    The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.

    Attributes
    ----------
    effect : str, default is Undefined, required
        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, required
        Required. The taint key to be applied to a node.
    timeAdded : str, default is Undefined, optional
        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    value : str, default is Undefined, optional
        The taint value corresponding to the taint key.
    """


    effect: str

    key: str

    timeAdded?: str

    value?: str


schema KarpenterShV1alpha5ProvisionerStatus:
    """
    ProvisionerStatus defines the observed state of Provisioner

    Attributes
    ----------
    conditions : [KarpenterShV1alpha5ProvisionerStatusConditionsItems0], default is Undefined, optional
        Conditions is the set of conditions required for this provisioner to scale its target, and indicates whether or not those conditions are met.
    lastScaleTime : str, default is Undefined, optional
        LastScaleTime is the last time the Provisioner scaled the number of nodes
    resources : {str:int | str}, default is Undefined, optional
        Resources is the list of resources that have been provisioned.
    """


    conditions?: [KarpenterShV1alpha5ProvisionerStatusConditionsItems0]

    lastScaleTime?: str

    resources?: {str:int | str}


    check:
        all _, n in resources { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if resources


schema KarpenterShV1alpha5ProvisionerStatusConditionsItems0:
    """
    Condition defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


