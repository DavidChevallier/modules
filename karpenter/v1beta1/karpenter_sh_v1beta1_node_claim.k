"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema NodeClaim:
    """
    NodeClaim is the Schema for the NodeClaims API

    Attributes
    ----------
    apiVersion : str, default is "karpenter.sh/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "NodeClaim", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KarpenterShV1beta1NodeClaimSpec, default is Undefined, optional
        spec
    status : KarpenterShV1beta1NodeClaimStatus, default is Undefined, optional
        status
    """


    apiVersion: "karpenter.sh/v1beta1" = "karpenter.sh/v1beta1"

    kind: "NodeClaim" = "NodeClaim"

    metadata?: v1.ObjectMeta

    spec?: KarpenterShV1beta1NodeClaimSpec

    status?: KarpenterShV1beta1NodeClaimStatus


schema KarpenterShV1beta1NodeClaimSpec:
    """
    NodeClaimSpec describes the desired state of the NodeClaim

    Attributes
    ----------
    kubelet : KarpenterShV1beta1NodeClaimSpecKubelet, default is Undefined, optional
        kubelet
    nodeClassRef : KarpenterShV1beta1NodeClaimSpecNodeClassRef, default is Undefined, required
        node class ref
    requirements : [KarpenterShV1beta1NodeClaimSpecRequirementsItems0], default is Undefined, required
        Requirements are layered with GetLabels and applied to every node.
    resources : KarpenterShV1beta1NodeClaimSpecResources, default is Undefined, optional
        resources
    startupTaints : [KarpenterShV1beta1NodeClaimSpecStartupTaintsItems0], default is Undefined, optional
        StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.
    taints : [KarpenterShV1beta1NodeClaimSpecTaintsItems0], default is Undefined, optional
        Taints will be applied to the NodeClaim's node.
    """


    kubelet?: KarpenterShV1beta1NodeClaimSpecKubelet

    nodeClassRef: KarpenterShV1beta1NodeClaimSpecNodeClassRef

    requirements: [KarpenterShV1beta1NodeClaimSpecRequirementsItems0]

    resources?: KarpenterShV1beta1NodeClaimSpecResources

    startupTaints?: [KarpenterShV1beta1NodeClaimSpecStartupTaintsItems0]

    taints?: [KarpenterShV1beta1NodeClaimSpecTaintsItems0]


    check:
        len(requirements) <= 30


schema KarpenterShV1beta1NodeClaimSpecKubelet:
    """
    Kubelet defines args to be used when configuring kubelet on provisioned nodes. They are a subset of the upstream types, recognizing not all options may be supported. Wherever possible, the types and names should reflect the upstream kubelet types.

    Attributes
    ----------
    clusterDNS : [str], default is Undefined, optional
        clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.
    cpuCFSQuota : bool, default is Undefined, optional
        CPUCFSQuota enables CPU CFS quota enforcement for containers that specify CPU limits.
    evictionHard : {str:str}, default is Undefined, optional
        EvictionHard is the map of signal names to quantities that define hard eviction thresholds
    evictionMaxPodGracePeriod : int, default is Undefined, optional
        EvictionMaxPodGracePeriod is the maximum allowed grace period (in seconds) to use when terminating pods in response to soft eviction thresholds being met.
    evictionSoft : {str:str}, default is Undefined, optional
        EvictionSoft is the map of signal names to quantities that define soft eviction thresholds
    evictionSoftGracePeriod : {str:str}, default is Undefined, optional
        EvictionSoftGracePeriod is the map of signal names to quantities that define grace periods for each eviction signal
    imageGCHighThresholdPercent : int, default is Undefined, optional
        ImageGCHighThresholdPercent is the percent of disk usage after which image garbage collection is always run. The percent is calculated by dividing this field value by 100, so this field must be between 0 and 100, inclusive. When specified, the value must be greater than ImageGCLowThresholdPercent.
    imageGCLowThresholdPercent : int, default is Undefined, optional
        ImageGCLowThresholdPercent is the percent of disk usage before which image garbage collection is never run. Lowest disk usage to garbage collect to. The percent is calculated by dividing this field value by 100, so the field value must be between 0 and 100, inclusive. When specified, the value must be less than imageGCHighThresholdPercent
    kubeReserved : {str:int | str}, default is Undefined, optional
        KubeReserved contains resources reserved for Kubernetes system components.
    maxPods : int, default is Undefined, optional
        MaxPods is an override for the maximum number of pods that can run on a worker node instance.
    podsPerCore : int, default is Undefined, optional
        PodsPerCore is an override for the number of pods that can run on a worker node instance based on the number of cpu cores. This value cannot exceed MaxPods, so, if MaxPods is a lower value, that value will be used.
    systemReserved : {str:int | str}, default is Undefined, optional
        SystemReserved contains resources reserved for OS system daemons and kernel memory.
    """


    clusterDNS?: [str]

    cpuCFSQuota?: bool

    evictionHard?: {str:str}

    evictionMaxPodGracePeriod?: int

    evictionSoft?: {str:str}

    evictionSoftGracePeriod?: {str:str}

    imageGCHighThresholdPercent?: int

    imageGCLowThresholdPercent?: int

    kubeReserved?: {str:int | str}

    maxPods?: int

    podsPerCore?: int

    systemReserved?: {str:int | str}


    check:
        all _, n in evictionHard { regex.match(str(n), r"^((\d{1,2}(\.\d{1,2})?|100(\.0{1,2})?)%||(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?)$") } if evictionHard
        all _, n in evictionSoft { regex.match(str(n), r"^((\d{1,2}(\.\d{1,2})?|100(\.0{1,2})?)%||(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?)$") } if evictionSoft
        imageGCHighThresholdPercent <= 100
        imageGCHighThresholdPercent >= 0
        imageGCLowThresholdPercent <= 100
        imageGCLowThresholdPercent >= 0
        all _, n in kubeReserved { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if kubeReserved
        maxPods >= 0
        podsPerCore >= 0
        all _, n in systemReserved { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if systemReserved


schema KarpenterShV1beta1NodeClaimSpecNodeClassRef:
    """
    NodeClassRef is a reference to an object that defines provider specific configuration

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
    kind : str, default is Undefined, optional
        Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    name : str, default is Undefined, required
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion?: str

    kind?: str

    name: str


schema KarpenterShV1beta1NodeClaimSpecRequirementsItems0:
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist" | "Gt" | "Lt"

    values?: [str]


    check:
        len(key) <= 316
        regex.match(str(key), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*(\/))?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$")
        len(values) <= 63
        regex.match(str(values), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if values


schema KarpenterShV1beta1NodeClaimSpecResources:
    """
    Resources models the resource requirements for the NodeClaim to launch

    Attributes
    ----------
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum required resources for the NodeClaim to launch
    """


    requests?: {str:int | str}


    check:
        all _, n in requests { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if requests


schema KarpenterShV1beta1NodeClaimSpecStartupTaintsItems0:
    """
    The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.

    Attributes
    ----------
    effect : str, default is Undefined, required
        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, required
        Required. The taint key to be applied to a node.
    timeAdded : str, default is Undefined, optional
        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    value : str, default is Undefined, optional
        The taint value corresponding to the taint key.
    """


    effect: "NoSchedule" | "PreferNoSchedule" | "NoExecute"

    key: str

    timeAdded?: str

    value?: str


    check:
        len(key) >= 1
        regex.match(str(key), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*(\/))?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$")
        regex.match(str(value), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*(\/))?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$") if value


schema KarpenterShV1beta1NodeClaimSpecTaintsItems0:
    """
    The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.

    Attributes
    ----------
    effect : str, default is Undefined, required
        Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, required
        Required. The taint key to be applied to a node.
    timeAdded : str, default is Undefined, optional
        TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    value : str, default is Undefined, optional
        The taint value corresponding to the taint key.
    """


    effect: "NoSchedule" | "PreferNoSchedule" | "NoExecute"

    key: str

    timeAdded?: str

    value?: str


    check:
        len(key) >= 1
        regex.match(str(key), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*(\/))?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$")
        regex.match(str(value), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*(\/))?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$") if value


schema KarpenterShV1beta1NodeClaimStatus:
    """
    NodeClaimStatus defines the observed state of NodeClaim

    Attributes
    ----------
    allocatable : {str:int | str}, default is Undefined, optional
        Allocatable is the estimated allocatable capacity of the node
    capacity : {str:int | str}, default is Undefined, optional
        Capacity is the estimated full capacity of the node
    conditions : [KarpenterShV1beta1NodeClaimStatusConditionsItems0], default is Undefined, optional
        Conditions contains signals for health and readiness
    imageID : str, default is Undefined, optional
        ImageID is an identifier for the image that runs on the node
    nodeName : str, default is Undefined, optional
        NodeName is the name of the corresponding node object
    providerID : str, default is Undefined, optional
        ProviderID of the corresponding node object
    """


    allocatable?: {str:int | str}

    capacity?: {str:int | str}

    conditions?: [KarpenterShV1beta1NodeClaimStatusConditionsItems0]

    imageID?: str

    nodeName?: str

    providerID?: str


    check:
        all _, n in allocatable { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if allocatable
        all _, n in capacity { regex.match(str(n), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") } if capacity


schema KarpenterShV1beta1NodeClaimStatusConditionsItems0:
    """
    Condition defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


