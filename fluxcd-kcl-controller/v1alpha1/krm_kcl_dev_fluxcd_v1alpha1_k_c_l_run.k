"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema KCLRun:
    """
    KCLRun is the Schema for the kclruns API

    Attributes
    ----------
    apiVersion : str, default is "krm.kcl.dev.fluxcd/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "KCLRun", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : KrmKclDevFluxcdV1alpha1KCLRunSpec, default is Undefined, optional
        spec
    status : KrmKclDevFluxcdV1alpha1KCLRunStatus, default is Undefined, optional
        status
    """


    apiVersion: "krm.kcl.dev.fluxcd/v1alpha1" = "krm.kcl.dev.fluxcd/v1alpha1"

    kind: "KCLRun" = "KCLRun"

    metadata?: v1.ObjectMeta

    spec?: KrmKclDevFluxcdV1alpha1KCLRunSpec

    status?: KrmKclDevFluxcdV1alpha1KCLRunStatus


schema KrmKclDevFluxcdV1alpha1KCLRunSpec:
    """
    KCLRunSpec defines the desired state of KCLRun

    Attributes
    ----------
    kubeConfig : KrmKclDevFluxcdV1alpha1KCLRunSpecKubeConfig, default is Undefined, optional
        kube config
    path : str, default is Undefined, optional
        Path to the directory containing the kcl.mod file.
        Defaults to 'None', which translates to the root path of the SourceRef.
    persistentClient : bool, default is Undefined, optional
        PersistentClient tells the controller to use a persistent Kubernetes
        client for this release. When enabled, the client will be reused for the
        duration of the reconciliation, instead of being created and destroyed
        for each (step of a).


        If not set, it defaults to true.
    serviceAccountName : str, default is Undefined, optional
        The name of the Kubernetes service account to impersonate
        when reconciling this KCL source.
    sourceRef : KrmKclDevFluxcdV1alpha1KCLRunSpecSourceRef, default is Undefined, required
        source ref
    targetNamespace : str, default is Undefined, optional
        TargetNamespace to target when performing operations for the KCL.
        Defaults to the namespace of the KCL source.
    timeout : str, default is Undefined, optional
        Timeout is the time to wait for any individual Kubernetes operation (like Jobs
        for hooks) during the performance. Defaults to '5m0s'.
    """


    kubeConfig?: KrmKclDevFluxcdV1alpha1KCLRunSpecKubeConfig

    path?: str

    persistentClient?: bool

    serviceAccountName?: str

    sourceRef: KrmKclDevFluxcdV1alpha1KCLRunSpecSourceRef

    targetNamespace?: str

    timeout?: str


    check:
        len(serviceAccountName) <= 253 if serviceAccountName
        len(serviceAccountName) >= 1 if serviceAccountName
        len(targetNamespace) <= 63 if targetNamespace
        len(targetNamespace) >= 1 if targetNamespace
        _regex_match(str(timeout), r"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$") if timeout


schema KrmKclDevFluxcdV1alpha1KCLRunSpecKubeConfig:
    """
    The KubeConfig for reconciling the controller on a remote cluster.
    When used in combination with `KCLRunSpec.ServiceAccountName`,
    forces the controller to act on behalf of that Service Account at the
    target cluster.
    If the --default-service-account flag is set, its value will be used as
    a controller level fallback for when `KCLRunSpec.ServiceAccountName`
    is empty.

    Attributes
    ----------
    secretRef : KrmKclDevFluxcdV1alpha1KCLRunSpecKubeConfigSecretRef, default is Undefined, required
        secret ref
    """


    secretRef: KrmKclDevFluxcdV1alpha1KCLRunSpecKubeConfigSecretRef


schema KrmKclDevFluxcdV1alpha1KCLRunSpecKubeConfigSecretRef:
    """
    SecretRef holds the name of a secret that contains a key with
    the kubeconfig file as the value. If no key is set, the key will default
    to 'value'.
    It is recommended that the kubeconfig is self-contained, and the secret
    is regularly updated if credentials such as a cloud-access-token expire.
    Cloud specific `cmd-path` auth helpers will not function without adding
    binaries and credentials to the Pod that is responsible for reconciling
    Kubernetes resources.

    Attributes
    ----------
    key : str, default is Undefined, optional
        Key in the Secret, when not specified an implementation-specific default key is used.
    name : str, default is Undefined, required
        Name of the Secret.
    """


    key?: str

    name: str


schema KrmKclDevFluxcdV1alpha1KCLRunSpecSourceRef:
    """
    Reference of the source where the kcl file is.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, required
        Kind of the referent.
    name : str, default is Undefined, required
        Name of the referent.
    namespace : str, default is Undefined, optional
        Namespace of the referent, defaults to the namespace of the Kubernetes
        resource object that contains the reference.
    """


    apiVersion?: str

    kind: "OCIRepository" | "GitRepository" | "Bucket"

    name: str

    namespace?: str


schema KrmKclDevFluxcdV1alpha1KCLRunStatus:
    """
    KCLRunStatus defines the observed state of KCLRun

    Attributes
    ----------
    conditions : [KrmKclDevFluxcdV1alpha1KCLRunStatusConditionsItems0], default is Undefined, optional
        conditions
    lastAttemptedRevision : str, default is Undefined, optional
        LastAttemptedRevision is the revision of the last reconciliation attempt.
    lastAttemptedRevisionDigest : str, default is Undefined, optional
        LastAttemptedRevisionDigest is the digest of the last reconciliation attempt.
        This is only set for OCIRepository sources.
    """


    conditions?: [KrmKclDevFluxcdV1alpha1KCLRunStatusConditionsItems0]

    lastAttemptedRevision?: str

    lastAttemptedRevisionDigest?: str


schema KrmKclDevFluxcdV1alpha1KCLRunStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource.
    ---
    This struct is intended for direct use as an array at the field path .status.conditions.  For example,


    	type FooStatus struct{
    	    // Represents the observations of a foo's current state.
    	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
    	    // +patchMergeKey=type
    	    // +patchStrategy=merge
    	    // +listType=map
    	    // +listMapKey=type
    	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`


    	    // other fields
    	}

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
        ---
        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
        useful (see .node.status.conditions), the ability to deconflict is important.
        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


