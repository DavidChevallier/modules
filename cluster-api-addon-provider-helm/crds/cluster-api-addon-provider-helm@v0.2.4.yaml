apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: helmchartproxies.addons.cluster.x-k8s.io
spec:
  group: addons.cluster.x-k8s.io
  names:
    kind: HelmChartProxy
    listKind: HelmChartProxyList
    plural: helmchartproxies
    shortNames:
    - hcp
    singular: helmchartproxy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].message
      name: Message
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmChartProxy is the Schema for the helmchartproxies API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: HelmChartProxySpec defines the desired state of HelmChartProxy.
            properties:
              chartName:
                description: |-
                  ChartName is the name of the Helm chart in the repository.
                  e.g. chart-path oci://repo-url/chart-name as chartName: chart-name and https://repo-url/chart-name as chartName: chart-name
                type: string
              clusterSelector:
                description: |-
                  ClusterSelector selects Clusters in the same namespace with a label that matches the specified label selector. The Helm
                  chart will be installed on all selected Clusters. If a Cluster is no longer selected, the Helm release will be uninstalled.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: |-
                        A label selector requirement is a selector that contains values, a key, and an operator that
                        relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: |-
                            operator represents a key's relationship to a set of values.
                            Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: |-
                            values is an array of string values. If the operator is In or NotIn,
                            the values array must be non-empty. If the operator is Exists or DoesNotExist,
                            the values array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: |-
                      matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                      map is equivalent to an element of matchExpressions, whose key field is "key", the
                      operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              credentials:
                description: Credentials is a reference to an object containing the
                  OCI credentials. If it is not specified, no credentials will be
                  used.
                properties:
                  key:
                    description: Key is the key in the Secret containing the OCI credentials.
                    type: string
                  secret:
                    description: Secret is a reference to a Secret containing the
                      OCI credentials.
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - key
                - secret
                type: object
              namespace:
                description: |-
                  ReleaseNamespace is the namespace the Helm release will be installed on each selected
                  Cluster. If it is not specified, it will be set to the default namespace.
                type: string
              options:
                description: |-
                  Options represents CLI flags passed to Helm operations (i.e. install, upgrade, delete) and
                  include options such as wait, skipCRDs, timeout, waitForJobs, etc.
                properties:
                  atomic:
                    description: |-
                      Atomic indicates the installation/upgrade process to delete the installation or rollback on failure.
                      If 'Atomic' is set, wait will be enabled automatically during helm install/upgrade operation.
                    type: boolean
                  dependencyUpdate:
                    description: DependencyUpdate indicates the Helm install/upgrade
                      action to get missing dependencies.
                    type: boolean
                  disableHooks:
                    description: DisableHooks prevents hooks from running during the
                      Helm install action.
                    type: boolean
                  disableOpenAPIValidation:
                    description: DisableOpenAPIValidation controls whether OpenAPI
                      validation is enforced.
                    type: boolean
                  enableClientCache:
                    default: false
                    description: EnableClientCache is a flag to enable Helm client
                      cache. If it is not specified, it will be set to true.
                    type: boolean
                  install:
                    description: |-
                      Install represents CLI flags passed to Helm install operation which can be used to control
                      behaviour of helm Install operations via options like wait, skipCrds, timeout, waitForJobs, etc.
                    properties:
                      createNamespace:
                        default: true
                        description: |-
                          CreateNamespace indicates the Helm install/upgrade action to create the
                          HelmChartProxySpec.ReleaseNamespace if it does not exist yet.
                          On uninstall, the namespace will not be garbage collected.
                          If it is not specified by user, will be set to default 'true'.
                        type: boolean
                      includeCRDs:
                        description: IncludeCRDs determines whether CRDs stored as
                          a part of helm templates directory should be installed.
                        type: boolean
                    type: object
                  options:
                    description: SubNotes determines whether sub-notes should be rendered
                      in the chart.
                    type: boolean
                  skipCRDs:
                    description: |-
                      SkipCRDs controls whether CRDs should be installed during install/upgrade operation.
                      By default, CRDs are installed if not already present.
                      If set, no CRDs will be installed.
                    type: boolean
                  timeout:
                    description: |-
                      Timeout is the time to wait for any individual Kubernetes operation (like
                      resource creation, Jobs for hooks, etc.) during the performance of a Helm install action.
                      Defaults to '10 min'.
                    type: string
                  uninstall:
                    description: |-
                      Uninstall represents CLI flags passed to Helm uninstall operation which can be used to control
                      behaviour of helm Uninstall operation via options like wait, timeout, etc.
                    properties:
                      description:
                        description: Description represents human readable information
                          to be shown on release uninstall.
                        type: string
                      keepHistory:
                        description: |-
                          KeepHistory defines whether historical revisions of a release should be saved.
                          If it's set, helm uninstall operation will not delete the history of the release.
                          The helm storage backend (secret, configmap, etc) will be retained in the cluster.
                        type: boolean
                    type: object
                  upgrade:
                    description: |-
                      Upgrade represents CLI flags passed to Helm upgrade operation which can be used to control
                      behaviour of helm Upgrade operations via options like wait, skipCrds, timeout, waitForJobs, etc.
                    properties:
                      cleanupOnFail:
                        description: CleanupOnFail indicates the upgrade action to
                          delete newly-created resources on a failed update operation.
                        type: boolean
                      force:
                        description: |-
                          Force indicates to ignore certain warnings and perform the helm release upgrade anyway.
                          This should be used with caution.
                        type: boolean
                      maxHistory:
                        default: 10
                        description: MaxHistory limits the maximum number of revisions
                          saved per release (default is 10).
                        type: integer
                      recreate:
                        description: Recreate will (if true) recreate pods after a
                          rollback.
                        type: boolean
                      resetValues:
                        description: ResetValues will reset the values to the chart's
                          built-ins rather than merging with existing.
                        type: boolean
                      reuseValues:
                        description: ReuseValues will re-use the user's last supplied
                          values.
                        type: boolean
                    type: object
                  wait:
                    description: Wait enables the waiting for resources to be ready
                      after a Helm install/upgrade has been performed.
                    type: boolean
                  waitForJobs:
                    description: WaitForJobs enables waiting for jobs to complete
                      after a Helm install/upgrade has been performed.
                    type: boolean
                type: object
              releaseName:
                description: ReleaseName is the release name of the installed Helm
                  chart. If it is not specified, a name will be generated.
                type: string
              repoURL:
                description: |-
                  RepoURL is the URL of the Helm chart repository.
                  e.g. chart-path oci://repo-url/chart-name as repoURL: oci://repo-url and https://repo-url/chart-name as repoURL: https://repo-url
                type: string
              tlsConfig:
                description: TLSConfig contains the TLS configuration for a HelmChartProxy.
                properties:
                  caSecret:
                    description: Secret is a reference to a Secret containing the
                      TLS CA certificate at the key ca.crt.
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  insecureSkipTLSVerify:
                    description: InsecureSkipTLSVerify controls whether the Helm client
                      should verify the server's certificate.
                    type: boolean
                type: object
              valuesTemplate:
                description: |-
                  ValuesTemplate is an inline YAML representing the values for the Helm chart. This YAML supports Go templating to reference
                  fields from each selected workload Cluster and programatically create and set values.
                type: string
              version:
                description: |-
                  Version is the version of the Helm chart. If it is not specified, the chart will use
                  and be kept up to date with the latest version.
                type: string
            required:
            - chartName
            - clusterSelector
            - repoURL
            type: object
          status:
            description: HelmChartProxyStatus defines the observed state of HelmChartProxy.
            properties:
              conditions:
                description: Conditions defines current state of the HelmChartProxy.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: |-
                        Last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed. If that is not known, then using the time when
                        the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A human readable message indicating details about the transition.
                        This field may be empty.
                      type: string
                    reason:
                      description: |-
                        The reason for the condition's last transition in CamelCase.
                        The specific API may choose whether or not this field is considered a guaranteed API.
                        This field may not be empty.
                      type: string
                    severity:
                      description: |-
                        Severity provides an explicit classification of Reason code, so the users or machines can immediately
                        understand the current situation and act accordingly.
                        The Severity field MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: |-
                        Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
                        can be useful (see .node.status.conditions), the ability to deconflict is important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              matchingClusters:
                description: MatchingClusters is the list of references to Clusters
                  selected by the ClusterSelector.
                items:
                  description: |-
                    ObjectReference contains enough information to let you inspect or modify the referred object.
                    ---
                    New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
                     1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
                     2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
                        restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
                        Those cannot be well described when embedded.
                     3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
                     4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
                        during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
                        and the version of the actual struct is irrelevant.
                     5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.


                    Instead of using this type, create a locally provided and used type that is well-focused on your reference.
                    For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: |-
                        If referring to a piece of an object instead of an entire object, this string
                        should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within a pod, this would take on a value like:
                        "spec.containers{name}" (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]" (container with
                        index 2 in this pod). This syntax is chosen only to have some well-defined way of
                        referencing a part of an object.
                        TODO: this design is not final and this field is subject to change in the future.
                      type: string
                    kind:
                      description: |-
                        Kind of the referent.
                        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                      type: string
                    name:
                      description: |-
                        Name of the referent.
                        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      type: string
                    namespace:
                      description: |-
                        Namespace of the referent.
                        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      type: string
                    resourceVersion:
                      description: |-
                        Specific resourceVersion to which this reference is made, if any.
                        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                      type: string
                    uid:
                      description: |-
                        UID of the referent.
                        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1alpha1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: helmreleaseproxies.addons.cluster.x-k8s.io
spec:
  group: addons.cluster.x-k8s.io
  names:
    kind: HelmReleaseProxy
    listKind: HelmReleaseProxyList
    plural: helmreleaseproxies
    shortNames:
    - hrp
    singular: helmreleaseproxy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster to which this HelmReleaseProxy belongs
      jsonPath: .spec.clusterRef.name
      name: Cluster
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].message
      name: Message
      priority: 1
      type: string
    - jsonPath: .status.status
      name: Status
      type: string
    - jsonPath: .status.revision
      name: Revision
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmReleaseProxy is the Schema for the helmreleaseproxies API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: HelmReleaseProxySpec defines the desired state of HelmReleaseProxy.
            properties:
              chartName:
                description: |-
                  ChartName is the name of the Helm chart in the repository.
                  e.g. chart-path oci://repo-url/chart-name as chartName: chart-name and https://repo-url/chart-name as chartName: chart-name
                type: string
              clusterRef:
                description: ClusterRef is a reference to the Cluster to install the
                  Helm release on.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: |-
                      If referring to a piece of an object instead of an entire object, this string
                      should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within a pod, this would take on a value like:
                      "spec.containers{name}" (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]" (container with
                      index 2 in this pod). This syntax is chosen only to have some well-defined way of
                      referencing a part of an object.
                      TODO: this design is not final and this field is subject to change in the future.
                    type: string
                  kind:
                    description: |-
                      Kind of the referent.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    type: string
                  name:
                    description: |-
                      Name of the referent.
                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    type: string
                  namespace:
                    description: |-
                      Namespace of the referent.
                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                    type: string
                  resourceVersion:
                    description: |-
                      Specific resourceVersion to which this reference is made, if any.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                    type: string
                  uid:
                    description: |-
                      UID of the referent.
                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              credentials:
                description: Credentials is a reference to an object containing the
                  OCI credentials. If it is not specified, no credentials will be
                  used.
                properties:
                  key:
                    description: Key is the key in the Secret containing the OCI credentials.
                    type: string
                  secret:
                    description: Secret is a reference to a Secret containing the
                      OCI credentials.
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - key
                - secret
                type: object
              namespace:
                description: |-
                  ReleaseNamespace is the namespace the Helm release will be installed on the referenced
                  Cluster. If it is not specified, it will be set to the default namespace.
                type: string
              options:
                description: |-
                  Options represents the helm setting options which can be used to control behaviour of helm operations(Install, Upgrade, Delete, etc)
                  via options like wait, skipCrds, timeout, waitForJobs, etc.
                properties:
                  atomic:
                    description: |-
                      Atomic indicates the installation/upgrade process to delete the installation or rollback on failure.
                      If 'Atomic' is set, wait will be enabled automatically during helm install/upgrade operation.
                    type: boolean
                  dependencyUpdate:
                    description: DependencyUpdate indicates the Helm install/upgrade
                      action to get missing dependencies.
                    type: boolean
                  disableHooks:
                    description: DisableHooks prevents hooks from running during the
                      Helm install action.
                    type: boolean
                  disableOpenAPIValidation:
                    description: DisableOpenAPIValidation controls whether OpenAPI
                      validation is enforced.
                    type: boolean
                  enableClientCache:
                    default: false
                    description: EnableClientCache is a flag to enable Helm client
                      cache. If it is not specified, it will be set to true.
                    type: boolean
                  install:
                    description: |-
                      Install represents CLI flags passed to Helm install operation which can be used to control
                      behaviour of helm Install operations via options like wait, skipCrds, timeout, waitForJobs, etc.
                    properties:
                      createNamespace:
                        default: true
                        description: |-
                          CreateNamespace indicates the Helm install/upgrade action to create the
                          HelmChartProxySpec.ReleaseNamespace if it does not exist yet.
                          On uninstall, the namespace will not be garbage collected.
                          If it is not specified by user, will be set to default 'true'.
                        type: boolean
                      includeCRDs:
                        description: IncludeCRDs determines whether CRDs stored as
                          a part of helm templates directory should be installed.
                        type: boolean
                    type: object
                  options:
                    description: SubNotes determines whether sub-notes should be rendered
                      in the chart.
                    type: boolean
                  skipCRDs:
                    description: |-
                      SkipCRDs controls whether CRDs should be installed during install/upgrade operation.
                      By default, CRDs are installed if not already present.
                      If set, no CRDs will be installed.
                    type: boolean
                  timeout:
                    description: |-
                      Timeout is the time to wait for any individual Kubernetes operation (like
                      resource creation, Jobs for hooks, etc.) during the performance of a Helm install action.
                      Defaults to '10 min'.
                    type: string
                  uninstall:
                    description: |-
                      Uninstall represents CLI flags passed to Helm uninstall operation which can be used to control
                      behaviour of helm Uninstall operation via options like wait, timeout, etc.
                    properties:
                      description:
                        description: Description represents human readable information
                          to be shown on release uninstall.
                        type: string
                      keepHistory:
                        description: |-
                          KeepHistory defines whether historical revisions of a release should be saved.
                          If it's set, helm uninstall operation will not delete the history of the release.
                          The helm storage backend (secret, configmap, etc) will be retained in the cluster.
                        type: boolean
                    type: object
                  upgrade:
                    description: |-
                      Upgrade represents CLI flags passed to Helm upgrade operation which can be used to control
                      behaviour of helm Upgrade operations via options like wait, skipCrds, timeout, waitForJobs, etc.
                    properties:
                      cleanupOnFail:
                        description: CleanupOnFail indicates the upgrade action to
                          delete newly-created resources on a failed update operation.
                        type: boolean
                      force:
                        description: |-
                          Force indicates to ignore certain warnings and perform the helm release upgrade anyway.
                          This should be used with caution.
                        type: boolean
                      maxHistory:
                        default: 10
                        description: MaxHistory limits the maximum number of revisions
                          saved per release (default is 10).
                        type: integer
                      recreate:
                        description: Recreate will (if true) recreate pods after a
                          rollback.
                        type: boolean
                      resetValues:
                        description: ResetValues will reset the values to the chart's
                          built-ins rather than merging with existing.
                        type: boolean
                      reuseValues:
                        description: ReuseValues will re-use the user's last supplied
                          values.
                        type: boolean
                    type: object
                  wait:
                    description: Wait enables the waiting for resources to be ready
                      after a Helm install/upgrade has been performed.
                    type: boolean
                  waitForJobs:
                    description: WaitForJobs enables waiting for jobs to complete
                      after a Helm install/upgrade has been performed.
                    type: boolean
                type: object
              releaseName:
                description: ReleaseName is the release name of the installed Helm
                  chart. If it is not specified, a name will be generated.
                type: string
              repoURL:
                description: |-
                  RepoURL is the URL of the Helm chart repository.
                  e.g. chart-path oci://repo-url/chart-name as repoURL: oci://repo-url and https://repo-url/chart-name as repoURL: https://repo-url
                type: string
              tlsConfig:
                description: TLSConfig contains the TLS configuration for the HelmReleaseProxy.
                properties:
                  caSecret:
                    description: Secret is a reference to a Secret containing the
                      TLS CA certificate at the key ca.crt.
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  insecureSkipTLSVerify:
                    description: InsecureSkipTLSVerify controls whether the Helm client
                      should verify the server's certificate.
                    type: boolean
                type: object
              values:
                description: |-
                  Values is an inline YAML representing the values for the Helm chart. This YAML is the result of the rendered
                  Go templating with the values from the referenced workload Cluster.
                type: string
              version:
                description: |-
                  Version is the version of the Helm chart. If it is not specified, the chart will use
                  and be kept up to date with the latest version.
                type: string
            required:
            - chartName
            - clusterRef
            - repoURL
            type: object
          status:
            description: HelmReleaseProxyStatus defines the observed state of HelmReleaseProxy.
            properties:
              conditions:
                description: Conditions defines current state of the HelmReleaseProxy.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: |-
                        Last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed. If that is not known, then using the time when
                        the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A human readable message indicating details about the transition.
                        This field may be empty.
                      type: string
                    reason:
                      description: |-
                        The reason for the condition's last transition in CamelCase.
                        The specific API may choose whether or not this field is considered a guaranteed API.
                        This field may not be empty.
                      type: string
                    severity:
                      description: |-
                        Severity provides an explicit classification of Reason code, so the users or machines can immediately
                        understand the current situation and act accordingly.
                        The Severity field MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: |-
                        Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
                        can be useful (see .node.status.conditions), the ability to deconflict is important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              revision:
                description: Revision is the current revision of the Helm release.
                type: integer
              status:
                description: Status is the current status of the Helm release.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1alpha1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: clusters.cluster.x-k8s.io
spec:
  group: cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    shortNames:
    - cl
    singular: cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Time duration since creation of Cluster
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha4
    schema:
      openAPIV3Schema:
        description: "Cluster is the Schema for the clusters API. \n Deprecated: This
          type will be removed in one of the next releases."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster.
            properties:
              clusterNetwork:
                description: Cluster network configuration.
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              controlPlaneRef:
                description: ControlPlaneRef is an optional reference to a provider-specific
                  resource that holds the details for provisioning the Control Plane
                  for a Cluster.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Cluster and all its associated objects.
                type: boolean
              topology:
                description: 'This encapsulates the topology for the cluster. NOTE:
                  It is required to enable the ClusterTopology feature gate flag to
                  activate managed topologies support; this feature is highly experimental,
                  and parts of it might still be not implemented.'
                properties:
                  class:
                    description: The name of the ClusterClass object to create the
                      topology.
                    type: string
                  controlPlane:
                    description: ControlPlane describes the cluster control plane.
                    properties:
                      metadata:
                        description: "Metadata is the metadata applied to the machines
                          of the ControlPlane. At runtime this metadata is merged
                          with the corresponding metadata from the ClusterClass. \n
                          This field is supported if and only if the control plane
                          provider template referenced in the ClusterClass is Machine
                          based."
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      replicas:
                        description: Replicas is the number of control plane nodes.
                          If the value is nil, the ControlPlane object is created
                          without the number of Replicas and it's assumed that the
                          control plane controller does not implement support for
                          this field. When specified against a control plane provider
                          that lacks support for this field, this value will be ignored.
                        format: int32
                        type: integer
                    type: object
                  rolloutAfter:
                    description: RolloutAfter performs a rollout of the entire cluster
                      one component at a time, control plane first and then machine
                      deployments.
                    format: date-time
                    type: string
                  version:
                    description: The Kubernetes version of the cluster.
                    type: string
                  workers:
                    description: Workers encapsulates the different constructs that
                      form the worker nodes for the cluster.
                    properties:
                      machineDeployments:
                        description: MachineDeployments is a list of machine deployments
                          in the cluster.
                        items:
                          description: MachineDeploymentTopology specifies the different
                            parameters for a set of worker nodes in the topology.
                            This set of nodes is managed by a MachineDeployment object
                            whose lifecycle is managed by the Cluster controller.
                          properties:
                            class:
                              description: Class is the name of the MachineDeploymentClass
                                used to create the set of worker nodes. This should
                                match one of the deployment classes defined in the
                                ClusterClass object mentioned in the `Cluster.Spec.Class`
                                field.
                              type: string
                            metadata:
                              description: Metadata is the metadata applied to the
                                machines of the MachineDeployment. At runtime this
                                metadata is merged with the corresponding metadata
                                from the ClusterClass.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                            name:
                              description: Name is the unique identifier for this
                                MachineDeploymentTopology. The value is used with
                                other unique identifiers to create a MachineDeployment's
                                Name (e.g. cluster's name, etc). In case the name
                                is greater than the allowed maximum length, the values
                                are hashed together.
                              type: string
                            replicas:
                              description: Replicas is the number of worker nodes
                                belonging to this set. If the value is nil, the MachineDeployment
                                is created without the number of Replicas (defaulting
                                to zero) and it's assumed that an external entity
                                (like cluster autoscaler) is responsible for the management
                                of this value.
                              format: int32
                              type: integer
                          required:
                          - class
                          - name
                          type: object
                        type: array
                    type: object
                required:
                - class
                - version
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              conditions:
                description: Conditions defines current service state of the cluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              controlPlaneReady:
                description: ControlPlaneReady defines if the control plane is ready.
                type: boolean
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a slice of failure domain objects synced
                  from the infrastructure provider.
                type: object
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: false
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: ClusterClass of this Cluster, empty if the Cluster is not using
        a ClusterClass
      jsonPath: .spec.topology.class
      name: ClusterClass
      type: string
    - description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
      jsonPath: .status.phase
      name: Phase
      type: string
    - description: Time duration since creation of Cluster
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: Kubernetes version associated with this Cluster
      jsonPath: .spec.topology.version
      name: Version
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster.
            properties:
              clusterNetwork:
                description: Cluster network configuration.
                properties:
                  apiServerPort:
                    description: APIServerPort specifies the port the API Server should
                      bind to. Defaults to 6443.
                    format: int32
                    type: integer
                  pods:
                    description: The network ranges from which Pod networks are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                  serviceDomain:
                    description: Domain name for services.
                    type: string
                  services:
                    description: The network ranges from which service VIPs are allocated.
                    properties:
                      cidrBlocks:
                        items:
                          type: string
                        type: array
                    required:
                    - cidrBlocks
                    type: object
                type: object
              controlPlaneEndpoint:
                description: ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane.
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              controlPlaneRef:
                description: ControlPlaneRef is an optional reference to a provider-specific
                  resource that holds the details for provisioning the Control Plane
                  for a Cluster.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              infrastructureRef:
                description: InfrastructureRef is a reference to a provider-specific
                  resource that holds the details for provisioning infrastructure
                  for a cluster in said provider.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Cluster and all its associated objects.
                type: boolean
              topology:
                description: 'This encapsulates the topology for the cluster. NOTE:
                  It is required to enable the ClusterTopology feature gate flag to
                  activate managed topologies support; this feature is highly experimental,
                  and parts of it might still be not implemented.'
                properties:
                  class:
                    description: The name of the ClusterClass object to create the
                      topology.
                    type: string
                  controlPlane:
                    description: ControlPlane describes the cluster control plane.
                    properties:
                      machineHealthCheck:
                        description: MachineHealthCheck allows to enable, disable
                          and override the MachineHealthCheck configuration in the
                          ClusterClass for this control plane.
                        properties:
                          enable:
                            description: "Enable controls if a MachineHealthCheck
                              should be created for the target machines. \n If false:
                              No MachineHealthCheck will be created. \n If not set(default):
                              A MachineHealthCheck will be created if it is defined
                              here or in the associated ClusterClass. If no MachineHealthCheck
                              is defined then none will be created. \n If true: A
                              MachineHealthCheck is guaranteed to be created. Cluster
                              validation will block if `enable` is true and no MachineHealthCheck
                              definition is available."
                            type: boolean
                          maxUnhealthy:
                            anyOf:
                            - type: integer
                            - type: string
                            description: Any further remediation is only allowed if
                              at most "MaxUnhealthy" machines selected by "selector"
                              are not healthy.
                            x-kubernetes-int-or-string: true
                          nodeStartupTimeout:
                            description: Machines older than this duration without
                              a node will be considered to have failed and will be
                              remediated. If you wish to disable this feature, set
                              the value explicitly to 0.
                            type: string
                          remediationTemplate:
                            description: "RemediationTemplate is a reference to a
                              remediation template provided by an infrastructure provider.
                              \n This field is completely optional, when filled, the
                              MachineHealthCheck controller creates a new object from
                              the template referenced and hands off remediation of
                              the machine to a controller that lives outside of Cluster
                              API."
                            properties:
                              apiVersion:
                                description: API version of the referent.
                                type: string
                              fieldPath:
                                description: 'If referring to a piece of an object
                                  instead of an entire object, this string should
                                  contain a valid JSON/Go field access statement,
                                  such as desiredState.manifest.containers[2]. For
                                  example, if the object reference is to a container
                                  within a pod, this would take on a value like: "spec.containers{name}"
                                  (where "name" refers to the name of the container
                                  that triggered the event) or if no container name
                                  is specified "spec.containers[2]" (container with
                                  index 2 in this pod). This syntax is chosen only
                                  to have some well-defined way of referencing a part
                                  of an object. TODO: this design is not final and
                                  this field is subject to change in the future.'
                                type: string
                              kind:
                                description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                              namespace:
                                description: 'Namespace of the referent. More info:
                                  https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                type: string
                              resourceVersion:
                                description: 'Specific resourceVersion to which this
                                  reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                type: string
                              uid:
                                description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                type: string
                            type: object
                            x-kubernetes-map-type: atomic
                          unhealthyConditions:
                            description: UnhealthyConditions contains a list of the
                              conditions that determine whether a node is considered
                              unhealthy. The conditions are combined in a logical
                              OR, i.e. if any of the conditions is met, the node is
                              unhealthy.
                            items:
                              description: UnhealthyCondition represents a Node condition
                                type and value with a timeout specified as a duration.  When
                                the named condition has been in the given status for
                                at least the timeout value, a node is considered unhealthy.
                              properties:
                                status:
                                  minLength: 1
                                  type: string
                                timeout:
                                  type: string
                                type:
                                  minLength: 1
                                  type: string
                              required:
                              - status
                              - timeout
                              - type
                              type: object
                            type: array
                          unhealthyRange:
                            description: 'Any further remediation is only allowed
                              if the number of machines selected by "selector" as
                              not healthy is within the range of "UnhealthyRange".
                              Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This
                              means that remediation will be allowed only when: (a)
                              there are at least 3 unhealthy machines (and) (b) there
                              are at most 5 unhealthy machines'
                            pattern: ^\[[0-9]+-[0-9]+\]$
                            type: string
                        type: object
                      metadata:
                        description: Metadata is the metadata applied to the ControlPlane
                          and the Machines of the ControlPlane if the ControlPlaneTemplate
                          referenced by the ClusterClass is machine based. If not,
                          it is applied only to the ControlPlane. At runtime this
                          metadata is merged with the corresponding metadata from
                          the ClusterClass.
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      nodeDeletionTimeout:
                        description: NodeDeletionTimeout defines how long the controller
                          will attempt to delete the Node that the Machine hosts after
                          the Machine is marked for deletion. A duration of 0 will
                          retry deletion indefinitely. Defaults to 10 seconds.
                        type: string
                      nodeDrainTimeout:
                        description: 'NodeDrainTimeout is the total amount of time
                          that the controller will spend on draining a node. The default
                          value is 0, meaning that the node can be drained without
                          any time limitations. NOTE: NodeDrainTimeout is different
                          from `kubectl drain --timeout`'
                        type: string
                      nodeVolumeDetachTimeout:
                        description: NodeVolumeDetachTimeout is the total amount of
                          time that the controller will spend on waiting for all volumes
                          to be detached. The default value is 0, meaning that the
                          volumes can be detached without any time limitations.
                        type: string
                      replicas:
                        description: Replicas is the number of control plane nodes.
                          If the value is nil, the ControlPlane object is created
                          without the number of Replicas and it's assumed that the
                          control plane controller does not implement support for
                          this field. When specified against a control plane provider
                          that lacks support for this field, this value will be ignored.
                        format: int32
                        type: integer
                    type: object
                  rolloutAfter:
                    description: "RolloutAfter performs a rollout of the entire cluster
                      one component at a time, control plane first and then machine
                      deployments. \n Deprecated: This field has no function and is
                      going to be removed in the next apiVersion."
                    format: date-time
                    type: string
                  variables:
                    description: Variables can be used to customize the Cluster through
                      patches. They must comply to the corresponding VariableClasses
                      defined in the ClusterClass.
                    items:
                      description: ClusterVariable can be used to customize the Cluster
                        through patches. Each ClusterVariable is associated with a
                        Variable definition in the ClusterClass `status` variables.
                      properties:
                        definitionFrom:
                          description: 'DefinitionFrom specifies where the definition
                            of this Variable is from. DefinitionFrom is `inline` when
                            the definition is from the ClusterClass `.spec.variables`
                            or the name of a patch defined in the ClusterClass `.spec.patches`
                            where the patch is external and provides external variables.
                            This field is mandatory if the variable has `DefinitionsConflict:
                            true` in ClusterClass `status.variables[]`'
                          type: string
                        name:
                          description: Name of the variable.
                          type: string
                        value:
                          description: 'Value of the variable. Note: the value will
                            be validated against the schema of the corresponding ClusterClassVariable
                            from the ClusterClass. Note: We have to use apiextensionsv1.JSON
                            instead of a custom JSON type, because controller-tools
                            has a hard-coded schema for apiextensionsv1.JSON which
                            cannot be produced by another type via controller-tools,
                            i.e. it is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
                          x-kubernetes-preserve-unknown-fields: true
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  version:
                    description: The Kubernetes version of the cluster.
                    type: string
                  workers:
                    description: Workers encapsulates the different constructs that
                      form the worker nodes for the cluster.
                    properties:
                      machineDeployments:
                        description: MachineDeployments is a list of machine deployments
                          in the cluster.
                        items:
                          description: MachineDeploymentTopology specifies the different
                            parameters for a set of worker nodes in the topology.
                            This set of nodes is managed by a MachineDeployment object
                            whose lifecycle is managed by the Cluster controller.
                          properties:
                            class:
                              description: Class is the name of the MachineDeploymentClass
                                used to create the set of worker nodes. This should
                                match one of the deployment classes defined in the
                                ClusterClass object mentioned in the `Cluster.Spec.Class`
                                field.
                              type: string
                            failureDomain:
                              description: FailureDomain is the failure domain the
                                machines will be created in. Must match a key in the
                                FailureDomains map stored on the cluster object.
                              type: string
                            machineHealthCheck:
                              description: MachineHealthCheck allows to enable, disable
                                and override the MachineHealthCheck configuration
                                in the ClusterClass for this MachineDeployment.
                              properties:
                                enable:
                                  description: "Enable controls if a MachineHealthCheck
                                    should be created for the target machines. \n
                                    If false: No MachineHealthCheck will be created.
                                    \n If not set(default): A MachineHealthCheck will
                                    be created if it is defined here or in the associated
                                    ClusterClass. If no MachineHealthCheck is defined
                                    then none will be created. \n If true: A MachineHealthCheck
                                    is guaranteed to be created. Cluster validation
                                    will block if `enable` is true and no MachineHealthCheck
                                    definition is available."
                                  type: boolean
                                maxUnhealthy:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Any further remediation is only allowed
                                    if at most "MaxUnhealthy" machines selected by
                                    "selector" are not healthy.
                                  x-kubernetes-int-or-string: true
                                nodeStartupTimeout:
                                  description: Machines older than this duration without
                                    a node will be considered to have failed and will
                                    be remediated. If you wish to disable this feature,
                                    set the value explicitly to 0.
                                  type: string
                                remediationTemplate:
                                  description: "RemediationTemplate is a reference
                                    to a remediation template provided by an infrastructure
                                    provider. \n This field is completely optional,
                                    when filled, the MachineHealthCheck controller
                                    creates a new object from the template referenced
                                    and hands off remediation of the machine to a
                                    controller that lives outside of Cluster API."
                                  properties:
                                    apiVersion:
                                      description: API version of the referent.
                                      type: string
                                    fieldPath:
                                      description: 'If referring to a piece of an
                                        object instead of an entire object, this string
                                        should contain a valid JSON/Go field access
                                        statement, such as desiredState.manifest.containers[2].
                                        For example, if the object reference is to
                                        a container within a pod, this would take
                                        on a value like: "spec.containers{name}" (where
                                        "name" refers to the name of the container
                                        that triggered the event) or if no container
                                        name is specified "spec.containers[2]" (container
                                        with index 2 in this pod). This syntax is
                                        chosen only to have some well-defined way
                                        of referencing a part of an object. TODO:
                                        this design is not final and this field is
                                        subject to change in the future.'
                                      type: string
                                    kind:
                                      description: 'Kind of the referent. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                      type: string
                                    namespace:
                                      description: 'Namespace of the referent. More
                                        info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                                      type: string
                                    resourceVersion:
                                      description: 'Specific resourceVersion to which
                                        this reference is made, if any. More info:
                                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                                      type: string
                                    uid:
                                      description: 'UID of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                                      type: string
                                  type: object
                                  x-kubernetes-map-type: atomic
                                unhealthyConditions:
                                  description: UnhealthyConditions contains a list
                                    of the conditions that determine whether a node
                                    is considered unhealthy. The conditions are combined
                                    in a logical OR, i.e. if any of the conditions
                                    is met, the node is unhealthy.
                                  items:
                                    description: UnhealthyCondition represents a Node
                                      condition type and value with a timeout specified
                                      as a duration.  When the named condition has
                                      been in the given status for at least the timeout
                                      value, a node is considered unhealthy.
                                    properties:
                                      status:
                                        minLength: 1
                                        type: string
                                      timeout:
                                        type: string
                                      type:
                                        minLength: 1
                                        type: string
                                    required:
                                    - status
                                    - timeout
                                    - type
                                    type: object
                                  type: array
                                unhealthyRange:
                                  description: 'Any further remediation is only allowed
                                    if the number of machines selected by "selector"
                                    as not healthy is within the range of "UnhealthyRange".
                                    Takes precedence over MaxUnhealthy. Eg. "[3-5]"
                                    - This means that remediation will be allowed
                                    only when: (a) there are at least 3 unhealthy
                                    machines (and) (b) there are at most 5 unhealthy
                                    machines'
                                  pattern: ^\[[0-9]+-[0-9]+\]$
                                  type: string
                              type: object
                            metadata:
                              description: Metadata is the metadata applied to the
                                MachineDeployment and the machines of the MachineDeployment.
                                At runtime this metadata is merged with the corresponding
                                metadata from the ClusterClass.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                            minReadySeconds:
                              description: Minimum number of seconds for which a newly
                                created machine should be ready. Defaults to 0 (machine
                                will be considered available as soon as it is ready)
                              format: int32
                              type: integer
                            name:
                              description: Name is the unique identifier for this
                                MachineDeploymentTopology. The value is used with
                                other unique identifiers to create a MachineDeployment's
                                Name (e.g. cluster's name, etc). In case the name
                                is greater than the allowed maximum length, the values
                                are hashed together.
                              type: string
                            nodeDeletionTimeout:
                              description: NodeDeletionTimeout defines how long the
                                controller will attempt to delete the Node that the
                                Machine hosts after the Machine is marked for deletion.
                                A duration of 0 will retry deletion indefinitely.
                                Defaults to 10 seconds.
                              type: string
                            nodeDrainTimeout:
                              description: 'NodeDrainTimeout is the total amount of
                                time that the controller will spend on draining a
                                node. The default value is 0, meaning that the node
                                can be drained without any time limitations. NOTE:
                                NodeDrainTimeout is different from `kubectl drain
                                --timeout`'
                              type: string
                            nodeVolumeDetachTimeout:
                              description: NodeVolumeDetachTimeout is the total amount
                                of time that the controller will spend on waiting
                                for all volumes to be detached. The default value
                                is 0, meaning that the volumes can be detached without
                                any time limitations.
                              type: string
                            replicas:
                              description: Replicas is the number of worker nodes
                                belonging to this set. If the value is nil, the MachineDeployment
                                is created without the number of Replicas (defaulting
                                to 1) and it's assumed that an external entity (like
                                cluster autoscaler) is responsible for the management
                                of this value.
                              format: int32
                              type: integer
                            strategy:
                              description: The deployment strategy to use to replace
                                existing machines with new ones.
                              properties:
                                rollingUpdate:
                                  description: Rolling update config params. Present
                                    only if MachineDeploymentStrategyType = RollingUpdate.
                                  properties:
                                    deletePolicy:
                                      description: DeletePolicy defines the policy
                                        used by the MachineDeployment to identify
                                        nodes to delete when downscaling. Valid values
                                        are "Random, "Newest", "Oldest" When no value
                                        is supplied, the default DeletePolicy of MachineSet
                                        is used
                                      enum:
                                      - Random
                                      - Newest
                                      - Oldest
                                      type: string
                                    maxSurge:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: 'The maximum number of machines
                                        that can be scheduled above the desired number
                                        of machines. Value can be an absolute number
                                        (ex: 5) or a percentage of desired machines
                                        (ex: 10%). This can not be 0 if MaxUnavailable
                                        is 0. Absolute number is calculated from percentage
                                        by rounding up. Defaults to 1. Example: when
                                        this is set to 30%, the new MachineSet can
                                        be scaled up immediately when the rolling
                                        update starts, such that the total number
                                        of old and new machines do not exceed 130%
                                        of desired machines. Once old machines have
                                        been killed, new MachineSet can be scaled
                                        up further, ensuring that total number of
                                        machines running at any time during the update
                                        is at most 130% of desired machines.'
                                      x-kubernetes-int-or-string: true
                                    maxUnavailable:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: 'The maximum number of machines
                                        that can be unavailable during the update.
                                        Value can be an absolute number (ex: 5) or
                                        a percentage of desired machines (ex: 10%).
                                        Absolute number is calculated from percentage
                                        by rounding down. This can not be 0 if MaxSurge
                                        is 0. Defaults to 0. Example: when this is
                                        set to 30%, the old MachineSet can be scaled
                                        down to 70% of desired machines immediately
                                        when the rolling update starts. Once new machines
                                        are ready, old MachineSet can be scaled down
                                        further, followed by scaling up the new MachineSet,
                                        ensuring that the total number of machines
                                        available at all times during the update is
                                        at least 70% of desired machines.'
                                      x-kubernetes-int-or-string: true
                                  type: object
                                type:
                                  description: Type of deployment. Allowed values
                                    are RollingUpdate and OnDelete. The default is
                                    RollingUpdate.
                                  enum:
                                  - RollingUpdate
                                  - OnDelete
                                  type: string
                              type: object
                            variables:
                              description: Variables can be used to customize the
                                MachineDeployment through patches.
                              properties:
                                overrides:
                                  description: Overrides can be used to override Cluster
                                    level variables.
                                  items:
                                    description: ClusterVariable can be used to customize
                                      the Cluster through patches. Each ClusterVariable
                                      is associated with a Variable definition in
                                      the ClusterClass `status` variables.
                                    properties:
                                      definitionFrom:
                                        description: 'DefinitionFrom specifies where
                                          the definition of this Variable is from.
                                          DefinitionFrom is `inline` when the definition
                                          is from the ClusterClass `.spec.variables`
                                          or the name of a patch defined in the ClusterClass
                                          `.spec.patches` where the patch is external
                                          and provides external variables. This field
                                          is mandatory if the variable has `DefinitionsConflict:
                                          true` in ClusterClass `status.variables[]`'
                                        type: string
                                      name:
                                        description: Name of the variable.
                                        type: string
                                      value:
                                        description: 'Value of the variable. Note:
                                          the value will be validated against the
                                          schema of the corresponding ClusterClassVariable
                                          from the ClusterClass. Note: We have to
                                          use apiextensionsv1.JSON instead of a custom
                                          JSON type, because controller-tools has
                                          a hard-coded schema for apiextensionsv1.JSON
                                          which cannot be produced by another type
                                          via controller-tools, i.e. it is not possible
                                          to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                              type: object
                          required:
                          - class
                          - name
                          type: object
                        type: array
                      machinePools:
                        description: MachinePools is a list of machine pools in the
                          cluster.
                        items:
                          description: MachinePoolTopology specifies the different
                            parameters for a pool of worker nodes in the topology.
                            This pool of nodes is managed by a MachinePool object
                            whose lifecycle is managed by the Cluster controller.
                          properties:
                            class:
                              description: Class is the name of the MachinePoolClass
                                used to create the pool of worker nodes. This should
                                match one of the deployment classes defined in the
                                ClusterClass object mentioned in the `Cluster.Spec.Class`
                                field.
                              type: string
                            failureDomains:
                              description: FailureDomains is the list of failure domains
                                the machine pool will be created in. Must match a
                                key in the FailureDomains map stored on the cluster
                                object.
                              items:
                                type: string
                              type: array
                            metadata:
                              description: Metadata is the metadata applied to the
                                MachinePool. At runtime this metadata is merged with
                                the corresponding metadata from the ClusterClass.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: 'Annotations is an unstructured key
                                    value map stored with a resource that may be set
                                    by external tools to store and retrieve arbitrary
                                    metadata. They are not queryable and should be
                                    preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                                  type: object
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: 'Map of string keys and values that
                                    can be used to organize and categorize (scope
                                    and select) objects. May match selectors of replication
                                    controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                                  type: object
                              type: object
                            minReadySeconds:
                              description: Minimum number of seconds for which a newly
                                created machine pool should be ready. Defaults to
                                0 (machine will be considered available as soon as
                                it is ready)
                              format: int32
                              type: integer
                            name:
                              description: Name is the unique identifier for this
                                MachinePoolTopology. The value is used with other
                                unique identifiers to create a MachinePool's Name
                                (e.g. cluster's name, etc). In case the name is greater
                                than the allowed maximum length, the values are hashed
                                together.
                              type: string
                            nodeDeletionTimeout:
                              description: NodeDeletionTimeout defines how long the
                                controller will attempt to delete the Node that the
                                MachinePool hosts after the MachinePool is marked
                                for deletion. A duration of 0 will retry deletion
                                indefinitely. Defaults to 10 seconds.
                              type: string
                            nodeDrainTimeout:
                              description: 'NodeDrainTimeout is the total amount of
                                time that the controller will spend on draining a
                                node. The default value is 0, meaning that the node
                                can be drained without any time limitations. NOTE:
                                NodeDrainTimeout is different from `kubectl drain
                                --timeout`'
                              type: string
                            nodeVolumeDetachTimeout:
                              description: NodeVolumeDetachTimeout is the total amount
                                of time that the controller will spend on waiting
                                for all volumes to be detached. The default value
                                is 0, meaning that the volumes can be detached without
                                any time limitations.
                              type: string
                            replicas:
                              description: Replicas is the number of nodes belonging
                                to this pool. If the value is nil, the MachinePool
                                is created without the number of Replicas (defaulting
                                to 1) and it's assumed that an external entity (like
                                cluster autoscaler) is responsible for the management
                                of this value.
                              format: int32
                              type: integer
                            variables:
                              description: Variables can be used to customize the
                                MachinePool through patches.
                              properties:
                                overrides:
                                  description: Overrides can be used to override Cluster
                                    level variables.
                                  items:
                                    description: ClusterVariable can be used to customize
                                      the Cluster through patches. Each ClusterVariable
                                      is associated with a Variable definition in
                                      the ClusterClass `status` variables.
                                    properties:
                                      definitionFrom:
                                        description: 'DefinitionFrom specifies where
                                          the definition of this Variable is from.
                                          DefinitionFrom is `inline` when the definition
                                          is from the ClusterClass `.spec.variables`
                                          or the name of a patch defined in the ClusterClass
                                          `.spec.patches` where the patch is external
                                          and provides external variables. This field
                                          is mandatory if the variable has `DefinitionsConflict:
                                          true` in ClusterClass `status.variables[]`'
                                        type: string
                                      name:
                                        description: Name of the variable.
                                        type: string
                                      value:
                                        description: 'Value of the variable. Note:
                                          the value will be validated against the
                                          schema of the corresponding ClusterClassVariable
                                          from the ClusterClass. Note: We have to
                                          use apiextensionsv1.JSON instead of a custom
                                          JSON type, because controller-tools has
                                          a hard-coded schema for apiextensionsv1.JSON
                                          which cannot be produced by another type
                                          via controller-tools, i.e. it is not possible
                                          to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111'
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - name
                                    - value
                                    type: object
                                  type: array
                              type: object
                          required:
                          - class
                          - name
                          type: object
                        type: array
                    type: object
                required:
                - class
                - version
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              conditions:
                description: Conditions defines current service state of the cluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              controlPlaneReady:
                description: ControlPlaneReady defines if the control plane is ready.
                type: boolean
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a slice of failure domain objects synced
                  from the infrastructure provider.
                type: object
              failureMessage:
                description: FailureMessage indicates that there is a fatal problem
                  reconciling the state, and will be set to a descriptive error message.
                type: string
              failureReason:
                description: FailureReason indicates that there is a fatal problem
                  reconciling the state, and will be set to a token value suitable
                  for programmatic interpretation.
                type: string
              infrastructureReady:
                description: InfrastructureReady is the state of the infrastructure
                  provider.
                type: boolean
              observedGeneration:
                description: ObservedGeneration is the latest generation observed
                  by the controller.
                format: int64
                type: integer
              phase:
                description: Phase represents the current phase of cluster actuation.
                  E.g. Pending, Running, Terminating, Failed etc.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1beta1

---
