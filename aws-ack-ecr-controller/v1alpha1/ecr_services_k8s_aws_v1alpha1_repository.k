"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Repository:
    """
    Repository is the Schema for the Repositories API

    Attributes
    ----------
    apiVersion : str, default is "ecr.services.k8s.aws/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Repository", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : EcrServicesK8sAwsV1alpha1RepositorySpec, default is Undefined, optional
        spec
    status : EcrServicesK8sAwsV1alpha1RepositoryStatus, default is Undefined, optional
        status
    """


    apiVersion: "ecr.services.k8s.aws/v1alpha1" = "ecr.services.k8s.aws/v1alpha1"

    kind: "Repository" = "Repository"

    metadata?: v1.ObjectMeta

    spec?: EcrServicesK8sAwsV1alpha1RepositorySpec

    status?: EcrServicesK8sAwsV1alpha1RepositoryStatus


schema EcrServicesK8sAwsV1alpha1RepositorySpec:
    """
    RepositorySpec defines the desired state of Repository. 
     An object representing a repository.

    Attributes
    ----------
    encryptionConfiguration : EcrServicesK8sAwsV1alpha1RepositorySpecEncryptionConfiguration, default is Undefined, optional
        encryption configuration
    imageScanningConfiguration : EcrServicesK8sAwsV1alpha1RepositorySpecImageScanningConfiguration, default is Undefined, optional
        image scanning configuration
    imageTagMutability : str, default is Undefined, optional
        The tag mutability setting for the repository. If this parameter is omitted, the default setting of MUTABLE will be used which will allow image tags to be overwritten. If IMMUTABLE is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
    lifecyclePolicy : str, default is Undefined, optional
        The JSON repository policy text to apply to the repository.
    name : str, default is Undefined, required
        The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app).
    policy : str, default is Undefined, optional
        The JSON repository policy text to apply to the repository. For more information, see Amazon ECR repository policies (https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the Amazon Elastic Container Registry User Guide.
    registryID : str, default is Undefined, optional
        The Amazon Web Services account ID associated with the registry to create the repository. If you do not specify a registry, the default registry is assumed.
    tags : [EcrServicesK8sAwsV1alpha1RepositorySpecTagsItems0], default is Undefined, optional
        The metadata that you apply to the repository to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    """


    encryptionConfiguration?: EcrServicesK8sAwsV1alpha1RepositorySpecEncryptionConfiguration

    imageScanningConfiguration?: EcrServicesK8sAwsV1alpha1RepositorySpecImageScanningConfiguration

    imageTagMutability?: str

    lifecyclePolicy?: str

    name: str

    policy?: str

    registryID?: str

    tags?: [EcrServicesK8sAwsV1alpha1RepositorySpecTagsItems0]


schema EcrServicesK8sAwsV1alpha1RepositorySpecEncryptionConfiguration:
    """
    The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

    Attributes
    ----------
    encryptionType : str, default is Undefined, optional
        encryption type
    kmsKey : str, default is Undefined, optional
        kms key
    """


    encryptionType?: str

    kmsKey?: str


schema EcrServicesK8sAwsV1alpha1RepositorySpecImageScanningConfiguration:
    """
    The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities after being pushed to the repository.

    Attributes
    ----------
    scanOnPush : bool, default is Undefined, optional
        scan on push
    """


    scanOnPush?: bool


schema EcrServicesK8sAwsV1alpha1RepositorySpecTagsItems0:
    """
    The metadata to apply to a resource to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

    Attributes
    ----------
    key : str, default is Undefined, optional
        key
    value : str, default is Undefined, optional
        value
    """


    key?: str

    value?: str


schema EcrServicesK8sAwsV1alpha1RepositoryStatus:
    """
    RepositoryStatus defines the observed state of Repository

    Attributes
    ----------
    ackResourceMetadata : EcrServicesK8sAwsV1alpha1RepositoryStatusAckResourceMetadata, default is Undefined, optional
        ack resource metadata
    conditions : [EcrServicesK8sAwsV1alpha1RepositoryStatusConditionsItems0], default is Undefined, optional
        All CRS managed by ACK have a common `Status.Conditions` member that contains a collection of `ackv1alpha1.Condition` objects that describe the various terminal states of the CR and its backend AWS service API resource
    createdAt : str, default is Undefined, optional
        The date and time, in JavaScript date format, when the repository was created.
    repositoryURI : str, default is Undefined, optional
        The URI for the repository. You can use this URI for container image push and pull operations.
    """


    ackResourceMetadata?: EcrServicesK8sAwsV1alpha1RepositoryStatusAckResourceMetadata

    conditions?: [EcrServicesK8sAwsV1alpha1RepositoryStatusConditionsItems0]

    createdAt?: str

    repositoryURI?: str


schema EcrServicesK8sAwsV1alpha1RepositoryStatusAckResourceMetadata:
    """
    All CRs managed by ACK have a common `Status.ACKResourceMetadata` member that is used to contain resource sync state, account ownership, constructed ARN for the resource

    Attributes
    ----------
    arn : str, default is Undefined, optional
        ARN is the Amazon Resource Name for the resource. This is a globally-unique identifier and is set only by the ACK service controller once the controller has orchestrated the creation of the resource OR when it has verified that an "adopted" resource (a resource where the ARN annotation was set by the Kubernetes user on the CR) exists and matches the supplied CR's Spec field values. TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse https://github.com/aws/aws-controllers-k8s/issues/270
    ownerAccountID : str, default is Undefined, required
        OwnerAccountID is the AWS Account ID of the account that owns the backend AWS service API resource.
    region : str, default is Undefined, required
        Region is the AWS region in which the resource exists or will exist.
    """


    arn?: str

    ownerAccountID: str

    region: str


schema EcrServicesK8sAwsV1alpha1RepositoryStatusConditionsItems0:
    """
    Condition is the common struct used by all CRDs managed by ACK service controllers to indicate terminal states  of the CR and its backend AWS service API resource

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type is the type of the Condition
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status: str

    $type: str


