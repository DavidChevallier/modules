"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema MonitoringDashboard:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard

    Attributes
    ----------
    apiVersion : str, default is "monitoring.cnrm.cloud.google.com/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "MonitoringDashboard", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpec, default is Undefined, required
        spec
    status : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardStatus, default is Undefined, optional
        status
    """


    apiVersion: "monitoring.cnrm.cloud.google.com/v1beta1" = "monitoring.cnrm.cloud.google.com/v1beta1"

    kind: "MonitoringDashboard" = "MonitoringDashboard"

    metadata?: v1.ObjectMeta

    spec: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpec

    status?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardStatus


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpec:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec

    Attributes
    ----------
    columnLayout : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayout, default is Undefined, optional
        column layout
    displayName : str, default is Undefined, required
        Required. The mutable, human-readable name.
    gridLayout : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayout, default is Undefined, optional
        grid layout
    mosaicLayout : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayout, default is Undefined, optional
        mosaic layout
    projectRef : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecProjectRef, default is Undefined, required
        project ref
    resourceID : str, default is Undefined, optional
        Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.
    rowLayout : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayout, default is Undefined, optional
        row layout
    """


    columnLayout?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayout

    displayName: str

    gridLayout?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayout

    mosaicLayout?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayout

    projectRef: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecProjectRef

    resourceID?: str

    rowLayout?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayout


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayout:
    """
    The content is divided into equally spaced columns and the widgets are arranged vertically.

    Attributes
    ----------
    columns : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0], default is Undefined, optional
        The columns of content to display.
    """


    columns?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0

    Attributes
    ----------
    weight : int, default is Undefined, optional
        The relative weight of this column. The column weight is used to adjust the width of columns on the screen (relative to peers). Greater the weight, greater the width of the column on the screen. If omitted, a value of 1 is used while rendering.
    widgets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0], default is Undefined, optional
        The display widgets arranged vertically in this column.
    """


    weight?: int

    widgets?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0 widgets items0

    Attributes
    ----------
    blank : any, default is Undefined, optional
        A blank space.
    logsPanel : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0LogsPanel, default is Undefined, optional
        logs panel
    scorecard : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0Scorecard, default is Undefined, optional
        scorecard
    text : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0Text, default is Undefined, optional
        text
    title : str, default is Undefined, optional
        Optional. The title of the widget.
    xyChart : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChart, default is Undefined, optional
        xy chart
    """


    blank?: any

    logsPanel?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0LogsPanel

    scorecard?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0Scorecard

    text?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0Text

    title?: str

    xyChart?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChart


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0LogsPanel:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0 widgets items0 logs panel

    Attributes
    ----------
    $filter : str, default is Undefined, optional
        A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
    resourceNames : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0LogsPanelResourceNamesItems0], default is Undefined, optional
        resource names
    """


    $filter?: str

    resourceNames?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0LogsPanelResourceNamesItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0LogsPanelResourceNamesItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0 widgets items0 logs panel resource names items0

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0Scorecard:
    """
    A scorecard summarizing time series data.

    Attributes
    ----------
    gaugeView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardGaugeView, default is Undefined, optional
        gauge view
    sparkChartView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardSparkChartView, default is Undefined, optional
        spark chart view
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardThresholdsItems0], default is Undefined, optional
        The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQuery, default is Undefined, required
        time series query
    """


    gaugeView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardGaugeView

    sparkChartView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardSparkChartView

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardThresholdsItems0]

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardGaugeView:
    """
    Will cause the scorecard to show a gauge chart.

    Attributes
    ----------
    lowerBound : float, default is Undefined, optional
        The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
    upperBound : float, default is Undefined, optional
        The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
    """


    lowerBound?: float

    upperBound?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardSparkChartView:
    """
    Will cause the scorecard to show a spark chart.

    Attributes
    ----------
    minAlignmentPeriod : str, default is Undefined, optional
        The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.
    sparkChartType : str, default is Undefined, required
        Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR
    """


    minAlignmentPeriod?: str

    sparkChartType: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0 widgets items0 scorecard thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0Text:
    """
    A raw string or markdown displaying textual content.

    Attributes
    ----------
    content : str, default is Undefined, optional
        The text content to be displayed.
    format : str, default is Undefined, optional
        How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW
    """


    content?: str

    format?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChart:
    """
    A chart of time series data.

    Attributes
    ----------
    chartOptions : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartChartOptions, default is Undefined, optional
        chart options
    dataSets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0], default is Undefined, required
        Required. The data displayed in this chart.
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartThresholdsItems0], default is Undefined, optional
        Threshold lines drawn horizontally across the chart.
    timeshiftDuration : str, default is Undefined, optional
        The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
    xAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartXAxis, default is Undefined, optional
        x axis
    yAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartYAxis, default is Undefined, optional
        y axis
    """


    chartOptions?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartChartOptions

    dataSets: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0]

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartThresholdsItems0]

    timeshiftDuration?: str

    xAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartXAxis

    yAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartYAxis


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartChartOptions:
    """
    Display options for the chart.

    Attributes
    ----------
    mode : str, default is Undefined, optional
        The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS
    """


    mode?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0 widgets items0 xy chart data sets items0

    Attributes
    ----------
    legendTemplate : str, default is Undefined, optional
        A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. 
    minAlignmentPeriod : str, default is Undefined, optional
        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
    plotType : str, default is Undefined, optional
        How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQuery, default is Undefined, required
        time series query
    """


    legendTemplate?: str

    minAlignmentPeriod?: str

    plotType?: str

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec column layout columns items0 widgets items0 xy chart thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartXAxis:
    """
    The properties applied to the X axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecColumnLayoutColumnsItems0WidgetsItems0XyChartYAxis:
    """
    The properties applied to the Y axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayout:
    """
    Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.

    Attributes
    ----------
    columns : int, default is Undefined, optional
        The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.
    widgets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0], default is Undefined, optional
        The informational elements that are arranged into the columns row-first.
    """


    columns?: int

    widgets?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec grid layout widgets items0

    Attributes
    ----------
    blank : any, default is Undefined, optional
        A blank space.
    logsPanel : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0LogsPanel, default is Undefined, optional
        logs panel
    scorecard : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0Scorecard, default is Undefined, optional
        scorecard
    text : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0Text, default is Undefined, optional
        text
    title : str, default is Undefined, optional
        Optional. The title of the widget.
    xyChart : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChart, default is Undefined, optional
        xy chart
    """


    blank?: any

    logsPanel?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0LogsPanel

    scorecard?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0Scorecard

    text?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0Text

    title?: str

    xyChart?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChart


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0LogsPanel:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec grid layout widgets items0 logs panel

    Attributes
    ----------
    $filter : str, default is Undefined, optional
        A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
    resourceNames : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0LogsPanelResourceNamesItems0], default is Undefined, optional
        resource names
    """


    $filter?: str

    resourceNames?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0LogsPanelResourceNamesItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0LogsPanelResourceNamesItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec grid layout widgets items0 logs panel resource names items0

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0Scorecard:
    """
    A scorecard summarizing time series data.

    Attributes
    ----------
    gaugeView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardGaugeView, default is Undefined, optional
        gauge view
    sparkChartView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardSparkChartView, default is Undefined, optional
        spark chart view
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardThresholdsItems0], default is Undefined, optional
        The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQuery, default is Undefined, required
        time series query
    """


    gaugeView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardGaugeView

    sparkChartView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardSparkChartView

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardThresholdsItems0]

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardGaugeView:
    """
    Will cause the scorecard to show a gauge chart.

    Attributes
    ----------
    lowerBound : float, default is Undefined, optional
        The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
    upperBound : float, default is Undefined, optional
        The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
    """


    lowerBound?: float

    upperBound?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardSparkChartView:
    """
    Will cause the scorecard to show a spark chart.

    Attributes
    ----------
    minAlignmentPeriod : str, default is Undefined, optional
        The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.
    sparkChartType : str, default is Undefined, required
        Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR
    """


    minAlignmentPeriod?: str

    sparkChartType: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec grid layout widgets items0 scorecard thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0Text:
    """
    A raw string or markdown displaying textual content.

    Attributes
    ----------
    content : str, default is Undefined, optional
        The text content to be displayed.
    format : str, default is Undefined, optional
        How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW
    """


    content?: str

    format?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChart:
    """
    A chart of time series data.

    Attributes
    ----------
    chartOptions : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartChartOptions, default is Undefined, optional
        chart options
    dataSets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0], default is Undefined, required
        Required. The data displayed in this chart.
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartThresholdsItems0], default is Undefined, optional
        Threshold lines drawn horizontally across the chart.
    timeshiftDuration : str, default is Undefined, optional
        The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
    xAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartXAxis, default is Undefined, optional
        x axis
    yAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartYAxis, default is Undefined, optional
        y axis
    """


    chartOptions?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartChartOptions

    dataSets: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0]

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartThresholdsItems0]

    timeshiftDuration?: str

    xAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartXAxis

    yAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartYAxis


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartChartOptions:
    """
    Display options for the chart.

    Attributes
    ----------
    mode : str, default is Undefined, optional
        The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS
    """


    mode?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec grid layout widgets items0 xy chart data sets items0

    Attributes
    ----------
    legendTemplate : str, default is Undefined, optional
        A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. 
    minAlignmentPeriod : str, default is Undefined, optional
        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
    plotType : str, default is Undefined, optional
        How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQuery, default is Undefined, required
        time series query
    """


    legendTemplate?: str

    minAlignmentPeriod?: str

    plotType?: str

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec grid layout widgets items0 xy chart thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartXAxis:
    """
    The properties applied to the X axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecGridLayoutWidgetsItems0XyChartYAxis:
    """
    The properties applied to the Y axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayout:
    """
    The content is arranged as a grid of tiles, with each content widget occupying one or more tiles.

    Attributes
    ----------
    columns : int, default is Undefined, optional
        The number of columns in the mosaic grid.
    tiles : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0], default is Undefined, optional
        The tiles to display.
    """


    columns?: int

    tiles?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec mosaic layout tiles items0

    Attributes
    ----------
    height : int, default is Undefined, optional
        The height of the tile, measured in grid squares.
    widget : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0Widget, default is Undefined, optional
        widget
    width : int, default is Undefined, optional
        The width of the tile, measured in grid squares.
    xPos : int, default is Undefined, optional
        The zero-indexed position of the tile in grid squares relative to the left edge of the grid.
    yPos : int, default is Undefined, optional
        The zero-indexed position of the tile in grid squares relative to the top edge of the grid.
    """


    height?: int

    widget?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0Widget

    width?: int

    xPos?: int

    yPos?: int


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0Widget:
    """
    The informational widget contained in the tile.

    Attributes
    ----------
    blank : any, default is Undefined, optional
        A blank space.
    logsPanel : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetLogsPanel, default is Undefined, optional
        logs panel
    scorecard : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecard, default is Undefined, optional
        scorecard
    text : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetText, default is Undefined, optional
        text
    title : str, default is Undefined, optional
        Optional. The title of the widget.
    xyChart : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChart, default is Undefined, optional
        xy chart
    """


    blank?: any

    logsPanel?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetLogsPanel

    scorecard?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecard

    text?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetText

    title?: str

    xyChart?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChart


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetLogsPanel:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec mosaic layout tiles items0 widget logs panel

    Attributes
    ----------
    $filter : str, default is Undefined, optional
        A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
    resourceNames : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetLogsPanelResourceNamesItems0], default is Undefined, optional
        resource names
    """


    $filter?: str

    resourceNames?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetLogsPanelResourceNamesItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetLogsPanelResourceNamesItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec mosaic layout tiles items0 widget logs panel resource names items0

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecard:
    """
    A scorecard summarizing time series data.

    Attributes
    ----------
    gaugeView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardGaugeView, default is Undefined, optional
        gauge view
    sparkChartView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardSparkChartView, default is Undefined, optional
        spark chart view
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardThresholdsItems0], default is Undefined, optional
        The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQuery, default is Undefined, required
        time series query
    """


    gaugeView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardGaugeView

    sparkChartView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardSparkChartView

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardThresholdsItems0]

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardGaugeView:
    """
    Will cause the scorecard to show a gauge chart.

    Attributes
    ----------
    lowerBound : float, default is Undefined, optional
        The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
    upperBound : float, default is Undefined, optional
        The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
    """


    lowerBound?: float

    upperBound?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardSparkChartView:
    """
    Will cause the scorecard to show a spark chart.

    Attributes
    ----------
    minAlignmentPeriod : str, default is Undefined, optional
        The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.
    sparkChartType : str, default is Undefined, required
        Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR
    """


    minAlignmentPeriod?: str

    sparkChartType: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec mosaic layout tiles items0 widget scorecard thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetText:
    """
    A raw string or markdown displaying textual content.

    Attributes
    ----------
    content : str, default is Undefined, optional
        The text content to be displayed.
    format : str, default is Undefined, optional
        How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW
    """


    content?: str

    format?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChart:
    """
    A chart of time series data.

    Attributes
    ----------
    chartOptions : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartChartOptions, default is Undefined, optional
        chart options
    dataSets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0], default is Undefined, required
        Required. The data displayed in this chart.
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartThresholdsItems0], default is Undefined, optional
        Threshold lines drawn horizontally across the chart.
    timeshiftDuration : str, default is Undefined, optional
        The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
    xAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartXAxis, default is Undefined, optional
        x axis
    yAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartYAxis, default is Undefined, optional
        y axis
    """


    chartOptions?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartChartOptions

    dataSets: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0]

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartThresholdsItems0]

    timeshiftDuration?: str

    xAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartXAxis

    yAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartYAxis


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartChartOptions:
    """
    Display options for the chart.

    Attributes
    ----------
    mode : str, default is Undefined, optional
        The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS
    """


    mode?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec mosaic layout tiles items0 widget xy chart data sets items0

    Attributes
    ----------
    legendTemplate : str, default is Undefined, optional
        A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. 
    minAlignmentPeriod : str, default is Undefined, optional
        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
    plotType : str, default is Undefined, optional
        How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQuery, default is Undefined, required
        time series query
    """


    legendTemplate?: str

    minAlignmentPeriod?: str

    plotType?: str

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec mosaic layout tiles items0 widget xy chart thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartXAxis:
    """
    The properties applied to the X axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecMosaicLayoutTilesItems0WidgetXyChartYAxis:
    """
    The properties applied to the Y axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecProjectRef:
    """
    Immutable. The Project that this resource belongs to.

    Attributes
    ----------
    external : str, default is Undefined, optional
        The project id of the resource.

        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayout:
    """
    The content is divided into equally spaced rows and the widgets are arranged horizontally.

    Attributes
    ----------
    rows : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0], default is Undefined, optional
        The rows of content to display.
    """


    rows?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0

    Attributes
    ----------
    weight : int, default is Undefined, optional
        The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.
    widgets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0], default is Undefined, optional
        The display widgets arranged horizontally in this row.
    """


    weight?: int

    widgets?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0 widgets items0

    Attributes
    ----------
    blank : any, default is Undefined, optional
        A blank space.
    logsPanel : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0LogsPanel, default is Undefined, optional
        logs panel
    scorecard : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0Scorecard, default is Undefined, optional
        scorecard
    text : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0Text, default is Undefined, optional
        text
    title : str, default is Undefined, optional
        Optional. The title of the widget.
    xyChart : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChart, default is Undefined, optional
        xy chart
    """


    blank?: any

    logsPanel?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0LogsPanel

    scorecard?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0Scorecard

    text?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0Text

    title?: str

    xyChart?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChart


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0LogsPanel:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0 widgets items0 logs panel

    Attributes
    ----------
    $filter : str, default is Undefined, optional
        A filter that chooses which log entries to return. See [Advanced Logs Queries](https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
    resourceNames : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0LogsPanelResourceNamesItems0], default is Undefined, optional
        resource names
    """


    $filter?: str

    resourceNames?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0LogsPanelResourceNamesItems0]


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0LogsPanelResourceNamesItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0 widgets items0 logs panel resource names items0

    Attributes
    ----------
    external : str, default is Undefined, optional
        Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """


    external?: str

    name?: str

    namespace?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0Scorecard:
    """
    A scorecard summarizing time series data.

    Attributes
    ----------
    gaugeView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardGaugeView, default is Undefined, optional
        gauge view
    sparkChartView : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardSparkChartView, default is Undefined, optional
        spark chart view
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardThresholdsItems0], default is Undefined, optional
        The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)  As an example, consider a scorecard with the following four thresholds: {   value: 90,   category: 'DANGER',   trigger: 'ABOVE', },: {   value: 70,   category: 'WARNING',   trigger: 'ABOVE', }, {   value: 10,   category: 'DANGER',   trigger: 'BELOW', }, {   value: 20,   category: 'WARNING',   trigger: 'BELOW', }  Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQuery, default is Undefined, required
        time series query
    """


    gaugeView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardGaugeView

    sparkChartView?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardSparkChartView

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardThresholdsItems0]

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardGaugeView:
    """
    Will cause the scorecard to show a gauge chart.

    Attributes
    ----------
    lowerBound : float, default is Undefined, optional
        The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
    upperBound : float, default is Undefined, optional
        The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
    """


    lowerBound?: float

    upperBound?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardSparkChartView:
    """
    Will cause the scorecard to show a spark chart.

    Attributes
    ----------
    minAlignmentPeriod : str, default is Undefined, optional
        The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.
    sparkChartType : str, default is Undefined, required
        Required. The type of sparkchart to show in this chartView. Possible values: SPARK_CHART_TYPE_UNSPECIFIED, SPARK_LINE, SPARK_BAR
    """


    minAlignmentPeriod?: str

    sparkChartType: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0 widgets items0 scorecard thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0ScorecardTimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0Text:
    """
    A raw string or markdown displaying textual content.

    Attributes
    ----------
    content : str, default is Undefined, optional
        The text content to be displayed.
    format : str, default is Undefined, optional
        How the text content is formatted. Possible values: FORMAT_UNSPECIFIED, MARKDOWN, RAW
    """


    content?: str

    format?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChart:
    """
    A chart of time series data.

    Attributes
    ----------
    chartOptions : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartChartOptions, default is Undefined, optional
        chart options
    dataSets : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0], default is Undefined, required
        Required. The data displayed in this chart.
    thresholds : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartThresholdsItems0], default is Undefined, optional
        Threshold lines drawn horizontally across the chart.
    timeshiftDuration : str, default is Undefined, optional
        The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
    xAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartXAxis, default is Undefined, optional
        x axis
    yAxis : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartYAxis, default is Undefined, optional
        y axis
    """


    chartOptions?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartChartOptions

    dataSets: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0]

    thresholds?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartThresholdsItems0]

    timeshiftDuration?: str

    xAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartXAxis

    yAxis?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartYAxis


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartChartOptions:
    """
    Display options for the chart.

    Attributes
    ----------
    mode : str, default is Undefined, optional
        The chart mode. Possible values: MODE_UNSPECIFIED, COLOR, X_RAY, STATS
    """


    mode?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0 widgets items0 xy chart data sets items0

    Attributes
    ----------
    legendTemplate : str, default is Undefined, optional
        A template string for naming `TimeSeries` in the resulting data set. This should be a string with interpolations of the form `${label_name}`, which will resolve to the label's value. 
    minAlignmentPeriod : str, default is Undefined, optional
        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the `min_alignment_period` should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
    plotType : str, default is Undefined, optional
        How this data should be plotted on the chart. Possible values: PLOT_TYPE_UNSPECIFIED, LINE, STACKED_AREA, STACKED_BAR, HEATMAP
    timeSeriesQuery : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQuery, default is Undefined, required
        time series query
    """


    legendTemplate?: str

    minAlignmentPeriod?: str

    plotType?: str

    timeSeriesQuery: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQuery


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQuery:
    """
    Required. Fields for querying time series data from the Stackdriver metrics API.

    Attributes
    ----------
    timeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter, default is Undefined, optional
        time series filter
    timeSeriesFilterRatio : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio, default is Undefined, optional
        time series filter ratio
    timeSeriesQueryLanguage : str, default is Undefined, optional
        A query used to fetch time series.
    unitOverride : str, default is Undefined, optional
        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in `MetricDescriptor`.
    """


    timeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter

    timeSeriesFilterRatio?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio

    timeSeriesQueryLanguage?: str

    unitOverride?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilter:
    """
    Filter parameters to fetch time series.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation

    $filter: str

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatio:
    """
    Parameters to fetch a ratio between two time series filters.

    Attributes
    ----------
    denominator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator, default is Undefined, optional
        denominator
    numerator : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator, default is Undefined, optional
        numerator
    pickTimeSeriesFilter : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter, default is Undefined, optional
        pick time series filter
    secondaryAggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation, default is Undefined, optional
        secondary aggregation
    """


    denominator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator

    numerator?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator

    pickTimeSeriesFilter?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter

    secondaryAggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominator:
    """
    The denominator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioDenominatorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumerator:
    """
    The numerator of the ratio.

    Attributes
    ----------
    aggregation : MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation, default is Undefined, optional
        aggregation
    $filter : str, default is Undefined, required
        Required. The [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
    """


    aggregation?: MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation

    $filter: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioNumeratorAggregation:
    """
    By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioPickTimeSeriesFilter:
    """
    Ranking based time series filter.

    Attributes
    ----------
    direction : str, default is Undefined, optional
        How to use the ranking to select time series that pass through the filter. Possible values: DIRECTION_UNSPECIFIED, TOP, BOTTOM
    numTimeSeries : int, default is Undefined, optional
        How many time series to allow to pass through the filter.
    rankingMethod : str, default is Undefined, optional
        `ranking_method` is applied to each time series independently to produce the value which will be used to compare the time series to other time series. Possible values: METHOD_UNSPECIFIED, METHOD_MEAN, METHOD_MAX, METHOD_MIN, METHOD_SUM, METHOD_LATEST
    """


    direction?: str

    numTimeSeries?: int

    rankingMethod?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterRatioSecondaryAggregation:
    """
    Apply a second aggregation after the ratio is computed.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartDataSetsItems0TimeSeriesQueryTimeSeriesFilterSecondaryAggregation:
    """
    Apply a second aggregation after `aggregation` is applied.

    Attributes
    ----------
    alignmentPeriod : str, default is Undefined, optional
        The `alignment_period` specifies a time interval, in seconds, that is used to divide the data in all the [time series][google.monitoring.v3.TimeSeries] into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.  The value must be at least 60 seconds. If a per-series aligner other than `ALIGN_NONE` is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner `ALIGN_NONE` is specified, then this field is ignored.
    crossSeriesReducer : str, default is Undefined, optional
        The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.  Not all reducer operations can be applied to all time series. The valid choices depend on the `metric_kind` and the `value_type` of the original time series. Reduction can yield a time series with a different `metric_kind` or `value_type` than the input time series.  Time series data must first be aligned (see `per_series_aligner`) in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified, and must not be `ALIGN_NONE`. An `alignment_period` must also be specified; otherwise, an error is returned. Possible values: REDUCE_NONE, REDUCE_MEAN, REDUCE_MIN, REDUCE_MAX, REDUCE_SUM, REDUCE_STDDEV, REDUCE_COUNT, REDUCE_COUNT_TRUE, REDUCE_COUNT_FALSE, REDUCE_FRACTION_TRUE, REDUCE_PERCENTILE_99, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_50, REDUCE_PERCENTILE_05, REDUCE_FRACTION_LESS_THAN, REDUCE_MAKE_DISTRIBUTION
    groupByFields : [str], default is Undefined, optional
        The set of fields to preserve when `cross_series_reducer` is specified. The `group_by_fields` determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The `cross_series_reducer` is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains `resource.type`.  Fields not specified in `group_by_fields` are aggregated away.  If `group_by_fields` is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If `cross_series_reducer` is not defined, this field is ignored.
    perSeriesAligner : str, default is Undefined, optional
        An `Aligner` describes how to bring the data points in a single time series into temporal alignment. Except for `ALIGN_NONE`, all alignments cause all the data points in an `alignment_period` to be mathematically grouped together, resulting in a single data point for each `alignment_period` with end timestamp at the end of the period.  Not all alignment operations may be applied to all time series. The valid choices depend on the `metric_kind` and `value_type` of the original time series. Alignment can change the `metric_kind` or the `value_type` of the time series.  Time series data must be aligned in order to perform cross-time series reduction. If `cross_series_reducer` is specified, then `per_series_aligner` must be specified and not equal to `ALIGN_NONE` and `alignment_period` must be specified; otherwise, an error is returned.
    """


    alignmentPeriod?: str

    crossSeriesReducer?: str

    groupByFields?: [str]

    perSeriesAligner?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartThresholdsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard spec row layout rows items0 widgets items0 xy chart thresholds items0

    Attributes
    ----------
    color : str, default is Undefined, optional
        The state color for this threshold. Color is not allowed in a XyChart. Possible values: COLOR_UNSPECIFIED, GREY, BLUE, GREEN, YELLOW, ORANGE, RED
    direction : str, default is Undefined, optional
        The direction for the current threshold. Direction is not allowed in a XyChart. Possible values: DIRECTION_UNSPECIFIED, ABOVE, BELOW
    label : str, default is Undefined, optional
        A label for the threshold.
    value : float, default is Undefined, optional
        The value of the threshold. The value should be defined in the native scale of the metric.
    """


    color?: str

    direction?: str

    label?: str

    value?: float


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartXAxis:
    """
    The properties applied to the X axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardSpecRowLayoutRowsItems0WidgetsItems0XyChartYAxis:
    """
    The properties applied to the Y axis.

    Attributes
    ----------
    label : str, default is Undefined, optional
        The label of the axis.
    scale : str, default is Undefined, optional
        The axis scale. By default, a linear scale is used. Possible values: SCALE_UNSPECIFIED, LINEAR, LOG10
    """


    label?: str

    scale?: str


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardStatus:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard status

    Attributes
    ----------
    conditions : [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardStatusConditionsItems0], default is Undefined, optional
        Conditions represent the latest available observation of the resource's current state.
    etag : str, default is Undefined, optional
        \`etag\` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An \`etag\` is returned in the response to \`GetDashboard\`, and users are expected to put that etag in the request to \`UpdateDashboard\` to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
    """


    conditions?: [MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardStatusConditionsItems0]

    etag?: str

    observedGeneration?: int


schema MonitoringCnrmCloudGoogleComV1beta1MonitoringDashboardStatusConditionsItems0:
    """
    monitoring cnrm cloud google com v1beta1 monitoring dashboard status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        Last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        Human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        Unique, one-word, CamelCase reason for the condition's last transition.
    status : str, default is Undefined, optional
        Status is the status of the condition. Can be True, False, Unknown.
    $type : str, default is Undefined, optional
        Type is the type of the condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


