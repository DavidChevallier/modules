"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex

schema GithubWorkflow:
    """
    GithubWorkflow

    Attributes
    ----------
    name : str, optional
        The name of your workflow. GitHub displays the names of your workflows on your repository's actions page. If you omit this field, GitHub sets the name to the workflow's filename.
    on : any, required
        The name of the GitHub event that triggers the workflow. You can provide a single event string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. For a list of available events, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/events-that-trigger-workflows.
    env : Env, optional
        A map of environment variables that are available to all jobs and steps in the workflow.
    defaults : Defaults, optional
        A map of default settings that will apply to all jobs in the workflow.
    concurrency : any, optional
        Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression. The expression can use any context except for the secrets context. 
        You can also specify concurrency at the workflow level. 
        When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.
    jobs : GithubWorkflowJobs, required
        A workflow run is made up of one or more jobs. Jobs run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.
        Each job runs in a fresh instance of the virtual environment specified by runs-on.
        You can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits.
    permissions : Permissions, optional
    """

    name?: str
    on: any
    env?: Env
    defaults?: Defaults
    concurrency?: any
    jobs: GithubWorkflowJobs
    permissions?: Permissions

schema ContainerCredentials:
    """
    If the image's container registry requires authentication to pull the image, you can use credentials to set a map of the username and password. The credentials are the same values that you would provide to the `docker login` command.

    Attributes
    ----------
    username : str, optional
    password : str, optional
    """

    username?: str
    password?: str

schema DefaultsRun:
    """
    DefaultsRun

    Attributes
    ----------
    shell : Shell, optional
    working_directory : WorkingDirectory, optional
    """

    shell?: Shell
    working_directory?: WorkingDirectory

schema GithubWorkflowJobs:
    """
    A workflow run is made up of one or more jobs. Jobs run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.
    Each job runs in a fresh instance of the virtual environment specified by runs-on.
    You can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits.
    """

    [...str]: any

schema NormalJobOutputs:
    """
    A map of outputs for a job. Job outputs are available to all downstream jobs that depend on this job.
    """

    [...str]: str

schema NormalJobServices:
    """
    Additional containers to host services for a job in a workflow. These are useful for creating databases or cache services like redis. The runner on the virtual machine will automatically create a network and manage the life cycle of the service containers.
    When you use a service container for a job or your step uses container actions, you don't need to set port information to access the service. Docker automatically exposes all ports between containers on the same network.
    When both the job and the action run in a container, you can directly reference the container by its hostname. The hostname is automatically mapped to the service name.
    When a step does not use a container action, you must access the service using localhost and bind the ports.
    """

    [...str]: Container

schema NormalJobStepsItems0:
    r"""
    NormalJobStepsItems0

    Attributes
    ----------
    id : str, optional
        A unique identifier for the step. You can use the id to reference the step in contexts. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
    $if : str, optional
        You can use the if conditional to prevent a step from running unless a condition is met. You can use any supported context and expression to create a conditional.
        Expressions in an if conditional do not require the ${{ }} syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
    name : str, optional
        A name for your step to display on GitHub.
    uses : str, optional
        Selects an action to run as part of a step in your job. An action is a reusable unit of code. You can use an action defined in the same repository as the workflow, a public repository, or in a published Docker container image (https://hub.docker.com/).
        We strongly recommend that you include the version of the action you are using by specifying a Git ref, SHA, or Docker tag number. If you don't specify a version, it could break your workflows or cause unexpected behavior when the action owner publishes an update.
        - Using the commit SHA of a released action version is the safest for stability and security.
        - Using the specific major action version allows you to receive critical fixes and security patches while still maintaining compatibility. It also assures that your workflow should still work.
        - Using the master branch of an action may be convenient, but if someone releases a new major version with a breaking change, your workflow could break.
        Some actions require inputs that you must set using the with keyword. Review the action's README file to determine the inputs required.
        Actions are either JavaScript files or Docker containers. If the action you're using is a Docker container you must run the job in a Linux virtual environment. For more details, see https://help.github.com/en/articles/virtual-environments-for-github-actions.
    run : str, optional
        Runs command-line programs using the operating system's shell. If you do not provide a name, the step name will default to the text specified in the run command.
        Commands run using non-login shells by default. You can choose a different shell and customize the shell used to run commands. For more information, see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#using-a-specific-shell.
        Each run keyword represents a new process and shell in the virtual environment. When you provide multi-line commands, each line runs in the same shell.
    working_directory : WorkingDirectory, optional
    shell : Shell, optional
    with : Env, optional
        A map of the input parameters defined by the action. Each input parameter is a key/value pair. Input parameters are set as environment variables. The variable is prefixed with INPUT_ and converted to upper case.
    env : Env, optional
        Sets environment variables for steps to use in the virtual environment. You can also set environment variables for the entire workflow or a job.
    continue_on_error : any, optional, default is False
        Prevents a job from failing when a step fails. Set to true to allow a job to pass when this step fails.
    timeout_minutes : float, optional
        The maximum number of minutes to run the step before killing the process.
    """

    id?: str
    $if?: str
    name?: str
    uses?: str
    run?: str
    working_directory?: WorkingDirectory
    shell?: Shell
    with?: Env
    env?: Env
    continue_on_error?: any = False
    timeout_minutes?: float

schema NormalJobStrategy:
    """
    A strategy creates a build matrix for your jobs. You can define different variations of an environment to run each job in.

    Attributes
    ----------
    matrix : any, required
        A build matrix is a set of different configurations of the virtual environment. For example you might run a job against more than one supported version of a language, operating system, or tool. Each configuration is a copy of the job that runs and reports a status.
        You can specify a matrix by supplying an array for the configuration options. For example, if the GitHub virtual environment supports Node.js versions 6, 8, and 10 you could specify an array of those versions in the matrix.
        When you define a matrix of operating systems, you must set the required runs-on keyword to the operating system of the current job, rather than hard-coding the operating system name. To access the operating system name, you can use the matrix.os context parameter to set runs-on. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
    fail_fast : bool, optional, default is True
        When set to true, GitHub cancels all in-progress jobs if any matrix job fails. Default: true
    max_parallel : float, optional
        The maximum number of jobs that can run simultaneously when using a matrix job strategy. By default, GitHub will maximize the number of jobs run in parallel depending on the available runners on GitHub-hosted virtual machines.
    """

    matrix: any
    fail_fast?: bool = True
    max_parallel?: float

schema Architecture:
    """
    Architecture
    """

    [...str]: any

schema Branch:
    """
    Branch
    """

    [...str]: any

schema Concurrency:
    """
    Concurrency

    Attributes
    ----------
    group : str, required
        When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled.
    cancel_in_progress : any, optional
        To cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.
    """

    group: str
    cancel_in_progress?: any

schema Configuration:
    """
    Configuration
    """

    [...str]: any

schema Container:
    """
    Container

    Attributes
    ----------
    image : str, required
        The Docker image to use as the container to run the action. The value can be the Docker Hub image name or a registry name.
    credentials : ContainerCredentials, optional
        If the image's container registry requires authentication to pull the image, you can use credentials to set a map of the username and password. The credentials are the same values that you would provide to the `docker login` command.
    env : Env, optional
        Sets an array of environment variables in the container.
    ports : [any], optional
        Sets an array of ports to expose on the container.
    volumes : [str], optional
        Sets an array of volumes for the container to use. You can use volumes to share data between services or other steps in a job. You can specify named Docker volumes, anonymous Docker volumes, or bind mounts on the host.
        To specify a volume, you specify the source and destination path: <source>:<destinationPath>
        The <source> is a volume name or an absolute path on the host machine, and <destinationPath> is an absolute path in the container.
    options : str, optional
        Additional Docker container resource options. For a list of options, see https://docs.docker.com/engine/reference/commandline/create/#options.
    """

    image: str
    credentials?: ContainerCredentials
    env?: Env
    ports?: [any]
    volumes?: [str]
    options?: str

    check:
        len(ports) >= 1
        len(volumes) >= 1

schema Defaults:
    """
    Defaults

    Attributes
    ----------
    run : DefaultsRun, optional
    """

    run?: DefaultsRun

schema Env:
    """
    Env
    """

    [...str]: any

schema Environment:
    """
    The environment that the job references

    Attributes
    ----------
    name : str, required
        The name of the environment configured in the repo.
    url : str, optional
        A deployment URL
    """

    name: str
    url?: str

schema Event:
    """
    Event
    """

    [...str]: any

schema EventObject:
    """
    EventObject
    """

    [...str]: any

schema ExpressionSyntax:
    """
    ExpressionSyntax
    """

    [...str]: any

schema Globs:
    """
    Globs
    """

    [...str]: any

schema JobNeeds:
    """
    JobNeeds
    """

    [...str]: any

schema Machine:
    """
    Machine
    """

    [...str]: any

schema Name:
    """
    Name
    """

    [...str]: any

schema NormalJob:
    r"""
    Each job must have an id to associate with the job. The key job_id is a string and its value is a map of the job's configuration data. You must replace <job_id> with a string that is unique to the jobs object. The <job_id> must start with a letter or _ and contain only alphanumeric characters, -, or _.

    Attributes
    ----------
    name : str, optional
        The name of the job displayed on GitHub.
    needs : JobNeeds, optional
    permissions : Permissions, optional
    runs_on : any, required
        The type of machine to run the job on. The machine can be either a GitHub-hosted runner, or a self-hosted runner.
    environment : any, optional
        The environment that the job references.
    outputs : NormalJobOutputs, optional
        A map of outputs for a job. Job outputs are available to all downstream jobs that depend on this job.
    env : Env, optional
        A map of environment variables that are available to all steps in the job.
    defaults : Defaults, optional
        A map of default settings that will apply to all steps in the job.
    $if : str, optional
        You can use the if conditional to prevent a job from running unless a condition is met. You can use any supported context and expression to create a conditional.
        Expressions in an if conditional do not require the ${{ }} syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
    steps : [NormalJobStepsItems0], optional
        A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an action in your repository, a public repository, or an action published in a Docker registry. Not all steps run actions, but all actions run as a step. Each step runs in its own process in the virtual environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job.

    timeout_minutes : float, optional, default is 360
        The maximum number of minutes to let a workflow run before GitHub automatically cancels it. Default: 360
    strategy : NormalJobStrategy, optional
        A strategy creates a build matrix for your jobs. You can define different variations of an environment to run each job in.
    continue_on_error : any, optional
        Prevents a workflow run from failing when a job fails. Set to true to allow a workflow run to pass when this job fails.
    container : any, optional
        A container to run any steps in a job that don't already specify a container. If you have steps that use both script and container actions, the container actions will run as sibling containers on the same network with the same volume mounts.
        If you do not set a container, all steps will run directly on the host specified by runs-on unless a step refers to an action configured to run in a container.
    services : NormalJobServices, optional
        Additional containers to host services for a job in a workflow. These are useful for creating databases or cache services like redis. The runner on the virtual machine will automatically create a network and manage the life cycle of the service containers.
        When you use a service container for a job or your step uses container actions, you don't need to set port information to access the service. Docker automatically exposes all ports between containers on the same network.
        When both the job and the action run in a container, you can directly reference the container by its hostname. The hostname is automatically mapped to the service name.
        When a step does not use a container action, you must access the service using localhost and bind the ports.
    concurrency : any, optional
        Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression. The expression can use any context except for the secrets context. 
        You can also specify concurrency at the workflow level. 
        When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.
    """

    name?: str
    needs?: JobNeeds
    permissions?: Permissions
    runs_on: any
    environment?: any
    outputs?: NormalJobOutputs
    env?: Env
    defaults?: Defaults
    $if?: str
    steps?: [NormalJobStepsItems0]
    timeout_minutes?: float = 360
    strategy?: NormalJobStrategy
    continue_on_error?: any
    container?: any
    services?: NormalJobServices
    concurrency?: any

    check:
        len(steps) >= 1

schema Path:
    """
    Path
    """

    [...str]: any

schema Permissions:
    """
    Permissions
    """

    [...str]: any

type PermissionsLevel = "read" | "write" | "none"

schema PermissionsEvent:
    """
    PermissionsEvent

    Attributes
    ----------
    actions : PermissionsLevel, optional
    checks : PermissionsLevel, optional
    contents : PermissionsLevel, optional
    deployments : PermissionsLevel, optional
    discussions : PermissionsLevel, optional
    id_token : PermissionsLevel, optional
    issues : PermissionsLevel, optional
    packages : PermissionsLevel, optional
    pages : PermissionsLevel, optional
    pull_requests : PermissionsLevel, optional
    repository_projects : PermissionsLevel, optional
    security_events : PermissionsLevel, optional
    statuses : PermissionsLevel, optional
    """

    actions?: PermissionsLevel
    checks?: PermissionsLevel
    contents?: PermissionsLevel
    deployments?: PermissionsLevel
    discussions?: PermissionsLevel
    id_token?: PermissionsLevel
    issues?: PermissionsLevel
    packages?: PermissionsLevel
    pages?: PermissionsLevel
    pull_requests?: PermissionsLevel
    repository_projects?: PermissionsLevel
    security_events?: PermissionsLevel
    statuses?: PermissionsLevel

schema Ref:
    """
    Ref
    """

    [...str]: any

schema ReusableWorkflowCallJob:
    r"""
    Each job must have an id to associate with the job. The key job_id is a string and its value is a map of the job's configuration data. You must replace <job_id> with a string that is unique to the jobs object. The <job_id> must start with a letter or _ and contain only alphanumeric characters, -, or _.

    Attributes
    ----------
    name : str, optional
        The name of the job displayed on GitHub.
    needs : JobNeeds, optional
    permissions : PermissionsEvent, optional
    $if : str, optional
        You can use the if conditional to prevent a job from running unless a condition is met. You can use any supported context and expression to create a conditional.
        Expressions in an if conditional do not require the ${{ }} syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
    uses : str, required
        The location and version of a reusable workflow file to run as a job, of the form './{path/to}/{localfile}.yml' or '{owner}/{repo}/{path}/{filename}@{ref}'. {ref} can be a SHA, a release tag, or a branch name. Using the commit SHA is the safest for stability and security.
    with : Env, optional
        A map of inputs that are passed to the called workflow. Any inputs that you pass must match the input specifications defined in the called workflow. Unlike 'jobs.<job_id>.steps[*].with', the inputs you pass with 'jobs.<job_id>.with' are not be available as environment variables in the called workflow. Instead, you can reference the inputs by using the inputs context.
    secrets : any, optional
        When a job is used to call a reusable workflow, you can use 'secrets' to provide a map of secrets that are passed to the called workflow. Any secrets that you pass must match the names defined in the called workflow.
    concurrency : any, optional
        Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression. The expression can use any context except for the secrets context. 
        You can also specify concurrency at the workflow level. 
        When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true.
    """

    name?: str
    needs?: JobNeeds
    permissions?: PermissionsEvent
    $if?: str
    uses: str
    with?: Env
    secrets?: any
    concurrency?: any

    check:
        regex.match(uses, r"^(.+/)+(.+)\.(ya?ml)(@.+)?$")

schema Shell:
    """
    Shell
    """

    [...str]: any

schema StringContainingExpressionSyntax:
    """
    StringContainingExpressionSyntax
    """

    [...str]: any

schema Types:
    """
    Types
    """

    [...str]: any

schema WorkingDirectory:
    """
    WorkingDirectory
    """

    [...str]: any

