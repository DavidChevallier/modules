"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema InMemoryChannel:
    """
    InMemoryChannel is a resource representing an in memory channel

    Attributes
    ----------
    apiVersion : str, default is "messaging.knative.dev/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "InMemoryChannel", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MessagingKnativeDevV1InMemoryChannelSpec, default is Undefined, optional
        spec
    status : MessagingKnativeDevV1InMemoryChannelStatus, default is Undefined, optional
        status
    """


    apiVersion: "messaging.knative.dev/v1" = "messaging.knative.dev/v1"

    kind: "InMemoryChannel" = "InMemoryChannel"

    metadata?: v1.ObjectMeta

    spec?: MessagingKnativeDevV1InMemoryChannelSpec

    status?: MessagingKnativeDevV1InMemoryChannelStatus


schema MessagingKnativeDevV1InMemoryChannelSpec:
    """
    Spec defines the desired state of the Channel.

    Attributes
    ----------
    delivery : MessagingKnativeDevV1InMemoryChannelSpecDelivery, default is Undefined, optional
        delivery
    subscribers : [MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0], default is Undefined, optional
        This is the list of subscriptions for this subscribable.
    """


    delivery?: MessagingKnativeDevV1InMemoryChannelSpecDelivery

    subscribers?: [MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0]


schema MessagingKnativeDevV1InMemoryChannelSpecDelivery:
    """
    DeliverySpec contains the default delivery spec for each subscription to this Channelable. Each subscription delivery spec, if any, overrides this global delivery spec.

    Attributes
    ----------
    backoffDelay : str, default is Undefined, optional
        BackoffDelay is the delay before retrying. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601  For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.
    backoffPolicy : str, default is Undefined, optional
        BackoffPolicy is the retry backoff policy (linear, exponential).
    deadLetterSink : MessagingKnativeDevV1InMemoryChannelSpecDeliveryDeadLetterSink, default is Undefined, optional
        dead letter sink
    retry : int, default is Undefined, optional
        Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.
    """


    backoffDelay?: str

    backoffPolicy?: str

    deadLetterSink?: MessagingKnativeDevV1InMemoryChannelSpecDeliveryDeadLetterSink

    retry?: int


schema MessagingKnativeDevV1InMemoryChannelSpecDeliveryDeadLetterSink:
    """
    DeadLetterSink is the sink receiving event that could not be sent to a destination.

    Attributes
    ----------
    ref : MessagingKnativeDevV1InMemoryChannelSpecDeliveryDeadLetterSinkRef, default is Undefined, optional
        ref
    uri : str, default is Undefined, optional
        URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
    """


    ref?: MessagingKnativeDevV1InMemoryChannelSpecDeliveryDeadLetterSinkRef

    uri?: str


schema MessagingKnativeDevV1InMemoryChannelSpecDeliveryDeadLetterSinkRef:
    """
    Ref points to an Addressable.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0:
    """
    messaging knative dev v1 in memory channel spec subscribers items0

    Attributes
    ----------
    delivery : MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0Delivery, default is Undefined, optional
        delivery
    generation : int, default is Undefined, optional
        Generation of the origin of the subscriber with uid:UID.
    replyUri : str, default is Undefined, optional
        ReplyURI is the endpoint for the reply
    subscriberUri : str, default is Undefined, optional
        SubscriberURI is the endpoint for the subscriber
    uid : str, default is Undefined, optional
        UID is used to understand the origin of the subscriber.
    """


    delivery?: MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0Delivery

    generation?: int

    replyUri?: str

    subscriberUri?: str

    uid?: str


schema MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0Delivery:
    """
    DeliverySpec contains options controlling the event delivery

    Attributes
    ----------
    backoffDelay : str, default is Undefined, optional
        BackoffDelay is the delay before retrying. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601  For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.
    backoffPolicy : str, default is Undefined, optional
        BackoffPolicy is the retry backoff policy (linear, exponential).
    deadLetterSink : MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0DeliveryDeadLetterSink, default is Undefined, optional
        dead letter sink
    retry : int, default is Undefined, optional
        Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.
    """


    backoffDelay?: str

    backoffPolicy?: str

    deadLetterSink?: MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0DeliveryDeadLetterSink

    retry?: int


schema MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0DeliveryDeadLetterSink:
    """
    DeadLetterSink is the sink receiving event that could not be sent to a destination.

    Attributes
    ----------
    ref : MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0DeliveryDeadLetterSinkRef, default is Undefined, optional
        ref
    uri : str, default is Undefined, optional
        URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
    """


    ref?: MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0DeliveryDeadLetterSinkRef

    uri?: str


schema MessagingKnativeDevV1InMemoryChannelSpecSubscribersItems0DeliveryDeadLetterSinkRef:
    """
    Ref points to an Addressable.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1InMemoryChannelStatus:
    """
    Status represents the current state of the Channel. This data may be out of date.

    Attributes
    ----------
    address : MessagingKnativeDevV1InMemoryChannelStatusAddress, default is Undefined, optional
        address
    annotations : any, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
    conditions : [MessagingKnativeDevV1InMemoryChannelStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    deadLetterChannel : MessagingKnativeDevV1InMemoryChannelStatusDeadLetterChannel, default is Undefined, optional
        dead letter channel
    deadLetterSinkUri : str, default is Undefined, optional
        DeadLetterSinkURI is the resolved URI of the dead letter ref if one is specified in the Spec.Delivery.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
    subscribers : [MessagingKnativeDevV1InMemoryChannelStatusSubscribersItems0], default is Undefined, optional
        This is the list of subscription's statuses for this channel.
    """


    address?: MessagingKnativeDevV1InMemoryChannelStatusAddress

    annotations?: any

    conditions?: [MessagingKnativeDevV1InMemoryChannelStatusConditionsItems0]

    deadLetterChannel?: MessagingKnativeDevV1InMemoryChannelStatusDeadLetterChannel

    deadLetterSinkUri?: str

    observedGeneration?: int

    subscribers?: [MessagingKnativeDevV1InMemoryChannelStatusSubscribersItems0]


schema MessagingKnativeDevV1InMemoryChannelStatusAddress:
    """
    messaging knative dev v1 in memory channel status address

    Attributes
    ----------
    url : str, default is Undefined, optional
        url
    """


    url?: str


schema MessagingKnativeDevV1InMemoryChannelStatusConditionsItems0:
    """
    messaging knative dev v1 in memory channel status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema MessagingKnativeDevV1InMemoryChannelStatusDeadLetterChannel:
    """
    DeadLetterChannel is a KReference and is set by the channel when it supports native error handling via a channel Failed messages are delivered here.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1InMemoryChannelStatusSubscribersItems0:
    """
    messaging knative dev v1 in memory channel status subscribers items0

    Attributes
    ----------
    message : str, default is Undefined, optional
        A human readable message indicating details of Ready status.
    observedGeneration : int, default is Undefined, optional
        Generation of the origin of the subscriber with uid:UID.
    ready : str, default is Undefined, optional
        Status of the subscriber.
    uid : str, default is Undefined, optional
        UID is used to understand the origin of the subscriber.
    """


    message?: str

    observedGeneration?: int

    ready?: str

    uid?: str


