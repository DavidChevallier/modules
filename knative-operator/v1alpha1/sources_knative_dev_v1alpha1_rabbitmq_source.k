"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema RabbitmqSource:
    """
    RabbitmqSource is the Schema for the rabbitmqsources API.

    Attributes
    ----------
    apiVersion : str, default is "sources.knative.dev/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "RabbitmqSource", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : SourcesKnativeDevV1alpha1RabbitmqSourceSpec, default is Undefined, optional
        spec
    status : SourcesKnativeDevV1alpha1RabbitmqSourceStatus, default is Undefined, optional
        status
    """


    apiVersion: "sources.knative.dev/v1alpha1" = "sources.knative.dev/v1alpha1"

    kind: "RabbitmqSource" = "RabbitmqSource"

    metadata?: v1.ObjectMeta

    spec?: SourcesKnativeDevV1alpha1RabbitmqSourceSpec

    status?: SourcesKnativeDevV1alpha1RabbitmqSourceStatus


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpec:
    """
    sources knative dev v1alpha1 rabbitmq source spec

    Attributes
    ----------
    delivery : SourcesKnativeDevV1alpha1RabbitmqSourceSpecDelivery, default is Undefined, optional
        delivery
    rabbitmqClusterReference : SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqClusterReference, default is Undefined, required
        rabbitmq cluster reference
    rabbitmqResourcesConfig : SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqResourcesConfig, default is Undefined, optional
        rabbitmq resources config
    serviceAccountName : str, default is Undefined, optional
        ServiceAccountName is the name of the ServiceAccount that will be used to run the Receive Adapter Deployment.
    sink : SourcesKnativeDevV1alpha1RabbitmqSourceSpecSink, default is Undefined, required
        sink
    """


    delivery?: SourcesKnativeDevV1alpha1RabbitmqSourceSpecDelivery

    rabbitmqClusterReference: SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqClusterReference

    rabbitmqResourcesConfig?: SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqResourcesConfig

    serviceAccountName?: str

    sink: SourcesKnativeDevV1alpha1RabbitmqSourceSpecSink


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpecDelivery:
    """
    Delivery stores the backoff strategy and retry configuration for the RabbitMQ Source.

    Attributes
    ----------
    backoffDelay : str, default is Undefined, optional
        BackoffDelay is the delay before retrying in time.Duration format. For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.
    backoffPolicy : str, default is Undefined, optional
        BackoffPolicy is the retry backoff policy (linear, exponential).
    retry : int, default is Undefined, optional
        Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.
    """


    backoffDelay?: str

    backoffPolicy?: str

    retry?: int


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqClusterReference:
    """
    RabbitmqClusterReference stores a reference to RabbitmqCluster. This will get used to create resources on the RabbitMQ Broker.

    Attributes
    ----------
    connectionSecret : SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqClusterReferenceConnectionSecret, default is Undefined, optional
        connection secret
    name : str, default is Undefined, optional
        The name of the RabbitMQ cluster to reference. Have to set either name or connectionSecret, but not both.
    namespace : str, default is Undefined, optional
        The namespace of the RabbitMQ cluster to reference. Defaults to the namespace of the requested resource if omitted.
    """


    connectionSecret?: SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqClusterReferenceConnectionSecret

    name?: str

    namespace?: str


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqClusterReferenceConnectionSecret:
    """
    Secret contains the http management uri for the RabbitMQ cluster. The Secret must contain the key `uri`, `username` and `password`. It may optionally contain port or will be defaulted to 5672. Have to set either name or connectionSecret, but not both.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    """


    name?: str


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpecRabbitmqResourcesConfig:
    """
    rabbitmqResourcesConfig stores all the configuration parameters related to RabbitMQ resources created by the Source.

    Attributes
    ----------
    exchangeName : str, default is Undefined, optional
        Name of the exchange; Required when predeclared is false.
    parallelism : int, default is 1, optional
        Sets the Channel's Prefetch count and number of Workers to consume simultaneously from it
    predeclared : bool, default is Undefined, optional
        Predeclared defines if channels and queues are already predeclared and shouldn't be recreated. This should be used in case the user does not have permission to declare new queues and channels in RabbitMQ cluster
    queueName : str, default is Undefined, optional
        Name of the queue to bind to; required value.
    vhost : str, default is Undefined, optional
        VHost is the name of the VHost that will be used to set up our sources
    """


    exchangeName?: str

    parallelism?: int = 1

    predeclared?: bool

    queueName?: str

    vhost?: str


    check:
        parallelism <= 1000
        parallelism >= 1


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpecSink:
    """
    Sink is a reference to an object that will resolve to a domain name to use as the sink. Required property.

    Attributes
    ----------
    ref : SourcesKnativeDevV1alpha1RabbitmqSourceSpecSinkRef, default is Undefined, optional
        ref
    uri : str, default is Undefined, optional
        URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
    """


    ref?: SourcesKnativeDevV1alpha1RabbitmqSourceSpecSinkRef

    uri?: str


schema SourcesKnativeDevV1alpha1RabbitmqSourceSpecSinkRef:
    """
    Ref points to an Addressable.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    group : str, default is Undefined, optional
        Group of the API, without the version of the group. This can be used as an alternative to the APIVersion, and then resolved using ResolveGroup. Note: This API is EXPERIMENTAL and might break anytime. For more details: https://github.com/knative/eventing/issues/5086
    kind : str, default is Undefined, required
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, required
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    group?: str

    kind: str

    name: str

    namespace?: str


schema SourcesKnativeDevV1alpha1RabbitmqSourceStatus:
    """
    sources knative dev v1alpha1 rabbitmq source status

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
    ceAttributes : [SourcesKnativeDevV1alpha1RabbitmqSourceStatusCeAttributesItems0], default is Undefined, optional
        CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.
    conditions : [SourcesKnativeDevV1alpha1RabbitmqSourceStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
    sinkUri : str, default is Undefined, optional
        SinkURI is the current active sink URI that has been configured for the Source.
    """


    annotations?: {str:str}

    ceAttributes?: [SourcesKnativeDevV1alpha1RabbitmqSourceStatusCeAttributesItems0]

    conditions?: [SourcesKnativeDevV1alpha1RabbitmqSourceStatusConditionsItems0]

    observedGeneration?: int

    sinkUri?: str


schema SourcesKnativeDevV1alpha1RabbitmqSourceStatusCeAttributesItems0:
    """
    CloudEventAttributes specifies the attributes that a Source uses as part of its CloudEvents.

    Attributes
    ----------
    source : str, default is Undefined, optional
        Source is the CloudEvents source attribute.
    $type : str, default is Undefined, optional
        Type refers to the CloudEvent type attribute.
    """


    source?: str

    $type?: str


schema SourcesKnativeDevV1alpha1RabbitmqSourceStatusConditionsItems0:
    """
    Condition defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


