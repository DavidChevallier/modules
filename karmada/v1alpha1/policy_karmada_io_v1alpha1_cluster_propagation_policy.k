"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ClusterPropagationPolicy:
    """
    ClusterPropagationPolicy represents the cluster-wide policy that propagates a group of resources to one or more clusters. Different with PropagationPolicy that could only propagate resources in its own namespace, ClusterPropagationPolicy is able to propagate cluster level resources and resources in any namespace other than system reserved ones. System reserved namespaces are: karmada-system, karmada-cluster, karmada-es-*.

    Attributes
    ----------
    apiVersion : str, default is "policy.karmada.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ClusterPropagationPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpec, default is Undefined, required
        spec
    """


    apiVersion: "policy.karmada.io/v1alpha1" = "policy.karmada.io/v1alpha1"

    kind: "ClusterPropagationPolicy" = "ClusterPropagationPolicy"

    metadata?: v1.ObjectMeta

    spec: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpec


    check:


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpec:
    """
    Spec represents the desired behavior of ClusterPropagationPolicy.

    Attributes
    ----------
    association : bool, default is Undefined, optional
        Association tells if relevant resources should be selected automatically. e.g. a ConfigMap referred by a Deployment. default false. Deprecated: in favor of PropagateDeps.
    conflictResolution : str, default is "Abort", optional
        ConflictResolution declares how potential conflict should be handled when a resource that is being propagated already exists in the target cluster. 
         It defaults to "Abort" which means stop propagating to avoid unexpected overwrites. The "Overwrite" might be useful when migrating legacy cluster resources to Karmada, in which case conflict is predictable and can be instructed to Karmada take over the resource by overwriting.
    dependentOverrides : [str], default is Undefined, optional
        DependentOverrides represents the list of overrides(OverridePolicy) which must present before the current PropagationPolicy takes effect. 
         It used to explicitly specify overrides which current PropagationPolicy rely on. A typical scenario is the users create OverridePolicy(ies) and resources at the same time, they want to ensure the new-created policies would be adopted. 
         Note: For the overrides, OverridePolicy(ies) in current namespace and ClusterOverridePolicy(ies), which not present in this list will still be applied if they matches the resources.
    preemption : str, default is "Never", optional
        Preemption declares the behaviors for preempting. Valid options are "Always" and "Never".
    priority : int, default is Undefined, optional
        Priority indicates the importance of a policy(PropagationPolicy or ClusterPropagationPolicy). A policy will be applied for the matched resource templates if there is no other policies with higher priority at the point of the resource template be processed. Once a resource template has been claimed by a policy, by default it will not be preempted by following policies even with a higher priority. See Preemption for more details. 
         In case of two policies have the same priority, the one with a more precise matching rules in ResourceSelectors wins: - matching by name(resourceSelector.name) has higher priority than by selector(resourceSelector.labelSelector) - matching by selector(resourceSelector.labelSelector) has higher priority than by APIVersion(resourceSelector.apiVersion) and Kind(resourceSelector.kind). If there is still no winner at this point, the one with the lower alphabetic order wins, e.g. policy 'bar' has higher priority than 'foo'. 
         The higher the value, the higher the priority. Defaults to zero.
    propagateDeps : bool, default is Undefined, optional
        PropagateDeps tells if relevant resources should be propagated automatically. Take 'Deployment' which referencing 'ConfigMap' and 'Secret' as an example, when 'propagateDeps' is 'true', the referencing resources could be omitted(for saving config effort) from 'resourceSelectors' as they will be propagated along with the Deployment. In addition to the propagating process, the referencing resources will be migrated along with the Deployment in the fail-over scenario. 
         Defaults to false.
    resourceSelectors : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0], default is Undefined, required
        ResourceSelectors used to select resources. Nil or empty selector is not allowed and doesn't mean match all kinds of resources for security concerns that sensitive resources(like Secret) might be accidentally propagated.
    schedulerName : str, default is "default-scheduler", optional
        SchedulerName represents which scheduler to proceed the scheduling. If specified, the policy will be dispatched by specified scheduler. If not specified, the policy will be dispatched by default scheduler.
    failover : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailover, default is Undefined, optional
        failover
    placement : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacement, default is Undefined, optional
        placement
    """


    association?: bool

    conflictResolution?: "Abort" | "Overwrite" = "Abort"

    dependentOverrides?: [str]

    preemption?: "Always" | "Never" = "Never"

    priority?: int

    propagateDeps?: bool

    resourceSelectors: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0]

    schedulerName?: str = "default-scheduler"

    failover?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailover

    placement?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacement


    check:


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailover:
    """
    Failover indicates how Karmada migrates applications in case of failures. If this value is nil, failover is disabled.

    Attributes
    ----------
    application : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailoverApplication, default is Undefined, optional
        application
    """


    application?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailoverApplication


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailoverApplication:
    """
    Application indicates failover behaviors in case of application failure. If this value is nil, failover is disabled. If set, the PropagateDeps should be true so that the dependencies could be migrated along with the application.

    Attributes
    ----------
    gracePeriodSeconds : int, default is Undefined, optional
        GracePeriodSeconds is the maximum waiting duration in seconds before application on the migrated cluster should be deleted. Required only when PurgeMode is "Graciously" and defaults to 600s. If the application on the new cluster cannot reach a Healthy state, Karmada will delete the application after GracePeriodSeconds is reached. Value must be positive integer.
    purgeMode : str, default is "Graciously", optional
        PurgeMode represents how to deal with the legacy applications on the cluster from which the application is migrated. Valid options are "Immediately", "Graciously" and "Never". Defaults to "Graciously".
    decisionConditions : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailoverApplicationDecisionConditions, default is Undefined, required
        decision conditions
    """


    gracePeriodSeconds?: int

    purgeMode?: str = "Graciously"

    decisionConditions: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailoverApplicationDecisionConditions


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecFailoverApplicationDecisionConditions:
    """
    DecisionConditions indicates the decision conditions of performing the failover process. Only when all conditions are met can the failover process be performed. Currently, DecisionConditions includes several conditions: - TolerationSeconds (optional)

    Attributes
    ----------
    tolerationSeconds : int, default is 300, optional
        TolerationSeconds represents the period of time Karmada should wait after reaching the desired state before performing failover process. If not specified, Karmada will immediately perform failover process. Defaults to 300s.
    """


    tolerationSeconds?: int = 300


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacement:
    """
    Placement represents the rule for select clusters to propagate resources.

    Attributes
    ----------
    clusterAffinities : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0], default is Undefined, optional
        ClusterAffinities represents scheduling restrictions to multiple cluster groups that indicated by ClusterAffinityTerm. 
         The scheduler will evaluate these groups one by one in the order they appear in the spec, the group that does not satisfy scheduling restrictions will be ignored which means all clusters in this group will not be selected unless it also belongs to the next group(a cluster could belong to multiple groups). 
         If none of the groups satisfy the scheduling restrictions, then scheduling fails, which means no cluster will be selected. 
         Note: 1. ClusterAffinities can not co-exist with ClusterAffinity. 2. If both ClusterAffinity and ClusterAffinities are not set, any cluster can be scheduling candidates. 
         Potential use case 1: The private clusters in the local data center could be the main group, and the managed clusters provided by cluster providers could be the secondary group. So that the Karmada scheduler would prefer to schedule workloads to the main group and the second group will only be considered in case of the main group does not satisfy restrictions(like, lack of resources). 
         Potential use case 2: For the disaster recovery scenario, the clusters could be organized to primary and backup groups, the workloads would be scheduled to primary clusters firstly, and when primary cluster fails(like data center power off), Karmada scheduler could migrate workloads to the backup clusters.
    clusterTolerations : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterTolerationsItems0], default is Undefined, optional
        ClusterTolerations represents the tolerations.
    spreadConstraints : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementSpreadConstraintsItems0], default is Undefined, optional
        SpreadConstraints represents a list of the scheduling constraints.
    clusterAffinity : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinity, default is Undefined, optional
        cluster affinity
    replicaScheduling : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaScheduling, default is Undefined, optional
        replica scheduling
    """


    clusterAffinities?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0]

    clusterTolerations?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterTolerationsItems0]

    spreadConstraints?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementSpreadConstraintsItems0]

    clusterAffinity?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinity

    replicaScheduling?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaScheduling


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0:
    """
    ClusterAffinityTerm selects a set of cluster.

    Attributes
    ----------
    affinityName : str, default is Undefined, required
        AffinityName is the name of the cluster group.
    clusterNames : [str], default is Undefined, optional
        ClusterNames is the list of clusters to be selected.
    exclude : [str], default is Undefined, optional
        ExcludedClusters is the list of clusters to be ignored.
    fieldSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0FieldSelector, default is Undefined, optional
        field selector
    labelSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0LabelSelector, default is Undefined, optional
        label selector
    """


    affinityName: str

    clusterNames?: [str]

    exclude?: [str]

    fieldSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0FieldSelector

    labelSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0LabelSelector


    check:
        len(affinityName) <= 32
        len(affinityName) >= 1


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0FieldSelector:
    """
    FieldSelector is a filter to select member clusters by fields. The key(field) of the match expression should be 'provider', 'region', or 'zone', and the operator of the match expression should be 'In' or 'NotIn'. If non-nil and non-empty, only the clusters match this filter will be selected.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0FieldSelectorMatchExpressionsItems0], default is Undefined, optional
        A list of field selector requirements.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0FieldSelectorMatchExpressionsItems0]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0FieldSelectorMatchExpressionsItems0:
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0LabelSelector:
    """
    LabelSelector is a filter to select member clusters by labels. If non-nil and non-empty, only the clusters match this filter will be selected.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinitiesItems0LabelSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinity:
    """
    ClusterAffinity represents scheduling restrictions to a certain set of clusters. Note: 1. ClusterAffinity can not co-exist with ClusterAffinities. 2. If both ClusterAffinity and ClusterAffinities are not set, any cluster can be scheduling candidates.

    Attributes
    ----------
    clusterNames : [str], default is Undefined, optional
        ClusterNames is the list of clusters to be selected.
    exclude : [str], default is Undefined, optional
        ExcludedClusters is the list of clusters to be ignored.
    fieldSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityFieldSelector, default is Undefined, optional
        field selector
    labelSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityLabelSelector, default is Undefined, optional
        label selector
    """


    clusterNames?: [str]

    exclude?: [str]

    fieldSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityFieldSelector

    labelSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityLabelSelector


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityFieldSelector:
    """
    FieldSelector is a filter to select member clusters by fields. The key(field) of the match expression should be 'provider', 'region', or 'zone', and the operator of the match expression should be 'In' or 'NotIn'. If non-nil and non-empty, only the clusters match this filter will be selected.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityFieldSelectorMatchExpressionsItems0], default is Undefined, optional
        A list of field selector requirements.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityFieldSelectorMatchExpressionsItems0]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityFieldSelectorMatchExpressionsItems0:
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityLabelSelector:
    """
    LabelSelector is a filter to select member clusters by labels. If non-nil and non-empty, only the clusters match this filter will be selected.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterAffinityLabelSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementClusterTolerationsItems0:
    """
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaScheduling:
    """
    ReplicaScheduling represents the scheduling policy on dealing with the number of replicas when propagating resources that have replicas in spec (e.g. deployments, statefulsets) to member clusters.

    Attributes
    ----------
    replicaDivisionPreference : str, default is Undefined, optional
        ReplicaDivisionPreference determines how the replicas is divided when ReplicaSchedulingType is "Divided". Valid options are Aggregated and Weighted. "Aggregated" divides replicas into clusters as few as possible, while respecting clusters' resource availabilities during the division. "Weighted" divides replicas by weight according to WeightPreference.
    replicaSchedulingType : str, default is "Divided", optional
        ReplicaSchedulingType determines how the replicas is scheduled when karmada propagating a resource. Valid options are Duplicated and Divided. "Duplicated" duplicates the same replicas to each candidate member cluster from resource. "Divided" divides replicas into parts according to number of valid candidate member clusters, and exact replicas for each cluster are determined by ReplicaDivisionPreference.
    weightPreference : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreference, default is Undefined, optional
        weight preference
    """


    replicaDivisionPreference?: "Aggregated" | "Weighted"

    replicaSchedulingType?: "Duplicated" | "Divided" = "Divided"

    weightPreference?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreference


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreference:
    """
    WeightPreference describes weight for each cluster or for each group of cluster If ReplicaDivisionPreference is set to "Weighted", and WeightPreference is not set, scheduler will weight all clusters the same.

    Attributes
    ----------
    dynamicWeight : str, default is Undefined, optional
        DynamicWeight specifies the factor to generates dynamic weight list. If specified, StaticWeightList will be ignored.
    staticWeightList : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0], default is Undefined, optional
        StaticWeightList defines the static cluster weight.
    """


    dynamicWeight?: "AvailableReplicas"

    staticWeightList?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0:
    """
    StaticClusterWeight defines the static cluster weight.

    Attributes
    ----------
    targetCluster : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetCluster, default is Undefined, required
        target cluster
    weight : int, default is Undefined, required
        Weight expressing the preference to the cluster(s) specified by 'TargetCluster'.
    """


    targetCluster: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetCluster

    weight: int


    check:
        weight >= 1


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetCluster:
    """
    TargetCluster describes the filter to select clusters.

    Attributes
    ----------
    clusterNames : [str], default is Undefined, optional
        ClusterNames is the list of clusters to be selected.
    exclude : [str], default is Undefined, optional
        ExcludedClusters is the list of clusters to be ignored.
    fieldSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterFieldSelector, default is Undefined, optional
        field selector
    labelSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterLabelSelector, default is Undefined, optional
        label selector
    """


    clusterNames?: [str]

    exclude?: [str]

    fieldSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterFieldSelector

    labelSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterLabelSelector


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterFieldSelector:
    """
    FieldSelector is a filter to select member clusters by fields. The key(field) of the match expression should be 'provider', 'region', or 'zone', and the operator of the match expression should be 'In' or 'NotIn'. If non-nil and non-empty, only the clusters match this filter will be selected.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterFieldSelectorMatchExpressionsItems0], default is Undefined, optional
        A list of field selector requirements.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterFieldSelectorMatchExpressionsItems0]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterFieldSelectorMatchExpressionsItems0:
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterLabelSelector:
    """
    LabelSelector is a filter to select member clusters by labels. If non-nil and non-empty, only the clusters match this filter will be selected.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementReplicaSchedulingWeightPreferenceStaticWeightListItems0TargetClusterLabelSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecPlacementSpreadConstraintsItems0:
    """
    SpreadConstraint represents the spread constraints on resources.

    Attributes
    ----------
    maxGroups : int, default is Undefined, optional
        MaxGroups restricts the maximum number of cluster groups to be selected.
    minGroups : int, default is Undefined, optional
        MinGroups restricts the minimum number of cluster groups to be selected. Defaults to 1.
    spreadByField : str, default is Undefined, optional
        SpreadByField represents the fields on Karmada cluster API used for dynamically grouping member clusters into different groups. Resources will be spread among different cluster groups. Available fields for spreading are: cluster, region, zone, and provider. SpreadByField should not co-exist with SpreadByLabel. If both SpreadByField and SpreadByLabel are empty, SpreadByField will be set to "cluster" by system.
    spreadByLabel : str, default is Undefined, optional
        SpreadByLabel represents the label key used for grouping member clusters into different groups. Resources will be spread among different cluster groups. SpreadByLabel should not co-exist with SpreadByField.
    """


    maxGroups?: int

    minGroups?: int

    spreadByField?: "cluster" | "region" | "zone" | "provider"

    spreadByLabel?: str


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0:
    """
    ResourceSelector the resources will be selected.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion represents the API version of the target resources.
    kind : str, default is Undefined, required
        Kind represents the Kind of the target resources.
    labelSelector : PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0LabelSelector, default is Undefined, optional
        label selector
    name : str, default is Undefined, optional
        Name of the target resource. Default is empty, which means selecting all resources.
    namespace : str, default is Undefined, optional
        Namespace of the target resource. Default is empty, which means inherit from the parent object scope.
    """


    apiVersion: str

    kind: str

    labelSelector?: PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0LabelSelector

    name?: str

    namespace?: str


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0LabelSelector:
    """
    A label query over a set of resources. If name is not empty, labelSelector will be ignored.

    Attributes
    ----------
    matchExpressions : [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema PolicyKarmadaIoV1alpha1ClusterPropagationPolicySpecResourceSelectorsItems0LabelSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


