"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema Clickhouse:
    """
    Clickhouse is the Schema for the clickhouses API

    Attributes
    ----------
    apiVersion : str, default is "aiven.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Clickhouse", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AivenIoV1alpha1ClickhouseSpec, default is Undefined, optional
        spec
    status : AivenIoV1alpha1ClickhouseStatus, default is Undefined, optional
        status
    """


    apiVersion: "aiven.io/v1alpha1" = "aiven.io/v1alpha1"

    kind: "Clickhouse" = "Clickhouse"

    metadata?: v1.ObjectMeta

    spec?: AivenIoV1alpha1ClickhouseSpec

    status?: AivenIoV1alpha1ClickhouseStatus


schema AivenIoV1alpha1ClickhouseSpec:
    """
    ClickhouseSpec defines the desired state of Clickhouse

    Attributes
    ----------
    authSecretRef : AivenIoV1alpha1ClickhouseSpecAuthSecretRef, default is Undefined, optional
        auth secret ref
    cloudName : str, default is Undefined, optional
        Cloud the service runs in.
    connInfoSecretTarget : AivenIoV1alpha1ClickhouseSpecConnInfoSecretTarget, default is Undefined, optional
        conn info secret target
    disk_space : str, default is Undefined, optional
        The disk space of the service, possible values depend on the service type, the cloud provider and the project. Reducing will result in the service re-balancing.
    maintenanceWindowDow : str, default is Undefined, optional
        Day of week when maintenance operations should be performed. One monday, tuesday, wednesday, etc.
    maintenanceWindowTime : str, default is Undefined, optional
        Time of day when maintenance operations should be performed. UTC time in HH:mm:ss format.
    plan : str, default is Undefined, required
        Subscription plan.
    project : str, default is Undefined, required
        Target project.
    projectVPCRef : AivenIoV1alpha1ClickhouseSpecProjectVPCRef, default is Undefined, optional
        project v p c ref
    projectVpcId : str, default is Undefined, optional
        Identifier of the VPC the service should be in, if any.
    serviceIntegrations : [AivenIoV1alpha1ClickhouseSpecServiceIntegrationsItems0], default is Undefined, optional
        Service integrations to specify when creating a service. Not applied after initial service creation
    tags : {str:str}, default is Undefined, optional
        Tags are key-value pairs that allow you to categorize services.
    terminationProtection : bool, default is Undefined, optional
        Prevent service from being deleted. It is recommended to have this enabled for all services.
    userConfig : AivenIoV1alpha1ClickhouseSpecUserConfig, default is Undefined, optional
        user config
    """


    authSecretRef?: AivenIoV1alpha1ClickhouseSpecAuthSecretRef

    cloudName?: str

    connInfoSecretTarget?: AivenIoV1alpha1ClickhouseSpecConnInfoSecretTarget

    disk_space?: str

    maintenanceWindowDow?: "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday"

    maintenanceWindowTime?: str

    plan: str

    project: str

    projectVPCRef?: AivenIoV1alpha1ClickhouseSpecProjectVPCRef

    projectVpcId?: str

    serviceIntegrations?: [AivenIoV1alpha1ClickhouseSpecServiceIntegrationsItems0]

    tags?: {str:str}

    terminationProtection?: bool

    userConfig?: AivenIoV1alpha1ClickhouseSpecUserConfig


    check:
        len(cloudName) <= 256
        len(maintenanceWindowTime) <= 8
        len(plan) <= 128
        len(project) <= 63
        len(projectVpcId) <= 36
        len(serviceIntegrations) <= 1


schema AivenIoV1alpha1ClickhouseSpecAuthSecretRef:
    """
    Authentication reference to Aiven token in a secret

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        name
    """


    key: str

    name: str


    check:
        len(key) >= 1
        len(name) >= 1


schema AivenIoV1alpha1ClickhouseSpecConnInfoSecretTarget:
    """
    Information regarding secret creation. 
     Exposed keys: `CLICKHOUSE_HOST`, `CLICKHOUSE_PORT`, `CLICKHOUSE_USER`, `CLICKHOUSE_PASSWORD`

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations added to the secret
    labels : {str:str}, default is Undefined, optional
        Labels added to the secret
    name : str, default is Undefined, required
        Name of the secret resource to be created. By default, is equal to the resource name
    prefix : str, default is Undefined, optional
        Prefix for the secret's keys. Added "as is" without any transformations. By default, is equal to the kind name in uppercase + underscore, e.g. `KAFKA_`, `REDIS_`, etc.
    """


    annotations?: {str:str}

    labels?: {str:str}

    name: str

    prefix?: str


schema AivenIoV1alpha1ClickhouseSpecProjectVPCRef:
    """
    ProjectVPCRef reference to ProjectVPC resource to use its ID as ProjectVPCID automatically

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    namespace : str, default is Undefined, optional
        namespace
    """


    name: str

    namespace?: str


    check:
        len(name) >= 1
        len(namespace) >= 1


schema AivenIoV1alpha1ClickhouseSpecServiceIntegrationsItems0:
    """
    Service integrations to specify when creating a service. Not applied after initial service creation

    Attributes
    ----------
    integrationType : str, default is Undefined, required
        integration type
    sourceServiceName : str, default is Undefined, required
        source service name
    """


    integrationType: "read_replica"

    sourceServiceName: str


    check:
        len(sourceServiceName) <= 64
        len(sourceServiceName) >= 1


schema AivenIoV1alpha1ClickhouseSpecUserConfig:
    """
    OpenSearch specific user configuration options

    Attributes
    ----------
    additional_backup_regions : [str], default is Undefined, optional
        Additional Cloud Regions for Backup Replication
    ip_filter : [AivenIoV1alpha1ClickhouseSpecUserConfigIPFilterItems0], default is Undefined, optional
        Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
    project_to_fork_from : str, default is Undefined, optional
        Name of another project to fork a service from. This has effect only when a new service is being created.
    service_to_fork_from : str, default is Undefined, optional
        Name of another service to fork from. This has effect only when a new service is being created.
    """


    additional_backup_regions?: [str]

    ip_filter?: [AivenIoV1alpha1ClickhouseSpecUserConfigIPFilterItems0]

    project_to_fork_from?: str

    service_to_fork_from?: str


    check:
        len(additional_backup_regions) <= 1
        len(ip_filter) <= 1024
        len(project_to_fork_from) <= 63
        len(service_to_fork_from) <= 64


schema AivenIoV1alpha1ClickhouseSpecUserConfigIPFilterItems0:
    """
    CIDR address block, either as a string, or in a dict with an optional description field

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description for IP filter list entry
    network : str, default is Undefined, required
        CIDR address block
    """


    description?: str

    network: str


    check:
        len(description) <= 1024
        len(network) <= 43


schema AivenIoV1alpha1ClickhouseStatus:
    """
    ServiceStatus defines the observed state of service

    Attributes
    ----------
    conditions : [AivenIoV1alpha1ClickhouseStatusConditionsItems0], default is Undefined, required
        Conditions represent the latest available observations of a service state
    state : str, default is Undefined, required
        Service state
    """


    conditions: [AivenIoV1alpha1ClickhouseStatusConditionsItems0]

    state: str


schema AivenIoV1alpha1ClickhouseStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


