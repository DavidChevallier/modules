"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema Project:
    """
    Project is the Schema for the projects API

    Attributes
    ----------
    apiVersion : str, default is "aiven.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Project", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AivenIoV1alpha1ProjectSpec, default is Undefined, optional
        spec
    status : AivenIoV1alpha1ProjectStatus, default is Undefined, optional
        status
    """


    apiVersion: "aiven.io/v1alpha1" = "aiven.io/v1alpha1"

    kind: "Project" = "Project"

    metadata?: v1.ObjectMeta

    spec?: AivenIoV1alpha1ProjectSpec

    status?: AivenIoV1alpha1ProjectStatus


schema AivenIoV1alpha1ProjectSpec:
    """
    ProjectSpec defines the desired state of Project

    Attributes
    ----------
    accountId : str, default is Undefined, optional
        Account ID
    authSecretRef : AivenIoV1alpha1ProjectSpecAuthSecretRef, default is Undefined, required
        auth secret ref
    billingAddress : str, default is Undefined, optional
        Billing name and address of the project
    billingCurrency : str, default is Undefined, optional
        Billing currency
    billingEmails : [str], default is Undefined, optional
        Billing contact emails of the project
    billingExtraText : str, default is Undefined, optional
        Extra text to be included in all project invoices, e.g. purchase order or cost center number
    billingGroupId : str, default is Undefined, optional
        BillingGroup ID
    cardId : str, default is Undefined, optional
        Credit card ID; The ID may be either last 4 digits of the card or the actual ID
    cloud : str, default is Undefined, optional
        Target cloud, example: aws-eu-central-1
    connInfoSecretTarget : AivenIoV1alpha1ProjectSpecConnInfoSecretTarget, default is Undefined, optional
        conn info secret target
    copyFromProject : str, default is Undefined, optional
        Project name from which to copy settings to the new project
    countryCode : str, default is Undefined, optional
        Billing country code of the project
    tags : {str:str}, default is Undefined, optional
        Tags are key-value pairs that allow you to categorize projects
    technicalEmails : [str], default is Undefined, optional
        Technical contact emails of the project
    """


    accountId?: str

    authSecretRef: AivenIoV1alpha1ProjectSpecAuthSecretRef

    billingAddress?: str

    billingCurrency?: "AUD" | "CAD" | "CHF" | "DKK" | "EUR" | "GBP" | "NOK" | "SEK" | "USD"

    billingEmails?: [str]

    billingExtraText?: str

    billingGroupId?: str

    cardId?: str

    cloud?: str

    connInfoSecretTarget?: AivenIoV1alpha1ProjectSpecConnInfoSecretTarget

    copyFromProject?: str

    countryCode?: str

    tags?: {str:str}

    technicalEmails?: [str]


    check:
        len(accountId) <= 32
        len(billingAddress) <= 1000
        len(billingEmails) <= 10
        len(billingExtraText) <= 1000
        len(billingGroupId) <= 36
        len(billingGroupId) >= 36
        len(cardId) <= 64
        len(cloud) <= 256
        len(copyFromProject) <= 63
        len(countryCode) <= 2
        len(countryCode) >= 2
        len(technicalEmails) <= 10


schema AivenIoV1alpha1ProjectSpecAuthSecretRef:
    """
    Authentication reference to Aiven token in a secret

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        name
    """


    key: str

    name: str


    check:
        len(key) >= 1
        len(name) >= 1


schema AivenIoV1alpha1ProjectSpecConnInfoSecretTarget:
    """
    Information regarding secret creation

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the Secret resource to be created
    """


    name: str


schema AivenIoV1alpha1ProjectStatus:
    """
    ProjectStatus defines the observed state of Project

    Attributes
    ----------
    availableCredits : str, default is Undefined, optional
        Available credirs
    conditions : [AivenIoV1alpha1ProjectStatusConditionsItems0], default is Undefined, required
        Conditions represent the latest available observations of an Project state
    country : str, default is Undefined, optional
        Country name
    estimatedBalance : str, default is Undefined, optional
        Estimated balance
    paymentMethod : str, default is Undefined, optional
        Payment method name
    vatId : str, default is Undefined, optional
        EU VAT Identification Number
    """


    availableCredits?: str

    conditions: [AivenIoV1alpha1ProjectStatusConditionsItems0]

    country?: str

    estimatedBalance?: str

    paymentMethod?: str

    vatId?: str


    check:
        len(vatId) <= 64


schema AivenIoV1alpha1ProjectStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


