"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema ConnectionPool:
    """
    ConnectionPool is the Schema for the connectionpools API

    Attributes
    ----------
    apiVersion : str, default is "aiven.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ConnectionPool", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AivenIoV1alpha1ConnectionPoolSpec, default is Undefined, optional
        spec
    status : AivenIoV1alpha1ConnectionPoolStatus, default is Undefined, optional
        status
    """


    apiVersion: "aiven.io/v1alpha1" = "aiven.io/v1alpha1"

    kind: "ConnectionPool" = "ConnectionPool"

    metadata?: v1.ObjectMeta

    spec?: AivenIoV1alpha1ConnectionPoolSpec

    status?: AivenIoV1alpha1ConnectionPoolStatus


schema AivenIoV1alpha1ConnectionPoolSpec:
    """
    ConnectionPoolSpec defines the desired state of ConnectionPool

    Attributes
    ----------
    authSecretRef : AivenIoV1alpha1ConnectionPoolSpecAuthSecretRef, default is Undefined, optional
        auth secret ref
    connInfoSecretTarget : AivenIoV1alpha1ConnectionPoolSpecConnInfoSecretTarget, default is Undefined, optional
        conn info secret target
    databaseName : str, default is Undefined, required
        Name of the database the pool connects to
    poolMode : str, default is Undefined, optional
        Mode the pool operates in (session, transaction, statement)
    poolSize : int, default is Undefined, optional
        Number of connections the pool may create towards the backend server
    project : str, default is Undefined, required
        Target project.
    serviceName : str, default is Undefined, required
        Service name.
    username : str, default is Undefined, required
        Name of the service user used to connect to the database
    """


    authSecretRef?: AivenIoV1alpha1ConnectionPoolSpecAuthSecretRef

    connInfoSecretTarget?: AivenIoV1alpha1ConnectionPoolSpecConnInfoSecretTarget

    databaseName: str

    poolMode?: "session" | "transaction" | "statement"

    poolSize?: int

    project: str

    serviceName: str

    username: str


    check:
        len(databaseName) <= 40
        len(project) <= 63
        len(serviceName) <= 63
        len(username) <= 64


schema AivenIoV1alpha1ConnectionPoolSpecAuthSecretRef:
    """
    Authentication reference to Aiven token in a secret

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    name : str, default is Undefined, required
        name
    """


    key: str

    name: str


    check:
        len(key) >= 1
        len(name) >= 1


schema AivenIoV1alpha1ConnectionPoolSpecConnInfoSecretTarget:
    """
    Information regarding secret creation. 
     Exposed keys: `CONNECTIONPOOL_HOST`, `CONNECTIONPOOL_PORT`, `CONNECTIONPOOL_DATABASE`, `CONNECTIONPOOL_USER`, `CONNECTIONPOOL_PASSWORD`, `CONNECTIONPOOL_SSLMODE`, `CONNECTIONPOOL_DATABASE_URI`

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations added to the secret
    labels : {str:str}, default is Undefined, optional
        Labels added to the secret
    name : str, default is Undefined, required
        Name of the secret resource to be created. By default, is equal to the resource name
    prefix : str, default is Undefined, optional
        Prefix for the secret's keys. Added "as is" without any transformations. By default, is equal to the kind name in uppercase + underscore, e.g. `KAFKA_`, `REDIS_`, etc.
    """


    annotations?: {str:str}

    labels?: {str:str}

    name: str

    prefix?: str


schema AivenIoV1alpha1ConnectionPoolStatus:
    """
    ConnectionPoolStatus defines the observed state of ConnectionPool

    Attributes
    ----------
    conditions : [AivenIoV1alpha1ConnectionPoolStatusConditionsItems0], default is Undefined, required
        Conditions represent the latest available observations of an ConnectionPool state
    """


    conditions: [AivenIoV1alpha1ConnectionPoolStatusConditionsItems0]


schema AivenIoV1alpha1ConnectionPoolStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition. This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex.match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex.match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


